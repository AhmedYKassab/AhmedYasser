
AMIT_GRAD_PROJ.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000359c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010a  00800060  0000359c  00003630  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  0080016a  0080016a  0000373a  2**0
                  ALLOC
  3 .stab         00003e64  00000000  00000000  0000373c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001904  00000000  00000000  000075a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00008ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  00009064  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  00009278  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000b88a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0000cd58  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000e064  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0000e244  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0000e54b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ef65  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 9a 19 	jmp	0x3334	; 0x3334 <__vector_1>
       8:	0c 94 c5 19 	jmp	0x338a	; 0x338a <__vector_2>
       c:	0c 94 f0 19 	jmp	0x33e0	; 0x33e0 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 10 1a 	jmp	0x3420	; 0x3420 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e9       	ldi	r30, 0x9C	; 156
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 36       	cpi	r26, 0x6A	; 106
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e6       	ldi	r26, 0x6A	; 106
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 37       	cpi	r26, 0x73	; 115
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5a 1a 	call	0x34b4	; 0x34b4 <main>
      8a:	0c 94 cc 1a 	jmp	0x3598	; 0x3598 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 95 1a 	jmp	0x352a	; 0x352a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b1 1a 	jmp	0x3562	; 0x3562 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a1 1a 	jmp	0x3542	; 0x3542 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 bd 1a 	jmp	0x357a	; 0x357a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a1 1a 	jmp	0x3542	; 0x3542 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 bd 1a 	jmp	0x357a	; 0x357a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 95 1a 	jmp	0x352a	; 0x352a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b1 1a 	jmp	0x3562	; 0x3562 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 9d 1a 	jmp	0x353a	; 0x353a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 b9 1a 	jmp	0x3572	; 0x3572 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 a1 1a 	jmp	0x3542	; 0x3542 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 bd 1a 	jmp	0x357a	; 0x357a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 a1 1a 	jmp	0x3542	; 0x3542 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 bd 1a 	jmp	0x357a	; 0x357a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 a1 1a 	jmp	0x3542	; 0x3542 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 bd 1a 	jmp	0x357a	; 0x357a <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 9e 1a 	jmp	0x353c	; 0x353c <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 ba 1a 	jmp	0x3574	; 0x3574 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 a5 1a 	jmp	0x354a	; 0x354a <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 c1 1a 	jmp	0x3582	; 0x3582 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 9d 1a 	jmp	0x353a	; 0x353a <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 b9 1a 	jmp	0x3572	; 0x3572 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e8 59       	subi	r30, 0x98	; 152
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <timer0_init>:
#include "timer.h"



void timer0_init(u8 mode)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	00 d0       	rcall	.+0      	; 0xef0 <timer0_init+0x6>
     ef0:	0f 92       	push	r0
     ef2:	cd b7       	in	r28, 0x3d	; 61
     ef4:	de b7       	in	r29, 0x3e	; 62
     ef6:	89 83       	std	Y+1, r24	; 0x01

	switch(mode)
     ef8:	89 81       	ldd	r24, Y+1	; 0x01
     efa:	28 2f       	mov	r18, r24
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	3b 83       	std	Y+3, r19	; 0x03
     f00:	2a 83       	std	Y+2, r18	; 0x02
     f02:	8a 81       	ldd	r24, Y+2	; 0x02
     f04:	9b 81       	ldd	r25, Y+3	; 0x03
     f06:	81 30       	cpi	r24, 0x01	; 1
     f08:	91 05       	cpc	r25, r1
     f0a:	21 f1       	breq	.+72     	; 0xf54 <timer0_init+0x6a>
     f0c:	2a 81       	ldd	r18, Y+2	; 0x02
     f0e:	3b 81       	ldd	r19, Y+3	; 0x03
     f10:	22 30       	cpi	r18, 0x02	; 2
     f12:	31 05       	cpc	r19, r1
     f14:	2c f4       	brge	.+10     	; 0xf20 <timer0_init+0x36>
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	9b 81       	ldd	r25, Y+3	; 0x03
     f1a:	00 97       	sbiw	r24, 0x00	; 0
     f1c:	61 f0       	breq	.+24     	; 0xf36 <timer0_init+0x4c>
     f1e:	46 c0       	rjmp	.+140    	; 0xfac <timer0_init+0xc2>
     f20:	2a 81       	ldd	r18, Y+2	; 0x02
     f22:	3b 81       	ldd	r19, Y+3	; 0x03
     f24:	22 30       	cpi	r18, 0x02	; 2
     f26:	31 05       	cpc	r19, r1
     f28:	21 f1       	breq	.+72     	; 0xf72 <timer0_init+0x88>
     f2a:	8a 81       	ldd	r24, Y+2	; 0x02
     f2c:	9b 81       	ldd	r25, Y+3	; 0x03
     f2e:	83 30       	cpi	r24, 0x03	; 3
     f30:	91 05       	cpc	r25, r1
     f32:	71 f1       	breq	.+92     	; 0xf90 <timer0_init+0xa6>
     f34:	3b c0       	rjmp	.+118    	; 0xfac <timer0_init+0xc2>
	{

		case OVERFLOW_MODE:
		CLR_BIT(TCCR0,3);
     f36:	a3 e5       	ldi	r26, 0x53	; 83
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	e3 e5       	ldi	r30, 0x53	; 83
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	87 7f       	andi	r24, 0xF7	; 247
     f42:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,6);
     f44:	a3 e5       	ldi	r26, 0x53	; 83
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	e3 e5       	ldi	r30, 0x53	; 83
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	8f 7b       	andi	r24, 0xBF	; 191
     f50:	8c 93       	st	X, r24
     f52:	2c c0       	rjmp	.+88     	; 0xfac <timer0_init+0xc2>
		break;

		case CTC_MODE:
		SET_BIT(TCCR0,3);
     f54:	a3 e5       	ldi	r26, 0x53	; 83
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	e3 e5       	ldi	r30, 0x53	; 83
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	88 60       	ori	r24, 0x08	; 8
     f60:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,6);
     f62:	a3 e5       	ldi	r26, 0x53	; 83
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	e3 e5       	ldi	r30, 0x53	; 83
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	8f 7b       	andi	r24, 0xBF	; 191
     f6e:	8c 93       	st	X, r24
     f70:	1d c0       	rjmp	.+58     	; 0xfac <timer0_init+0xc2>
		break;

		case FAST_PWM_MODE:
		SET_BIT(TCCR0,3);
     f72:	a3 e5       	ldi	r26, 0x53	; 83
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	e3 e5       	ldi	r30, 0x53	; 83
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	88 60       	ori	r24, 0x08	; 8
     f7e:	8c 93       	st	X, r24
		SET_BIT(TCCR0,6);
     f80:	a3 e5       	ldi	r26, 0x53	; 83
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	e3 e5       	ldi	r30, 0x53	; 83
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	80 64       	ori	r24, 0x40	; 64
     f8c:	8c 93       	st	X, r24
     f8e:	0e c0       	rjmp	.+28     	; 0xfac <timer0_init+0xc2>
		break;

		case PWM_PHASE_CORRECT_MODE:
		CLR_BIT(TCCR0,3);
     f90:	a3 e5       	ldi	r26, 0x53	; 83
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	e3 e5       	ldi	r30, 0x53	; 83
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	87 7f       	andi	r24, 0xF7	; 247
     f9c:	8c 93       	st	X, r24
		SET_BIT(TCCR0,6);
     f9e:	a3 e5       	ldi	r26, 0x53	; 83
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	e3 e5       	ldi	r30, 0x53	; 83
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	80 64       	ori	r24, 0x40	; 64
     faa:	8c 93       	st	X, r24
		break;

		default:
		break;	
	}
	TCNT0 = 0;
     fac:	e2 e5       	ldi	r30, 0x52	; 82
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	10 82       	st	Z, r1

}
     fb2:	0f 90       	pop	r0
     fb4:	0f 90       	pop	r0
     fb6:	0f 90       	pop	r0
     fb8:	cf 91       	pop	r28
     fba:	df 91       	pop	r29
     fbc:	08 95       	ret

00000fbe <timer0_start>:


void timer0_start(u8 prescaler)
{
     fbe:	df 93       	push	r29
     fc0:	cf 93       	push	r28
     fc2:	00 d0       	rcall	.+0      	; 0xfc4 <timer0_start+0x6>
     fc4:	0f 92       	push	r0
     fc6:	cd b7       	in	r28, 0x3d	; 61
     fc8:	de b7       	in	r29, 0x3e	; 62
     fca:	89 83       	std	Y+1, r24	; 0x01

	switch (prescaler)
     fcc:	89 81       	ldd	r24, Y+1	; 0x01
     fce:	28 2f       	mov	r18, r24
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	3b 83       	std	Y+3, r19	; 0x03
     fd4:	2a 83       	std	Y+2, r18	; 0x02
     fd6:	8a 81       	ldd	r24, Y+2	; 0x02
     fd8:	9b 81       	ldd	r25, Y+3	; 0x03
     fda:	83 30       	cpi	r24, 0x03	; 3
     fdc:	91 05       	cpc	r25, r1
     fde:	09 f4       	brne	.+2      	; 0xfe2 <timer0_start+0x24>
     fe0:	49 c0       	rjmp	.+146    	; 0x1074 <timer0_start+0xb6>
     fe2:	2a 81       	ldd	r18, Y+2	; 0x02
     fe4:	3b 81       	ldd	r19, Y+3	; 0x03
     fe6:	24 30       	cpi	r18, 0x04	; 4
     fe8:	31 05       	cpc	r19, r1
     fea:	5c f4       	brge	.+22     	; 0x1002 <timer0_start+0x44>
     fec:	8a 81       	ldd	r24, Y+2	; 0x02
     fee:	9b 81       	ldd	r25, Y+3	; 0x03
     ff0:	81 30       	cpi	r24, 0x01	; 1
     ff2:	91 05       	cpc	r25, r1
     ff4:	99 f0       	breq	.+38     	; 0x101c <timer0_start+0x5e>
     ff6:	2a 81       	ldd	r18, Y+2	; 0x02
     ff8:	3b 81       	ldd	r19, Y+3	; 0x03
     ffa:	22 30       	cpi	r18, 0x02	; 2
     ffc:	31 05       	cpc	r19, r1
     ffe:	21 f1       	breq	.+72     	; 0x1048 <timer0_start+0x8a>
    1000:	7a c0       	rjmp	.+244    	; 0x10f6 <timer0_start+0x138>
    1002:	8a 81       	ldd	r24, Y+2	; 0x02
    1004:	9b 81       	ldd	r25, Y+3	; 0x03
    1006:	84 30       	cpi	r24, 0x04	; 4
    1008:	91 05       	cpc	r25, r1
    100a:	09 f4       	brne	.+2      	; 0x100e <timer0_start+0x50>
    100c:	49 c0       	rjmp	.+146    	; 0x10a0 <timer0_start+0xe2>
    100e:	2a 81       	ldd	r18, Y+2	; 0x02
    1010:	3b 81       	ldd	r19, Y+3	; 0x03
    1012:	25 30       	cpi	r18, 0x05	; 5
    1014:	31 05       	cpc	r19, r1
    1016:	09 f4       	brne	.+2      	; 0x101a <timer0_start+0x5c>
    1018:	59 c0       	rjmp	.+178    	; 0x10cc <timer0_start+0x10e>
    101a:	6d c0       	rjmp	.+218    	; 0x10f6 <timer0_start+0x138>
	{

		case NO_PRE:
		SET_BIT(TCCR0,0);
    101c:	a3 e5       	ldi	r26, 0x53	; 83
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	e3 e5       	ldi	r30, 0x53	; 83
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	81 60       	ori	r24, 0x01	; 1
    1028:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,1);
    102a:	a3 e5       	ldi	r26, 0x53	; 83
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	e3 e5       	ldi	r30, 0x53	; 83
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	8d 7f       	andi	r24, 0xFD	; 253
    1036:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,2);
    1038:	a3 e5       	ldi	r26, 0x53	; 83
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	e3 e5       	ldi	r30, 0x53	; 83
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	8b 7f       	andi	r24, 0xFB	; 251
    1044:	8c 93       	st	X, r24
    1046:	57 c0       	rjmp	.+174    	; 0x10f6 <timer0_start+0x138>
		break; 

		case PRE8:
		CLR_BIT(TCCR0,0);
    1048:	a3 e5       	ldi	r26, 0x53	; 83
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	e3 e5       	ldi	r30, 0x53	; 83
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
    1052:	8e 7f       	andi	r24, 0xFE	; 254
    1054:	8c 93       	st	X, r24
		SET_BIT(TCCR0,1);
    1056:	a3 e5       	ldi	r26, 0x53	; 83
    1058:	b0 e0       	ldi	r27, 0x00	; 0
    105a:	e3 e5       	ldi	r30, 0x53	; 83
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	82 60       	ori	r24, 0x02	; 2
    1062:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,2);
    1064:	a3 e5       	ldi	r26, 0x53	; 83
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	e3 e5       	ldi	r30, 0x53	; 83
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	8b 7f       	andi	r24, 0xFB	; 251
    1070:	8c 93       	st	X, r24
    1072:	41 c0       	rjmp	.+130    	; 0x10f6 <timer0_start+0x138>
		break;

		case PRE64:
		SET_BIT(TCCR0,0);
    1074:	a3 e5       	ldi	r26, 0x53	; 83
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	e3 e5       	ldi	r30, 0x53	; 83
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	81 60       	ori	r24, 0x01	; 1
    1080:	8c 93       	st	X, r24
		SET_BIT(TCCR0,1);
    1082:	a3 e5       	ldi	r26, 0x53	; 83
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	e3 e5       	ldi	r30, 0x53	; 83
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	82 60       	ori	r24, 0x02	; 2
    108e:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,2);
    1090:	a3 e5       	ldi	r26, 0x53	; 83
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	e3 e5       	ldi	r30, 0x53	; 83
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	8b 7f       	andi	r24, 0xFB	; 251
    109c:	8c 93       	st	X, r24
    109e:	2b c0       	rjmp	.+86     	; 0x10f6 <timer0_start+0x138>
		break;

		case PRE256:
		CLR_BIT(TCCR0,0);
    10a0:	a3 e5       	ldi	r26, 0x53	; 83
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	e3 e5       	ldi	r30, 0x53	; 83
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	8e 7f       	andi	r24, 0xFE	; 254
    10ac:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,1);
    10ae:	a3 e5       	ldi	r26, 0x53	; 83
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	e3 e5       	ldi	r30, 0x53	; 83
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	8d 7f       	andi	r24, 0xFD	; 253
    10ba:	8c 93       	st	X, r24
		SET_BIT(TCCR0,2);
    10bc:	a3 e5       	ldi	r26, 0x53	; 83
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	e3 e5       	ldi	r30, 0x53	; 83
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	84 60       	ori	r24, 0x04	; 4
    10c8:	8c 93       	st	X, r24
    10ca:	15 c0       	rjmp	.+42     	; 0x10f6 <timer0_start+0x138>
		break;

		case PRE1024:
		SET_BIT(TCCR0,0);
    10cc:	a3 e5       	ldi	r26, 0x53	; 83
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	e3 e5       	ldi	r30, 0x53	; 83
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	81 60       	ori	r24, 0x01	; 1
    10d8:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,1);
    10da:	a3 e5       	ldi	r26, 0x53	; 83
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	e3 e5       	ldi	r30, 0x53	; 83
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	8d 7f       	andi	r24, 0xFD	; 253
    10e6:	8c 93       	st	X, r24
		SET_BIT(TCCR0,2);
    10e8:	a3 e5       	ldi	r26, 0x53	; 83
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	e3 e5       	ldi	r30, 0x53	; 83
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	84 60       	ori	r24, 0x04	; 4
    10f4:	8c 93       	st	X, r24

		default:
		break;
	}

}
    10f6:	0f 90       	pop	r0
    10f8:	0f 90       	pop	r0
    10fa:	0f 90       	pop	r0
    10fc:	cf 91       	pop	r28
    10fe:	df 91       	pop	r29
    1100:	08 95       	ret

00001102 <timer0_intial_val>:



void timer0_intial_val(u8 initialval)
{
    1102:	df 93       	push	r29
    1104:	cf 93       	push	r28
    1106:	0f 92       	push	r0
    1108:	cd b7       	in	r28, 0x3d	; 61
    110a:	de b7       	in	r29, 0x3e	; 62
    110c:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = initialval;
    110e:	e2 e5       	ldi	r30, 0x52	; 82
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	89 81       	ldd	r24, Y+1	; 0x01
    1114:	80 83       	st	Z, r24
}
    1116:	0f 90       	pop	r0
    1118:	cf 91       	pop	r28
    111a:	df 91       	pop	r29
    111c:	08 95       	ret

0000111e <timer0_stop>:



void timer0_stop(void)
{
    111e:	df 93       	push	r29
    1120:	cf 93       	push	r28
    1122:	cd b7       	in	r28, 0x3d	; 61
    1124:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR0,0);
    1126:	a3 e5       	ldi	r26, 0x53	; 83
    1128:	b0 e0       	ldi	r27, 0x00	; 0
    112a:	e3 e5       	ldi	r30, 0x53	; 83
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	8e 7f       	andi	r24, 0xFE	; 254
    1132:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,1);
    1134:	a3 e5       	ldi	r26, 0x53	; 83
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	e3 e5       	ldi	r30, 0x53	; 83
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	8d 7f       	andi	r24, 0xFD	; 253
    1140:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,2);
    1142:	a3 e5       	ldi	r26, 0x53	; 83
    1144:	b0 e0       	ldi	r27, 0x00	; 0
    1146:	e3 e5       	ldi	r30, 0x53	; 83
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	8b 7f       	andi	r24, 0xFB	; 251
    114e:	8c 93       	st	X, r24
}
    1150:	cf 91       	pop	r28
    1152:	df 91       	pop	r29
    1154:	08 95       	ret

00001156 <counter0_start>:



void counter0_start(u8 mode)
{
    1156:	df 93       	push	r29
    1158:	cf 93       	push	r28
    115a:	00 d0       	rcall	.+0      	; 0x115c <counter0_start+0x6>
    115c:	0f 92       	push	r0
    115e:	cd b7       	in	r28, 0x3d	; 61
    1160:	de b7       	in	r29, 0x3e	; 62
    1162:	89 83       	std	Y+1, r24	; 0x01
	switch(mode)
    1164:	89 81       	ldd	r24, Y+1	; 0x01
    1166:	28 2f       	mov	r18, r24
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	3b 83       	std	Y+3, r19	; 0x03
    116c:	2a 83       	std	Y+2, r18	; 0x02
    116e:	8a 81       	ldd	r24, Y+2	; 0x02
    1170:	9b 81       	ldd	r25, Y+3	; 0x03
    1172:	86 30       	cpi	r24, 0x06	; 6
    1174:	91 05       	cpc	r25, r1
    1176:	31 f0       	breq	.+12     	; 0x1184 <counter0_start+0x2e>
    1178:	2a 81       	ldd	r18, Y+2	; 0x02
    117a:	3b 81       	ldd	r19, Y+3	; 0x03
    117c:	27 30       	cpi	r18, 0x07	; 7
    117e:	31 05       	cpc	r19, r1
    1180:	b9 f0       	breq	.+46     	; 0x11b0 <counter0_start+0x5a>
    1182:	2b c0       	rjmp	.+86     	; 0x11da <counter0_start+0x84>
	{

		case EX_FALL:
		CLR_BIT(TCCR0,0);
    1184:	a3 e5       	ldi	r26, 0x53	; 83
    1186:	b0 e0       	ldi	r27, 0x00	; 0
    1188:	e3 e5       	ldi	r30, 0x53	; 83
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	8e 7f       	andi	r24, 0xFE	; 254
    1190:	8c 93       	st	X, r24
		SET_BIT(TCCR0,1);
    1192:	a3 e5       	ldi	r26, 0x53	; 83
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	e3 e5       	ldi	r30, 0x53	; 83
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	82 60       	ori	r24, 0x02	; 2
    119e:	8c 93       	st	X, r24
		SET_BIT(TCCR0,2);
    11a0:	a3 e5       	ldi	r26, 0x53	; 83
    11a2:	b0 e0       	ldi	r27, 0x00	; 0
    11a4:	e3 e5       	ldi	r30, 0x53	; 83
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	80 81       	ld	r24, Z
    11aa:	84 60       	ori	r24, 0x04	; 4
    11ac:	8c 93       	st	X, r24
    11ae:	15 c0       	rjmp	.+42     	; 0x11da <counter0_start+0x84>
		break;

		case EX_RIS:
		SET_BIT(TCCR0,0);
    11b0:	a3 e5       	ldi	r26, 0x53	; 83
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	e3 e5       	ldi	r30, 0x53	; 83
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	81 60       	ori	r24, 0x01	; 1
    11bc:	8c 93       	st	X, r24
		SET_BIT(TCCR0,1);
    11be:	a3 e5       	ldi	r26, 0x53	; 83
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	e3 e5       	ldi	r30, 0x53	; 83
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	82 60       	ori	r24, 0x02	; 2
    11ca:	8c 93       	st	X, r24
		SET_BIT(TCCR0,2);
    11cc:	a3 e5       	ldi	r26, 0x53	; 83
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	e3 e5       	ldi	r30, 0x53	; 83
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	84 60       	ori	r24, 0x04	; 4
    11d8:	8c 93       	st	X, r24
		break;

		default:
		break;
	}
}
    11da:	0f 90       	pop	r0
    11dc:	0f 90       	pop	r0
    11de:	0f 90       	pop	r0
    11e0:	cf 91       	pop	r28
    11e2:	df 91       	pop	r29
    11e4:	08 95       	ret

000011e6 <timer0_wait_for_flag>:


void timer0_wait_for_flag(u8 flag)
{
    11e6:	df 93       	push	r29
    11e8:	cf 93       	push	r28
    11ea:	00 d0       	rcall	.+0      	; 0x11ec <timer0_wait_for_flag+0x6>
    11ec:	0f 92       	push	r0
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62
    11f2:	89 83       	std	Y+1, r24	; 0x01

	switch(flag)
    11f4:	89 81       	ldd	r24, Y+1	; 0x01
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	3b 83       	std	Y+3, r19	; 0x03
    11fc:	2a 83       	std	Y+2, r18	; 0x02
    11fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1200:	9b 81       	ldd	r25, Y+3	; 0x03
    1202:	00 97       	sbiw	r24, 0x00	; 0
    1204:	31 f0       	breq	.+12     	; 0x1212 <timer0_wait_for_flag+0x2c>
    1206:	2a 81       	ldd	r18, Y+2	; 0x02
    1208:	3b 81       	ldd	r19, Y+3	; 0x03
    120a:	21 30       	cpi	r18, 0x01	; 1
    120c:	31 05       	cpc	r19, r1
    120e:	91 f0       	breq	.+36     	; 0x1234 <timer0_wait_for_flag+0x4e>
    1210:	22 c0       	rjmp	.+68     	; 0x1256 <timer0_wait_for_flag+0x70>
	{

		case OVERFLOW_FLAG:
		while(!GET_BIT(TIFR,0));
    1212:	e8 e5       	ldi	r30, 0x58	; 88
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	88 2f       	mov	r24, r24
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	81 70       	andi	r24, 0x01	; 1
    121e:	90 70       	andi	r25, 0x00	; 0
    1220:	00 97       	sbiw	r24, 0x00	; 0
    1222:	b9 f3       	breq	.-18     	; 0x1212 <timer0_wait_for_flag+0x2c>
		SET_BIT(TIFR,0);
    1224:	a8 e5       	ldi	r26, 0x58	; 88
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	e8 e5       	ldi	r30, 0x58	; 88
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	81 60       	ori	r24, 0x01	; 1
    1230:	8c 93       	st	X, r24
    1232:	11 c0       	rjmp	.+34     	; 0x1256 <timer0_wait_for_flag+0x70>
		break;

		case OUT_COMPARE_FLAG:
		while(!GET_BIT(TIFR,1));
    1234:	e8 e5       	ldi	r30, 0x58	; 88
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 81       	ld	r24, Z
    123a:	86 95       	lsr	r24
    123c:	88 2f       	mov	r24, r24
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	81 70       	andi	r24, 0x01	; 1
    1242:	90 70       	andi	r25, 0x00	; 0
    1244:	00 97       	sbiw	r24, 0x00	; 0
    1246:	b1 f3       	breq	.-20     	; 0x1234 <timer0_wait_for_flag+0x4e>
		SET_BIT(TIFR,1);
    1248:	a8 e5       	ldi	r26, 0x58	; 88
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	e8 e5       	ldi	r30, 0x58	; 88
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	82 60       	ori	r24, 0x02	; 2
    1254:	8c 93       	st	X, r24

		default:
		break;
	}

}
    1256:	0f 90       	pop	r0
    1258:	0f 90       	pop	r0
    125a:	0f 90       	pop	r0
    125c:	cf 91       	pop	r28
    125e:	df 91       	pop	r29
    1260:	08 95       	ret

00001262 <timer0_status>:



void timer0_status(u8 *val)
{
    1262:	df 93       	push	r29
    1264:	cf 93       	push	r28
    1266:	00 d0       	rcall	.+0      	; 0x1268 <timer0_status+0x6>
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
    126c:	9a 83       	std	Y+2, r25	; 0x02
    126e:	89 83       	std	Y+1, r24	; 0x01
	*val = TCNT0;
    1270:	e2 e5       	ldi	r30, 0x52	; 82
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	e9 81       	ldd	r30, Y+1	; 0x01
    1278:	fa 81       	ldd	r31, Y+2	; 0x02
    127a:	80 83       	st	Z, r24
}
    127c:	0f 90       	pop	r0
    127e:	0f 90       	pop	r0
    1280:	cf 91       	pop	r28
    1282:	df 91       	pop	r29
    1284:	08 95       	ret

00001286 <timer0_interrupt>:


void timer0_interrupt(u8 mode)
{
    1286:	df 93       	push	r29
    1288:	cf 93       	push	r28
    128a:	00 d0       	rcall	.+0      	; 0x128c <timer0_interrupt+0x6>
    128c:	0f 92       	push	r0
    128e:	cd b7       	in	r28, 0x3d	; 61
    1290:	de b7       	in	r29, 0x3e	; 62
    1292:	89 83       	std	Y+1, r24	; 0x01
	switch(mode)
    1294:	89 81       	ldd	r24, Y+1	; 0x01
    1296:	28 2f       	mov	r18, r24
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	3b 83       	std	Y+3, r19	; 0x03
    129c:	2a 83       	std	Y+2, r18	; 0x02
    129e:	8a 81       	ldd	r24, Y+2	; 0x02
    12a0:	9b 81       	ldd	r25, Y+3	; 0x03
    12a2:	00 97       	sbiw	r24, 0x00	; 0
    12a4:	31 f0       	breq	.+12     	; 0x12b2 <timer0_interrupt+0x2c>
    12a6:	2a 81       	ldd	r18, Y+2	; 0x02
    12a8:	3b 81       	ldd	r19, Y+3	; 0x03
    12aa:	21 30       	cpi	r18, 0x01	; 1
    12ac:	31 05       	cpc	r19, r1
    12ae:	49 f0       	breq	.+18     	; 0x12c2 <timer0_interrupt+0x3c>
    12b0:	0f c0       	rjmp	.+30     	; 0x12d0 <timer0_interrupt+0x4a>
	{
		case OVERFLOW_MODE:
		SET_BIT(TIMSK,0);
    12b2:	a9 e5       	ldi	r26, 0x59	; 89
    12b4:	b0 e0       	ldi	r27, 0x00	; 0
    12b6:	e9 e5       	ldi	r30, 0x59	; 89
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	81 60       	ori	r24, 0x01	; 1
    12be:	8c 93       	st	X, r24
    12c0:	07 c0       	rjmp	.+14     	; 0x12d0 <timer0_interrupt+0x4a>
		break;
		case CTC_MODE:
		SET_BIT(TIMSK,1);
    12c2:	a9 e5       	ldi	r26, 0x59	; 89
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	e9 e5       	ldi	r30, 0x59	; 89
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	82 60       	ori	r24, 0x02	; 2
    12ce:	8c 93       	st	X, r24
		break;
		default:
		break;
	} 
}
    12d0:	0f 90       	pop	r0
    12d2:	0f 90       	pop	r0
    12d4:	0f 90       	pop	r0
    12d6:	cf 91       	pop	r28
    12d8:	df 91       	pop	r29
    12da:	08 95       	ret

000012dc <delay>:



void delay(u8 pre,u8 OverflowNumber)
{
    12dc:	df 93       	push	r29
    12de:	cf 93       	push	r28
    12e0:	00 d0       	rcall	.+0      	; 0x12e2 <delay+0x6>
    12e2:	0f 92       	push	r0
    12e4:	cd b7       	in	r28, 0x3d	; 61
    12e6:	de b7       	in	r29, 0x3e	; 62
    12e8:	8a 83       	std	Y+2, r24	; 0x02
    12ea:	6b 83       	std	Y+3, r22	; 0x03

	u8 count = 0;
    12ec:	19 82       	std	Y+1, r1	; 0x01
	timer0_start(pre);
    12ee:	8a 81       	ldd	r24, Y+2	; 0x02
    12f0:	0e 94 df 07 	call	0xfbe	; 0xfbe <timer0_start>
    12f4:	06 c0       	rjmp	.+12     	; 0x1302 <delay+0x26>
	while (count < OverflowNumber)
	{
		timer0_wait_for_flag(OVERFLOW_FLAG);
    12f6:	80 e0       	ldi	r24, 0x00	; 0
    12f8:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <timer0_wait_for_flag>
		count++;
    12fc:	89 81       	ldd	r24, Y+1	; 0x01
    12fe:	8f 5f       	subi	r24, 0xFF	; 255
    1300:	89 83       	std	Y+1, r24	; 0x01
void delay(u8 pre,u8 OverflowNumber)
{

	u8 count = 0;
	timer0_start(pre);
	while (count < OverflowNumber)
    1302:	99 81       	ldd	r25, Y+1	; 0x01
    1304:	8b 81       	ldd	r24, Y+3	; 0x03
    1306:	98 17       	cp	r25, r24
    1308:	b0 f3       	brcs	.-20     	; 0x12f6 <delay+0x1a>
	{
		timer0_wait_for_flag(OVERFLOW_FLAG);
		count++;
	}
	timer0_stop();
    130a:	0e 94 8f 08 	call	0x111e	; 0x111e <timer0_stop>
}
    130e:	0f 90       	pop	r0
    1310:	0f 90       	pop	r0
    1312:	0f 90       	pop	r0
    1314:	cf 91       	pop	r28
    1316:	df 91       	pop	r29
    1318:	08 95       	ret

0000131a <TWI_Init>:

#include "TWI_interface.h"

void TWI_Init(void)
{
    131a:	df 93       	push	r29
    131c:	cf 93       	push	r28
    131e:	cd b7       	in	r28, 0x3d	; 61
    1320:	de b7       	in	r29, 0x3e	; 62
    TWBR = 0x02;
    1322:	e0 e2       	ldi	r30, 0x20	; 32
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	82 e0       	ldi	r24, 0x02	; 2
    1328:	80 83       	st	Z, r24
	TWSR = 0x00;
    132a:	e1 e2       	ldi	r30, 0x21	; 33
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	10 82       	st	Z, r1
    TWAR = 0b00000010;
    1330:	e2 e2       	ldi	r30, 0x22	; 34
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	82 e0       	ldi	r24, 0x02	; 2
    1336:	80 83       	st	Z, r24
    TWCR = (1<<TWEN);
    1338:	e6 e5       	ldi	r30, 0x56	; 86
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	84 e0       	ldi	r24, 0x04	; 4
    133e:	80 83       	st	Z, r24
}
    1340:	cf 91       	pop	r28
    1342:	df 91       	pop	r29
    1344:	08 95       	ret

00001346 <TWI_Start>:

void TWI_Start(void)
{
    1346:	df 93       	push	r29
    1348:	cf 93       	push	r28
    134a:	cd b7       	in	r28, 0x3d	; 61
    134c:	de b7       	in	r29, 0x3e	; 62
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    134e:	e6 e5       	ldi	r30, 0x56	; 86
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	84 ea       	ldi	r24, 0xA4	; 164
    1354:	80 83       	st	Z, r24
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1356:	e6 e5       	ldi	r30, 0x56	; 86
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	88 23       	and	r24, r24
    135e:	dc f7       	brge	.-10     	; 0x1356 <TWI_Start+0x10>
}
    1360:	cf 91       	pop	r28
    1362:	df 91       	pop	r29
    1364:	08 95       	ret

00001366 <TWI_Stop>:

void TWI_Stop(void)
{
    1366:	df 93       	push	r29
    1368:	cf 93       	push	r28
    136a:	cd b7       	in	r28, 0x3d	; 61
    136c:	de b7       	in	r29, 0x3e	; 62
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    136e:	e6 e5       	ldi	r30, 0x56	; 86
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	84 e9       	ldi	r24, 0x94	; 148
    1374:	80 83       	st	Z, r24
}
    1376:	cf 91       	pop	r28
    1378:	df 91       	pop	r29
    137a:	08 95       	ret

0000137c <TWI_Write>:

void TWI_Write(unsigned char data)
{
    137c:	df 93       	push	r29
    137e:	cf 93       	push	r28
    1380:	0f 92       	push	r0
    1382:	cd b7       	in	r28, 0x3d	; 61
    1384:	de b7       	in	r29, 0x3e	; 62
    1386:	89 83       	std	Y+1, r24	; 0x01
    TWDR = data;
    1388:	e3 e2       	ldi	r30, 0x23	; 35
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	89 81       	ldd	r24, Y+1	; 0x01
    138e:	80 83       	st	Z, r24
    TWCR = (1 << TWINT) | (1 << TWEN);
    1390:	e6 e5       	ldi	r30, 0x56	; 86
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	84 e8       	ldi	r24, 0x84	; 132
    1396:	80 83       	st	Z, r24
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1398:	e6 e5       	ldi	r30, 0x56	; 86
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	88 23       	and	r24, r24
    13a0:	dc f7       	brge	.-10     	; 0x1398 <TWI_Write+0x1c>
}
    13a2:	0f 90       	pop	r0
    13a4:	cf 91       	pop	r28
    13a6:	df 91       	pop	r29
    13a8:	08 95       	ret

000013aa <TWI_Read_With_ACK>:

unsigned char TWI_Read_With_ACK(void)
{
    13aa:	df 93       	push	r29
    13ac:	cf 93       	push	r28
    13ae:	cd b7       	in	r28, 0x3d	; 61
    13b0:	de b7       	in	r29, 0x3e	; 62
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    13b2:	e6 e5       	ldi	r30, 0x56	; 86
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	84 ec       	ldi	r24, 0xC4	; 196
    13b8:	80 83       	st	Z, r24
    while(BIT_IS_CLEAR(TWCR,TWINT));
    13ba:	e6 e5       	ldi	r30, 0x56	; 86
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	80 81       	ld	r24, Z
    13c0:	88 23       	and	r24, r24
    13c2:	dc f7       	brge	.-10     	; 0x13ba <TWI_Read_With_ACK+0x10>
    return TWDR;
    13c4:	e3 e2       	ldi	r30, 0x23	; 35
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
}
    13ca:	cf 91       	pop	r28
    13cc:	df 91       	pop	r29
    13ce:	08 95       	ret

000013d0 <TWI_Read_With_NACK>:

unsigned char TWI_Read_With_NACK(void)
{
    13d0:	df 93       	push	r29
    13d2:	cf 93       	push	r28
    13d4:	cd b7       	in	r28, 0x3d	; 61
    13d6:	de b7       	in	r29, 0x3e	; 62
    TWCR = (1 << TWINT) | (1 << TWEN);
    13d8:	e6 e5       	ldi	r30, 0x56	; 86
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	84 e8       	ldi	r24, 0x84	; 132
    13de:	80 83       	st	Z, r24
    while(BIT_IS_CLEAR(TWCR,TWINT));
    13e0:	e6 e5       	ldi	r30, 0x56	; 86
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	88 23       	and	r24, r24
    13e8:	dc f7       	brge	.-10     	; 0x13e0 <TWI_Read_With_NACK+0x10>
    return TWDR;
    13ea:	e3 e2       	ldi	r30, 0x23	; 35
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
}
    13f0:	cf 91       	pop	r28
    13f2:	df 91       	pop	r29
    13f4:	08 95       	ret

000013f6 <TWI_Get_Status>:

unsigned char TWI_Get_Status(void)
{
    13f6:	df 93       	push	r29
    13f8:	cf 93       	push	r28
    13fa:	0f 92       	push	r0
    13fc:	cd b7       	in	r28, 0x3d	; 61
    13fe:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
    status = TWSR & 0xF8;
    1400:	e1 e2       	ldi	r30, 0x21	; 33
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	88 7f       	andi	r24, 0xF8	; 248
    1408:	89 83       	std	Y+1, r24	; 0x01
    return status;
    140a:	89 81       	ldd	r24, Y+1	; 0x01
}
    140c:	0f 90       	pop	r0
    140e:	cf 91       	pop	r28
    1410:	df 91       	pop	r29
    1412:	08 95       	ret

00001414 <global_interrupt_state>:
#include "interrupt.h"



void global_interrupt_state(u8 state)
{
    1414:	df 93       	push	r29
    1416:	cf 93       	push	r28
    1418:	0f 92       	push	r0
    141a:	cd b7       	in	r28, 0x3d	; 61
    141c:	de b7       	in	r29, 0x3e	; 62
    141e:	89 83       	std	Y+1, r24	; 0x01
	if (state == ENABLE)
    1420:	89 81       	ldd	r24, Y+1	; 0x01
    1422:	81 30       	cpi	r24, 0x01	; 1
    1424:	41 f4       	brne	.+16     	; 0x1436 <global_interrupt_state+0x22>
	{
		SET_BIT(SREG,7);
    1426:	af e5       	ldi	r26, 0x5F	; 95
    1428:	b0 e0       	ldi	r27, 0x00	; 0
    142a:	ef e5       	ldi	r30, 0x5F	; 95
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 81       	ld	r24, Z
    1430:	80 68       	ori	r24, 0x80	; 128
    1432:	8c 93       	st	X, r24
    1434:	07 c0       	rjmp	.+14     	; 0x1444 <global_interrupt_state+0x30>
	}
	else
	{
		CLR_BIT(SREG,7);
    1436:	af e5       	ldi	r26, 0x5F	; 95
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	ef e5       	ldi	r30, 0x5F	; 95
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	8f 77       	andi	r24, 0x7F	; 127
    1442:	8c 93       	st	X, r24
	}

}
    1444:	0f 90       	pop	r0
    1446:	cf 91       	pop	r28
    1448:	df 91       	pop	r29
    144a:	08 95       	ret

0000144c <interrupt_init>:



void interrupt_init(u8 id,u8 mode)
{
    144c:	df 93       	push	r29
    144e:	cf 93       	push	r28
    1450:	00 d0       	rcall	.+0      	; 0x1452 <interrupt_init+0x6>
    1452:	00 d0       	rcall	.+0      	; 0x1454 <interrupt_init+0x8>
    1454:	cd b7       	in	r28, 0x3d	; 61
    1456:	de b7       	in	r29, 0x3e	; 62
    1458:	89 83       	std	Y+1, r24	; 0x01
    145a:	6a 83       	std	Y+2, r22	; 0x02

	global_interrupt_state(ENABLE);
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	0e 94 0a 0a 	call	0x1414	; 0x1414 <global_interrupt_state>
	switch(id)
    1462:	89 81       	ldd	r24, Y+1	; 0x01
    1464:	28 2f       	mov	r18, r24
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	3c 83       	std	Y+4, r19	; 0x04
    146a:	2b 83       	std	Y+3, r18	; 0x03
    146c:	8b 81       	ldd	r24, Y+3	; 0x03
    146e:	9c 81       	ldd	r25, Y+4	; 0x04
    1470:	81 30       	cpi	r24, 0x01	; 1
    1472:	91 05       	cpc	r25, r1
    1474:	09 f4       	brne	.+2      	; 0x1478 <interrupt_init+0x2c>
    1476:	70 c0       	rjmp	.+224    	; 0x1558 <interrupt_init+0x10c>
    1478:	2b 81       	ldd	r18, Y+3	; 0x03
    147a:	3c 81       	ldd	r19, Y+4	; 0x04
    147c:	22 30       	cpi	r18, 0x02	; 2
    147e:	31 05       	cpc	r19, r1
    1480:	09 f4       	brne	.+2      	; 0x1484 <interrupt_init+0x38>
    1482:	ce c0       	rjmp	.+412    	; 0x1620 <interrupt_init+0x1d4>
    1484:	8b 81       	ldd	r24, Y+3	; 0x03
    1486:	9c 81       	ldd	r25, Y+4	; 0x04
    1488:	00 97       	sbiw	r24, 0x00	; 0
    148a:	09 f0       	breq	.+2      	; 0x148e <interrupt_init+0x42>
    148c:	ec c0       	rjmp	.+472    	; 0x1666 <interrupt_init+0x21a>
	{

		case EX_INT0:
		if (mode == LOW_MODE)
    148e:	8a 81       	ldd	r24, Y+2	; 0x02
    1490:	88 23       	and	r24, r24
    1492:	b1 f4       	brne	.+44     	; 0x14c0 <interrupt_init+0x74>
		{
			CLR_BIT(MCUCR,0);
    1494:	a5 e5       	ldi	r26, 0x55	; 85
    1496:	b0 e0       	ldi	r27, 0x00	; 0
    1498:	e5 e5       	ldi	r30, 0x55	; 85
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
    149e:	8e 7f       	andi	r24, 0xFE	; 254
    14a0:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,1);
    14a2:	a5 e5       	ldi	r26, 0x55	; 85
    14a4:	b0 e0       	ldi	r27, 0x00	; 0
    14a6:	e5 e5       	ldi	r30, 0x55	; 85
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	8d 7f       	andi	r24, 0xFD	; 253
    14ae:	8c 93       	st	X, r24
			SET_BIT(GICR,6);
    14b0:	ab e5       	ldi	r26, 0x5B	; 91
    14b2:	b0 e0       	ldi	r27, 0x00	; 0
    14b4:	eb e5       	ldi	r30, 0x5B	; 91
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	80 81       	ld	r24, Z
    14ba:	80 64       	ori	r24, 0x40	; 64
    14bc:	8c 93       	st	X, r24
    14be:	d3 c0       	rjmp	.+422    	; 0x1666 <interrupt_init+0x21a>
		}
		else if (mode == ANY_CHANGE_MODE)
    14c0:	8a 81       	ldd	r24, Y+2	; 0x02
    14c2:	81 30       	cpi	r24, 0x01	; 1
    14c4:	b1 f4       	brne	.+44     	; 0x14f2 <interrupt_init+0xa6>
		{
			SET_BIT(MCUCR,0);
    14c6:	a5 e5       	ldi	r26, 0x55	; 85
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	e5 e5       	ldi	r30, 0x55	; 85
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	81 60       	ori	r24, 0x01	; 1
    14d2:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,1);
    14d4:	a5 e5       	ldi	r26, 0x55	; 85
    14d6:	b0 e0       	ldi	r27, 0x00	; 0
    14d8:	e5 e5       	ldi	r30, 0x55	; 85
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	8d 7f       	andi	r24, 0xFD	; 253
    14e0:	8c 93       	st	X, r24
			SET_BIT(GICR,6);
    14e2:	ab e5       	ldi	r26, 0x5B	; 91
    14e4:	b0 e0       	ldi	r27, 0x00	; 0
    14e6:	eb e5       	ldi	r30, 0x5B	; 91
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	80 81       	ld	r24, Z
    14ec:	80 64       	ori	r24, 0x40	; 64
    14ee:	8c 93       	st	X, r24
    14f0:	ba c0       	rjmp	.+372    	; 0x1666 <interrupt_init+0x21a>
		}
		else if (mode == FALLING_MODE)
    14f2:	8a 81       	ldd	r24, Y+2	; 0x02
    14f4:	82 30       	cpi	r24, 0x02	; 2
    14f6:	b1 f4       	brne	.+44     	; 0x1524 <interrupt_init+0xd8>
		{
			CLR_BIT(MCUCR,0);
    14f8:	a5 e5       	ldi	r26, 0x55	; 85
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	e5 e5       	ldi	r30, 0x55	; 85
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	8e 7f       	andi	r24, 0xFE	; 254
    1504:	8c 93       	st	X, r24
			SET_BIT(MCUCR,1);
    1506:	a5 e5       	ldi	r26, 0x55	; 85
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	e5 e5       	ldi	r30, 0x55	; 85
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	80 81       	ld	r24, Z
    1510:	82 60       	ori	r24, 0x02	; 2
    1512:	8c 93       	st	X, r24
			SET_BIT(GICR,6);
    1514:	ab e5       	ldi	r26, 0x5B	; 91
    1516:	b0 e0       	ldi	r27, 0x00	; 0
    1518:	eb e5       	ldi	r30, 0x5B	; 91
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	80 81       	ld	r24, Z
    151e:	80 64       	ori	r24, 0x40	; 64
    1520:	8c 93       	st	X, r24
    1522:	a1 c0       	rjmp	.+322    	; 0x1666 <interrupt_init+0x21a>
		}
		else if (mode == RISING_MODE)
    1524:	8a 81       	ldd	r24, Y+2	; 0x02
    1526:	83 30       	cpi	r24, 0x03	; 3
    1528:	09 f0       	breq	.+2      	; 0x152c <interrupt_init+0xe0>
    152a:	9d c0       	rjmp	.+314    	; 0x1666 <interrupt_init+0x21a>
		{
			SET_BIT(MCUCR,0);
    152c:	a5 e5       	ldi	r26, 0x55	; 85
    152e:	b0 e0       	ldi	r27, 0x00	; 0
    1530:	e5 e5       	ldi	r30, 0x55	; 85
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	81 60       	ori	r24, 0x01	; 1
    1538:	8c 93       	st	X, r24
			SET_BIT(MCUCR,1);
    153a:	a5 e5       	ldi	r26, 0x55	; 85
    153c:	b0 e0       	ldi	r27, 0x00	; 0
    153e:	e5 e5       	ldi	r30, 0x55	; 85
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	80 81       	ld	r24, Z
    1544:	82 60       	ori	r24, 0x02	; 2
    1546:	8c 93       	st	X, r24
			SET_BIT(GICR,6);
    1548:	ab e5       	ldi	r26, 0x5B	; 91
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	eb e5       	ldi	r30, 0x5B	; 91
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	80 64       	ori	r24, 0x40	; 64
    1554:	8c 93       	st	X, r24
    1556:	87 c0       	rjmp	.+270    	; 0x1666 <interrupt_init+0x21a>

		}
		break;

		case EX_INT1:
		if (mode == LOW_MODE)
    1558:	8a 81       	ldd	r24, Y+2	; 0x02
    155a:	88 23       	and	r24, r24
    155c:	b1 f4       	brne	.+44     	; 0x158a <interrupt_init+0x13e>
		{
			CLR_BIT(MCUCR,2);
    155e:	a5 e5       	ldi	r26, 0x55	; 85
    1560:	b0 e0       	ldi	r27, 0x00	; 0
    1562:	e5 e5       	ldi	r30, 0x55	; 85
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	8b 7f       	andi	r24, 0xFB	; 251
    156a:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,3);
    156c:	a5 e5       	ldi	r26, 0x55	; 85
    156e:	b0 e0       	ldi	r27, 0x00	; 0
    1570:	e5 e5       	ldi	r30, 0x55	; 85
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 81       	ld	r24, Z
    1576:	87 7f       	andi	r24, 0xF7	; 247
    1578:	8c 93       	st	X, r24
			SET_BIT(GICR,7);
    157a:	ab e5       	ldi	r26, 0x5B	; 91
    157c:	b0 e0       	ldi	r27, 0x00	; 0
    157e:	eb e5       	ldi	r30, 0x5B	; 91
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	80 81       	ld	r24, Z
    1584:	80 68       	ori	r24, 0x80	; 128
    1586:	8c 93       	st	X, r24
    1588:	6e c0       	rjmp	.+220    	; 0x1666 <interrupt_init+0x21a>
		}
		else if (mode == ANY_CHANGE_MODE)
    158a:	8a 81       	ldd	r24, Y+2	; 0x02
    158c:	81 30       	cpi	r24, 0x01	; 1
    158e:	b1 f4       	brne	.+44     	; 0x15bc <interrupt_init+0x170>
		{
			SET_BIT(MCUCR,2);
    1590:	a5 e5       	ldi	r26, 0x55	; 85
    1592:	b0 e0       	ldi	r27, 0x00	; 0
    1594:	e5 e5       	ldi	r30, 0x55	; 85
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	80 81       	ld	r24, Z
    159a:	84 60       	ori	r24, 0x04	; 4
    159c:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,3);
    159e:	a5 e5       	ldi	r26, 0x55	; 85
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	e5 e5       	ldi	r30, 0x55	; 85
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	87 7f       	andi	r24, 0xF7	; 247
    15aa:	8c 93       	st	X, r24
			SET_BIT(GICR,7);
    15ac:	ab e5       	ldi	r26, 0x5B	; 91
    15ae:	b0 e0       	ldi	r27, 0x00	; 0
    15b0:	eb e5       	ldi	r30, 0x5B	; 91
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	80 68       	ori	r24, 0x80	; 128
    15b8:	8c 93       	st	X, r24
    15ba:	55 c0       	rjmp	.+170    	; 0x1666 <interrupt_init+0x21a>
		}
		else if (mode == FALLING_MODE)
    15bc:	8a 81       	ldd	r24, Y+2	; 0x02
    15be:	82 30       	cpi	r24, 0x02	; 2
    15c0:	b1 f4       	brne	.+44     	; 0x15ee <interrupt_init+0x1a2>
		{
			CLR_BIT(MCUCR,2);
    15c2:	a5 e5       	ldi	r26, 0x55	; 85
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	e5 e5       	ldi	r30, 0x55	; 85
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	8b 7f       	andi	r24, 0xFB	; 251
    15ce:	8c 93       	st	X, r24
			SET_BIT(MCUCR,3);
    15d0:	a5 e5       	ldi	r26, 0x55	; 85
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	e5 e5       	ldi	r30, 0x55	; 85
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	88 60       	ori	r24, 0x08	; 8
    15dc:	8c 93       	st	X, r24
			SET_BIT(GICR,7);
    15de:	ab e5       	ldi	r26, 0x5B	; 91
    15e0:	b0 e0       	ldi	r27, 0x00	; 0
    15e2:	eb e5       	ldi	r30, 0x5B	; 91
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	80 81       	ld	r24, Z
    15e8:	80 68       	ori	r24, 0x80	; 128
    15ea:	8c 93       	st	X, r24
    15ec:	3c c0       	rjmp	.+120    	; 0x1666 <interrupt_init+0x21a>
		}
		else if (mode == RISING_MODE)
    15ee:	8a 81       	ldd	r24, Y+2	; 0x02
    15f0:	83 30       	cpi	r24, 0x03	; 3
    15f2:	c9 f5       	brne	.+114    	; 0x1666 <interrupt_init+0x21a>
		{
			SET_BIT(MCUCR,2);
    15f4:	a5 e5       	ldi	r26, 0x55	; 85
    15f6:	b0 e0       	ldi	r27, 0x00	; 0
    15f8:	e5 e5       	ldi	r30, 0x55	; 85
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	80 81       	ld	r24, Z
    15fe:	84 60       	ori	r24, 0x04	; 4
    1600:	8c 93       	st	X, r24
			SET_BIT(MCUCR,3);
    1602:	a5 e5       	ldi	r26, 0x55	; 85
    1604:	b0 e0       	ldi	r27, 0x00	; 0
    1606:	e5 e5       	ldi	r30, 0x55	; 85
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	80 81       	ld	r24, Z
    160c:	88 60       	ori	r24, 0x08	; 8
    160e:	8c 93       	st	X, r24
			SET_BIT(GICR,7);
    1610:	ab e5       	ldi	r26, 0x5B	; 91
    1612:	b0 e0       	ldi	r27, 0x00	; 0
    1614:	eb e5       	ldi	r30, 0x5B	; 91
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	80 68       	ori	r24, 0x80	; 128
    161c:	8c 93       	st	X, r24
    161e:	23 c0       	rjmp	.+70     	; 0x1666 <interrupt_init+0x21a>

		}
		break;

		case EX_INT2:
		if (mode == FALLING_MODE)
    1620:	8a 81       	ldd	r24, Y+2	; 0x02
    1622:	82 30       	cpi	r24, 0x02	; 2
    1624:	79 f4       	brne	.+30     	; 0x1644 <interrupt_init+0x1f8>
		{
			CLR_BIT(MCUCSR,6);
    1626:	a4 e5       	ldi	r26, 0x54	; 84
    1628:	b0 e0       	ldi	r27, 0x00	; 0
    162a:	e4 e5       	ldi	r30, 0x54	; 84
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	80 81       	ld	r24, Z
    1630:	8f 7b       	andi	r24, 0xBF	; 191
    1632:	8c 93       	st	X, r24
			SET_BIT(GICR,5);
    1634:	ab e5       	ldi	r26, 0x5B	; 91
    1636:	b0 e0       	ldi	r27, 0x00	; 0
    1638:	eb e5       	ldi	r30, 0x5B	; 91
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	80 81       	ld	r24, Z
    163e:	80 62       	ori	r24, 0x20	; 32
    1640:	8c 93       	st	X, r24
    1642:	11 c0       	rjmp	.+34     	; 0x1666 <interrupt_init+0x21a>
		}
		else if (mode == RISING_MODE)
    1644:	8a 81       	ldd	r24, Y+2	; 0x02
    1646:	83 30       	cpi	r24, 0x03	; 3
    1648:	71 f4       	brne	.+28     	; 0x1666 <interrupt_init+0x21a>
		{
			SET_BIT(MCUCSR,6);
    164a:	a4 e5       	ldi	r26, 0x54	; 84
    164c:	b0 e0       	ldi	r27, 0x00	; 0
    164e:	e4 e5       	ldi	r30, 0x54	; 84
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	80 81       	ld	r24, Z
    1654:	80 64       	ori	r24, 0x40	; 64
    1656:	8c 93       	st	X, r24
			SET_BIT(GICR,5);
    1658:	ab e5       	ldi	r26, 0x5B	; 91
    165a:	b0 e0       	ldi	r27, 0x00	; 0
    165c:	eb e5       	ldi	r30, 0x5B	; 91
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	80 81       	ld	r24, Z
    1662:	80 62       	ori	r24, 0x20	; 32
    1664:	8c 93       	st	X, r24
		default:

		break;
	}

}
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	0f 90       	pop	r0
    166c:	0f 90       	pop	r0
    166e:	cf 91       	pop	r28
    1670:	df 91       	pop	r29
    1672:	08 95       	ret

00001674 <interrupt_wait_for_flag>:



void interrupt_wait_for_flag(u8 id)
{
    1674:	df 93       	push	r29
    1676:	cf 93       	push	r28
    1678:	00 d0       	rcall	.+0      	; 0x167a <interrupt_wait_for_flag+0x6>
    167a:	0f 92       	push	r0
    167c:	cd b7       	in	r28, 0x3d	; 61
    167e:	de b7       	in	r29, 0x3e	; 62
    1680:	89 83       	std	Y+1, r24	; 0x01
	switch(id)
    1682:	89 81       	ldd	r24, Y+1	; 0x01
    1684:	28 2f       	mov	r18, r24
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	3b 83       	std	Y+3, r19	; 0x03
    168a:	2a 83       	std	Y+2, r18	; 0x02
    168c:	8a 81       	ldd	r24, Y+2	; 0x02
    168e:	9b 81       	ldd	r25, Y+3	; 0x03
    1690:	81 30       	cpi	r24, 0x01	; 1
    1692:	91 05       	cpc	r25, r1
    1694:	f1 f0       	breq	.+60     	; 0x16d2 <interrupt_wait_for_flag+0x5e>
    1696:	2a 81       	ldd	r18, Y+2	; 0x02
    1698:	3b 81       	ldd	r19, Y+3	; 0x03
    169a:	22 30       	cpi	r18, 0x02	; 2
    169c:	31 05       	cpc	r19, r1
    169e:	31 f1       	breq	.+76     	; 0x16ec <interrupt_wait_for_flag+0x78>
    16a0:	8a 81       	ldd	r24, Y+2	; 0x02
    16a2:	9b 81       	ldd	r25, Y+3	; 0x03
    16a4:	00 97       	sbiw	r24, 0x00	; 0
    16a6:	a9 f5       	brne	.+106    	; 0x1712 <interrupt_wait_for_flag+0x9e>
	{

		case EX_INT0:
		while(!GET_BIT(GIFR,6));
    16a8:	ea e5       	ldi	r30, 0x5A	; 90
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	82 95       	swap	r24
    16b0:	86 95       	lsr	r24
    16b2:	86 95       	lsr	r24
    16b4:	83 70       	andi	r24, 0x03	; 3
    16b6:	88 2f       	mov	r24, r24
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	81 70       	andi	r24, 0x01	; 1
    16bc:	90 70       	andi	r25, 0x00	; 0
    16be:	00 97       	sbiw	r24, 0x00	; 0
    16c0:	99 f3       	breq	.-26     	; 0x16a8 <interrupt_wait_for_flag+0x34>
		SET_BIT(GIFR,6);
    16c2:	aa e5       	ldi	r26, 0x5A	; 90
    16c4:	b0 e0       	ldi	r27, 0x00	; 0
    16c6:	ea e5       	ldi	r30, 0x5A	; 90
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	80 81       	ld	r24, Z
    16cc:	80 64       	ori	r24, 0x40	; 64
    16ce:	8c 93       	st	X, r24
    16d0:	20 c0       	rjmp	.+64     	; 0x1712 <interrupt_wait_for_flag+0x9e>
		break;

		case EX_INT1:
		while(!GET_BIT(GIFR,7));
    16d2:	ea e5       	ldi	r30, 0x5A	; 90
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	80 81       	ld	r24, Z
    16d8:	88 23       	and	r24, r24
    16da:	dc f7       	brge	.-10     	; 0x16d2 <interrupt_wait_for_flag+0x5e>
		SET_BIT(GIFR,7);
    16dc:	aa e5       	ldi	r26, 0x5A	; 90
    16de:	b0 e0       	ldi	r27, 0x00	; 0
    16e0:	ea e5       	ldi	r30, 0x5A	; 90
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	80 81       	ld	r24, Z
    16e6:	80 68       	ori	r24, 0x80	; 128
    16e8:	8c 93       	st	X, r24
    16ea:	13 c0       	rjmp	.+38     	; 0x1712 <interrupt_wait_for_flag+0x9e>
		break;

		case EX_INT2:
		while(!GET_BIT(GIFR,5));
    16ec:	ea e5       	ldi	r30, 0x5A	; 90
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	80 81       	ld	r24, Z
    16f2:	82 95       	swap	r24
    16f4:	86 95       	lsr	r24
    16f6:	87 70       	andi	r24, 0x07	; 7
    16f8:	88 2f       	mov	r24, r24
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	81 70       	andi	r24, 0x01	; 1
    16fe:	90 70       	andi	r25, 0x00	; 0
    1700:	00 97       	sbiw	r24, 0x00	; 0
    1702:	a1 f3       	breq	.-24     	; 0x16ec <interrupt_wait_for_flag+0x78>
		SET_BIT(GIFR,5);
    1704:	aa e5       	ldi	r26, 0x5A	; 90
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	ea e5       	ldi	r30, 0x5A	; 90
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	80 62       	ori	r24, 0x20	; 32
    1710:	8c 93       	st	X, r24

		default:
		break;
	}

}
    1712:	0f 90       	pop	r0
    1714:	0f 90       	pop	r0
    1716:	0f 90       	pop	r0
    1718:	cf 91       	pop	r28
    171a:	df 91       	pop	r29
    171c:	08 95       	ret

0000171e <interrupt_enable>:



void interrupt_enable(u8 id)
{
    171e:	df 93       	push	r29
    1720:	cf 93       	push	r28
    1722:	00 d0       	rcall	.+0      	; 0x1724 <interrupt_enable+0x6>
    1724:	0f 92       	push	r0
    1726:	cd b7       	in	r28, 0x3d	; 61
    1728:	de b7       	in	r29, 0x3e	; 62
    172a:	89 83       	std	Y+1, r24	; 0x01

	switch(id)
    172c:	89 81       	ldd	r24, Y+1	; 0x01
    172e:	28 2f       	mov	r18, r24
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	3b 83       	std	Y+3, r19	; 0x03
    1734:	2a 83       	std	Y+2, r18	; 0x02
    1736:	8a 81       	ldd	r24, Y+2	; 0x02
    1738:	9b 81       	ldd	r25, Y+3	; 0x03
    173a:	81 30       	cpi	r24, 0x01	; 1
    173c:	91 05       	cpc	r25, r1
    173e:	89 f0       	breq	.+34     	; 0x1762 <interrupt_enable+0x44>
    1740:	2a 81       	ldd	r18, Y+2	; 0x02
    1742:	3b 81       	ldd	r19, Y+3	; 0x03
    1744:	22 30       	cpi	r18, 0x02	; 2
    1746:	31 05       	cpc	r19, r1
    1748:	a1 f0       	breq	.+40     	; 0x1772 <interrupt_enable+0x54>
    174a:	8a 81       	ldd	r24, Y+2	; 0x02
    174c:	9b 81       	ldd	r25, Y+3	; 0x03
    174e:	00 97       	sbiw	r24, 0x00	; 0
    1750:	b9 f4       	brne	.+46     	; 0x1780 <interrupt_enable+0x62>
	{
		case EX_INT0:
		SET_BIT(GICR,6);
    1752:	ab e5       	ldi	r26, 0x5B	; 91
    1754:	b0 e0       	ldi	r27, 0x00	; 0
    1756:	eb e5       	ldi	r30, 0x5B	; 91
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	80 64       	ori	r24, 0x40	; 64
    175e:	8c 93       	st	X, r24
    1760:	0f c0       	rjmp	.+30     	; 0x1780 <interrupt_enable+0x62>
		break;

		case EX_INT1:
		SET_BIT(GICR,7);
    1762:	ab e5       	ldi	r26, 0x5B	; 91
    1764:	b0 e0       	ldi	r27, 0x00	; 0
    1766:	eb e5       	ldi	r30, 0x5B	; 91
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	80 68       	ori	r24, 0x80	; 128
    176e:	8c 93       	st	X, r24
    1770:	07 c0       	rjmp	.+14     	; 0x1780 <interrupt_enable+0x62>
		break;

		case EX_INT2:
		SET_BIT(GICR,5);
    1772:	ab e5       	ldi	r26, 0x5B	; 91
    1774:	b0 e0       	ldi	r27, 0x00	; 0
    1776:	eb e5       	ldi	r30, 0x5B	; 91
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	80 81       	ld	r24, Z
    177c:	80 62       	ori	r24, 0x20	; 32
    177e:	8c 93       	st	X, r24
		default:

		break;
	}

}
    1780:	0f 90       	pop	r0
    1782:	0f 90       	pop	r0
    1784:	0f 90       	pop	r0
    1786:	cf 91       	pop	r28
    1788:	df 91       	pop	r29
    178a:	08 95       	ret

0000178c <interrupt_disable>:


void interrupt_disable(u8 id)
{
    178c:	df 93       	push	r29
    178e:	cf 93       	push	r28
    1790:	00 d0       	rcall	.+0      	; 0x1792 <interrupt_disable+0x6>
    1792:	0f 92       	push	r0
    1794:	cd b7       	in	r28, 0x3d	; 61
    1796:	de b7       	in	r29, 0x3e	; 62
    1798:	89 83       	std	Y+1, r24	; 0x01

	switch(id)
    179a:	89 81       	ldd	r24, Y+1	; 0x01
    179c:	28 2f       	mov	r18, r24
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	3b 83       	std	Y+3, r19	; 0x03
    17a2:	2a 83       	std	Y+2, r18	; 0x02
    17a4:	8a 81       	ldd	r24, Y+2	; 0x02
    17a6:	9b 81       	ldd	r25, Y+3	; 0x03
    17a8:	81 30       	cpi	r24, 0x01	; 1
    17aa:	91 05       	cpc	r25, r1
    17ac:	89 f0       	breq	.+34     	; 0x17d0 <interrupt_disable+0x44>
    17ae:	2a 81       	ldd	r18, Y+2	; 0x02
    17b0:	3b 81       	ldd	r19, Y+3	; 0x03
    17b2:	22 30       	cpi	r18, 0x02	; 2
    17b4:	31 05       	cpc	r19, r1
    17b6:	a1 f0       	breq	.+40     	; 0x17e0 <interrupt_disable+0x54>
    17b8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ba:	9b 81       	ldd	r25, Y+3	; 0x03
    17bc:	00 97       	sbiw	r24, 0x00	; 0
    17be:	b9 f4       	brne	.+46     	; 0x17ee <interrupt_disable+0x62>
	{

		case EX_INT0:
		CLR_BIT(GICR,6);
    17c0:	ab e5       	ldi	r26, 0x5B	; 91
    17c2:	b0 e0       	ldi	r27, 0x00	; 0
    17c4:	eb e5       	ldi	r30, 0x5B	; 91
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	80 81       	ld	r24, Z
    17ca:	8f 7b       	andi	r24, 0xBF	; 191
    17cc:	8c 93       	st	X, r24
    17ce:	0f c0       	rjmp	.+30     	; 0x17ee <interrupt_disable+0x62>
		break;

		case EX_INT1:
		CLR_BIT(GICR,7);
    17d0:	ab e5       	ldi	r26, 0x5B	; 91
    17d2:	b0 e0       	ldi	r27, 0x00	; 0
    17d4:	eb e5       	ldi	r30, 0x5B	; 91
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	80 81       	ld	r24, Z
    17da:	8f 77       	andi	r24, 0x7F	; 127
    17dc:	8c 93       	st	X, r24
    17de:	07 c0       	rjmp	.+14     	; 0x17ee <interrupt_disable+0x62>
		break;

		case EX_INT2:
		CLR_BIT(GICR,5);
    17e0:	ab e5       	ldi	r26, 0x5B	; 91
    17e2:	b0 e0       	ldi	r27, 0x00	; 0
    17e4:	eb e5       	ldi	r30, 0x5B	; 91
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	80 81       	ld	r24, Z
    17ea:	8f 7d       	andi	r24, 0xDF	; 223
    17ec:	8c 93       	st	X, r24
		break;

		default:
		break;
	}
}
    17ee:	0f 90       	pop	r0
    17f0:	0f 90       	pop	r0
    17f2:	0f 90       	pop	r0
    17f4:	cf 91       	pop	r28
    17f6:	df 91       	pop	r29
    17f8:	08 95       	ret

000017fa <DIO_vidSetPinDirection>:
#include "../../Lib/STD_TYPES.h"
#include "../DIO0/DIO_config.h"
#include "../DIO0/DIO_priv.h"

void DIO_vidSetPinDirection(u8 Copy_u8GroupID, u8 Copy_u8PinID, u8 Copy_u8Direction)
{
    17fa:	df 93       	push	r29
    17fc:	cf 93       	push	r28
    17fe:	00 d0       	rcall	.+0      	; 0x1800 <DIO_vidSetPinDirection+0x6>
    1800:	00 d0       	rcall	.+0      	; 0x1802 <DIO_vidSetPinDirection+0x8>
    1802:	0f 92       	push	r0
    1804:	cd b7       	in	r28, 0x3d	; 61
    1806:	de b7       	in	r29, 0x3e	; 62
    1808:	89 83       	std	Y+1, r24	; 0x01
    180a:	6a 83       	std	Y+2, r22	; 0x02
    180c:	4b 83       	std	Y+3, r20	; 0x03
	if (Copy_u8GroupID <= DIO_GROUP_D && Copy_u8PinID <= DIO_PIN_7
    180e:	89 81       	ldd	r24, Y+1	; 0x01
    1810:	84 30       	cpi	r24, 0x04	; 4
    1812:	08 f0       	brcs	.+2      	; 0x1816 <DIO_vidSetPinDirection+0x1c>
    1814:	d9 c0       	rjmp	.+434    	; 0x19c8 <DIO_vidSetPinDirection+0x1ce>
    1816:	8a 81       	ldd	r24, Y+2	; 0x02
    1818:	88 30       	cpi	r24, 0x08	; 8
    181a:	08 f0       	brcs	.+2      	; 0x181e <DIO_vidSetPinDirection+0x24>
    181c:	d5 c0       	rjmp	.+426    	; 0x19c8 <DIO_vidSetPinDirection+0x1ce>
    181e:	8b 81       	ldd	r24, Y+3	; 0x03
    1820:	82 30       	cpi	r24, 0x02	; 2
    1822:	08 f0       	brcs	.+2      	; 0x1826 <DIO_vidSetPinDirection+0x2c>
    1824:	d1 c0       	rjmp	.+418    	; 0x19c8 <DIO_vidSetPinDirection+0x1ce>
			&& Copy_u8Direction <= DIO_OUTPUT)
	{
        switch(Copy_u8GroupID)
    1826:	89 81       	ldd	r24, Y+1	; 0x01
    1828:	28 2f       	mov	r18, r24
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	3d 83       	std	Y+5, r19	; 0x05
    182e:	2c 83       	std	Y+4, r18	; 0x04
    1830:	8c 81       	ldd	r24, Y+4	; 0x04
    1832:	9d 81       	ldd	r25, Y+5	; 0x05
    1834:	81 30       	cpi	r24, 0x01	; 1
    1836:	91 05       	cpc	r25, r1
    1838:	09 f4       	brne	.+2      	; 0x183c <DIO_vidSetPinDirection+0x42>
    183a:	43 c0       	rjmp	.+134    	; 0x18c2 <DIO_vidSetPinDirection+0xc8>
    183c:	2c 81       	ldd	r18, Y+4	; 0x04
    183e:	3d 81       	ldd	r19, Y+5	; 0x05
    1840:	22 30       	cpi	r18, 0x02	; 2
    1842:	31 05       	cpc	r19, r1
    1844:	2c f4       	brge	.+10     	; 0x1850 <DIO_vidSetPinDirection+0x56>
    1846:	8c 81       	ldd	r24, Y+4	; 0x04
    1848:	9d 81       	ldd	r25, Y+5	; 0x05
    184a:	00 97       	sbiw	r24, 0x00	; 0
    184c:	71 f0       	breq	.+28     	; 0x186a <DIO_vidSetPinDirection+0x70>
    184e:	bc c0       	rjmp	.+376    	; 0x19c8 <DIO_vidSetPinDirection+0x1ce>
    1850:	2c 81       	ldd	r18, Y+4	; 0x04
    1852:	3d 81       	ldd	r19, Y+5	; 0x05
    1854:	22 30       	cpi	r18, 0x02	; 2
    1856:	31 05       	cpc	r19, r1
    1858:	09 f4       	brne	.+2      	; 0x185c <DIO_vidSetPinDirection+0x62>
    185a:	5f c0       	rjmp	.+190    	; 0x191a <DIO_vidSetPinDirection+0x120>
    185c:	8c 81       	ldd	r24, Y+4	; 0x04
    185e:	9d 81       	ldd	r25, Y+5	; 0x05
    1860:	83 30       	cpi	r24, 0x03	; 3
    1862:	91 05       	cpc	r25, r1
    1864:	09 f4       	brne	.+2      	; 0x1868 <DIO_vidSetPinDirection+0x6e>
    1866:	85 c0       	rjmp	.+266    	; 0x1972 <DIO_vidSetPinDirection+0x178>
    1868:	af c0       	rjmp	.+350    	; 0x19c8 <DIO_vidSetPinDirection+0x1ce>
        {
            case DIO_GROUP_A:
                if (Copy_u8Direction == DIO_INPUT)
    186a:	8b 81       	ldd	r24, Y+3	; 0x03
    186c:	88 23       	and	r24, r24
    186e:	a9 f4       	brne	.+42     	; 0x189a <DIO_vidSetPinDirection+0xa0>
                    DDRA &=~ (DIO_BIT_MASK<<Copy_u8PinID);
    1870:	aa e3       	ldi	r26, 0x3A	; 58
    1872:	b0 e0       	ldi	r27, 0x00	; 0
    1874:	ea e3       	ldi	r30, 0x3A	; 58
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	80 81       	ld	r24, Z
    187a:	48 2f       	mov	r20, r24
    187c:	8a 81       	ldd	r24, Y+2	; 0x02
    187e:	28 2f       	mov	r18, r24
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	81 e0       	ldi	r24, 0x01	; 1
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	02 2e       	mov	r0, r18
    1888:	02 c0       	rjmp	.+4      	; 0x188e <DIO_vidSetPinDirection+0x94>
    188a:	88 0f       	add	r24, r24
    188c:	99 1f       	adc	r25, r25
    188e:	0a 94       	dec	r0
    1890:	e2 f7       	brpl	.-8      	; 0x188a <DIO_vidSetPinDirection+0x90>
    1892:	80 95       	com	r24
    1894:	84 23       	and	r24, r20
    1896:	8c 93       	st	X, r24
    1898:	97 c0       	rjmp	.+302    	; 0x19c8 <DIO_vidSetPinDirection+0x1ce>
                else
                    DDRA |= (DIO_BIT_MASK<<Copy_u8PinID);
    189a:	aa e3       	ldi	r26, 0x3A	; 58
    189c:	b0 e0       	ldi	r27, 0x00	; 0
    189e:	ea e3       	ldi	r30, 0x3A	; 58
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	80 81       	ld	r24, Z
    18a4:	48 2f       	mov	r20, r24
    18a6:	8a 81       	ldd	r24, Y+2	; 0x02
    18a8:	28 2f       	mov	r18, r24
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	81 e0       	ldi	r24, 0x01	; 1
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	02 2e       	mov	r0, r18
    18b2:	02 c0       	rjmp	.+4      	; 0x18b8 <DIO_vidSetPinDirection+0xbe>
    18b4:	88 0f       	add	r24, r24
    18b6:	99 1f       	adc	r25, r25
    18b8:	0a 94       	dec	r0
    18ba:	e2 f7       	brpl	.-8      	; 0x18b4 <DIO_vidSetPinDirection+0xba>
    18bc:	84 2b       	or	r24, r20
    18be:	8c 93       	st	X, r24
    18c0:	83 c0       	rjmp	.+262    	; 0x19c8 <DIO_vidSetPinDirection+0x1ce>
            break;

            case DIO_GROUP_B:
                if (Copy_u8Direction == DIO_INPUT)
    18c2:	8b 81       	ldd	r24, Y+3	; 0x03
    18c4:	88 23       	and	r24, r24
    18c6:	a9 f4       	brne	.+42     	; 0x18f2 <DIO_vidSetPinDirection+0xf8>
                    DDRB &=~ (DIO_BIT_MASK<<Copy_u8PinID);
    18c8:	a7 e3       	ldi	r26, 0x37	; 55
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	e7 e3       	ldi	r30, 0x37	; 55
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	48 2f       	mov	r20, r24
    18d4:	8a 81       	ldd	r24, Y+2	; 0x02
    18d6:	28 2f       	mov	r18, r24
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	02 2e       	mov	r0, r18
    18e0:	02 c0       	rjmp	.+4      	; 0x18e6 <DIO_vidSetPinDirection+0xec>
    18e2:	88 0f       	add	r24, r24
    18e4:	99 1f       	adc	r25, r25
    18e6:	0a 94       	dec	r0
    18e8:	e2 f7       	brpl	.-8      	; 0x18e2 <DIO_vidSetPinDirection+0xe8>
    18ea:	80 95       	com	r24
    18ec:	84 23       	and	r24, r20
    18ee:	8c 93       	st	X, r24
    18f0:	6b c0       	rjmp	.+214    	; 0x19c8 <DIO_vidSetPinDirection+0x1ce>
                else
                    DDRB |= (DIO_BIT_MASK<<Copy_u8PinID);
    18f2:	a7 e3       	ldi	r26, 0x37	; 55
    18f4:	b0 e0       	ldi	r27, 0x00	; 0
    18f6:	e7 e3       	ldi	r30, 0x37	; 55
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	80 81       	ld	r24, Z
    18fc:	48 2f       	mov	r20, r24
    18fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1900:	28 2f       	mov	r18, r24
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	02 2e       	mov	r0, r18
    190a:	02 c0       	rjmp	.+4      	; 0x1910 <DIO_vidSetPinDirection+0x116>
    190c:	88 0f       	add	r24, r24
    190e:	99 1f       	adc	r25, r25
    1910:	0a 94       	dec	r0
    1912:	e2 f7       	brpl	.-8      	; 0x190c <DIO_vidSetPinDirection+0x112>
    1914:	84 2b       	or	r24, r20
    1916:	8c 93       	st	X, r24
    1918:	57 c0       	rjmp	.+174    	; 0x19c8 <DIO_vidSetPinDirection+0x1ce>
            break;

            case DIO_GROUP_C:
                if (Copy_u8Direction == DIO_INPUT)
    191a:	8b 81       	ldd	r24, Y+3	; 0x03
    191c:	88 23       	and	r24, r24
    191e:	a9 f4       	brne	.+42     	; 0x194a <DIO_vidSetPinDirection+0x150>
                    DDRC &=~ (DIO_BIT_MASK<<Copy_u8PinID);
    1920:	a4 e3       	ldi	r26, 0x34	; 52
    1922:	b0 e0       	ldi	r27, 0x00	; 0
    1924:	e4 e3       	ldi	r30, 0x34	; 52
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	80 81       	ld	r24, Z
    192a:	48 2f       	mov	r20, r24
    192c:	8a 81       	ldd	r24, Y+2	; 0x02
    192e:	28 2f       	mov	r18, r24
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	02 2e       	mov	r0, r18
    1938:	02 c0       	rjmp	.+4      	; 0x193e <DIO_vidSetPinDirection+0x144>
    193a:	88 0f       	add	r24, r24
    193c:	99 1f       	adc	r25, r25
    193e:	0a 94       	dec	r0
    1940:	e2 f7       	brpl	.-8      	; 0x193a <DIO_vidSetPinDirection+0x140>
    1942:	80 95       	com	r24
    1944:	84 23       	and	r24, r20
    1946:	8c 93       	st	X, r24
    1948:	3f c0       	rjmp	.+126    	; 0x19c8 <DIO_vidSetPinDirection+0x1ce>
                else
                    DDRC |= (DIO_BIT_MASK<<Copy_u8PinID);
    194a:	a4 e3       	ldi	r26, 0x34	; 52
    194c:	b0 e0       	ldi	r27, 0x00	; 0
    194e:	e4 e3       	ldi	r30, 0x34	; 52
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	80 81       	ld	r24, Z
    1954:	48 2f       	mov	r20, r24
    1956:	8a 81       	ldd	r24, Y+2	; 0x02
    1958:	28 2f       	mov	r18, r24
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	02 2e       	mov	r0, r18
    1962:	02 c0       	rjmp	.+4      	; 0x1968 <DIO_vidSetPinDirection+0x16e>
    1964:	88 0f       	add	r24, r24
    1966:	99 1f       	adc	r25, r25
    1968:	0a 94       	dec	r0
    196a:	e2 f7       	brpl	.-8      	; 0x1964 <DIO_vidSetPinDirection+0x16a>
    196c:	84 2b       	or	r24, r20
    196e:	8c 93       	st	X, r24
    1970:	2b c0       	rjmp	.+86     	; 0x19c8 <DIO_vidSetPinDirection+0x1ce>
            break;

            case DIO_GROUP_D:
                if (Copy_u8Direction == DIO_INPUT)
    1972:	8b 81       	ldd	r24, Y+3	; 0x03
    1974:	88 23       	and	r24, r24
    1976:	a9 f4       	brne	.+42     	; 0x19a2 <DIO_vidSetPinDirection+0x1a8>
                    DDRD &=~ (DIO_BIT_MASK<<Copy_u8PinID);
    1978:	a1 e3       	ldi	r26, 0x31	; 49
    197a:	b0 e0       	ldi	r27, 0x00	; 0
    197c:	e1 e3       	ldi	r30, 0x31	; 49
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	80 81       	ld	r24, Z
    1982:	48 2f       	mov	r20, r24
    1984:	8a 81       	ldd	r24, Y+2	; 0x02
    1986:	28 2f       	mov	r18, r24
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	02 2e       	mov	r0, r18
    1990:	02 c0       	rjmp	.+4      	; 0x1996 <DIO_vidSetPinDirection+0x19c>
    1992:	88 0f       	add	r24, r24
    1994:	99 1f       	adc	r25, r25
    1996:	0a 94       	dec	r0
    1998:	e2 f7       	brpl	.-8      	; 0x1992 <DIO_vidSetPinDirection+0x198>
    199a:	80 95       	com	r24
    199c:	84 23       	and	r24, r20
    199e:	8c 93       	st	X, r24
    19a0:	13 c0       	rjmp	.+38     	; 0x19c8 <DIO_vidSetPinDirection+0x1ce>
                else
                    DDRD |= (DIO_BIT_MASK<<Copy_u8PinID);
    19a2:	a1 e3       	ldi	r26, 0x31	; 49
    19a4:	b0 e0       	ldi	r27, 0x00	; 0
    19a6:	e1 e3       	ldi	r30, 0x31	; 49
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	48 2f       	mov	r20, r24
    19ae:	8a 81       	ldd	r24, Y+2	; 0x02
    19b0:	28 2f       	mov	r18, r24
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	02 2e       	mov	r0, r18
    19ba:	02 c0       	rjmp	.+4      	; 0x19c0 <DIO_vidSetPinDirection+0x1c6>
    19bc:	88 0f       	add	r24, r24
    19be:	99 1f       	adc	r25, r25
    19c0:	0a 94       	dec	r0
    19c2:	e2 f7       	brpl	.-8      	; 0x19bc <DIO_vidSetPinDirection+0x1c2>
    19c4:	84 2b       	or	r24, r20
    19c6:	8c 93       	st	X, r24
            break;

        }
	}

}
    19c8:	0f 90       	pop	r0
    19ca:	0f 90       	pop	r0
    19cc:	0f 90       	pop	r0
    19ce:	0f 90       	pop	r0
    19d0:	0f 90       	pop	r0
    19d2:	cf 91       	pop	r28
    19d4:	df 91       	pop	r29
    19d6:	08 95       	ret

000019d8 <DIO_vidSetPinValue>:

void DIO_vidSetPinValue(u8 Copy_u8GroupID, u8 Copy_u8PinID, u8 Copy_u8Value)
{
    19d8:	df 93       	push	r29
    19da:	cf 93       	push	r28
    19dc:	00 d0       	rcall	.+0      	; 0x19de <DIO_vidSetPinValue+0x6>
    19de:	00 d0       	rcall	.+0      	; 0x19e0 <DIO_vidSetPinValue+0x8>
    19e0:	0f 92       	push	r0
    19e2:	cd b7       	in	r28, 0x3d	; 61
    19e4:	de b7       	in	r29, 0x3e	; 62
    19e6:	89 83       	std	Y+1, r24	; 0x01
    19e8:	6a 83       	std	Y+2, r22	; 0x02
    19ea:	4b 83       	std	Y+3, r20	; 0x03
    if (Copy_u8GroupID <= DIO_GROUP_D && Copy_u8PinID <= DIO_PIN_7
    19ec:	89 81       	ldd	r24, Y+1	; 0x01
    19ee:	84 30       	cpi	r24, 0x04	; 4
    19f0:	08 f0       	brcs	.+2      	; 0x19f4 <DIO_vidSetPinValue+0x1c>
    19f2:	d9 c0       	rjmp	.+434    	; 0x1ba6 <DIO_vidSetPinValue+0x1ce>
    19f4:	8a 81       	ldd	r24, Y+2	; 0x02
    19f6:	88 30       	cpi	r24, 0x08	; 8
    19f8:	08 f0       	brcs	.+2      	; 0x19fc <DIO_vidSetPinValue+0x24>
    19fa:	d5 c0       	rjmp	.+426    	; 0x1ba6 <DIO_vidSetPinValue+0x1ce>
    19fc:	8b 81       	ldd	r24, Y+3	; 0x03
    19fe:	82 30       	cpi	r24, 0x02	; 2
    1a00:	08 f0       	brcs	.+2      	; 0x1a04 <DIO_vidSetPinValue+0x2c>
    1a02:	d1 c0       	rjmp	.+418    	; 0x1ba6 <DIO_vidSetPinValue+0x1ce>
			&& Copy_u8Value <= DIO_HIGH)
	{
        switch(Copy_u8GroupID)
    1a04:	89 81       	ldd	r24, Y+1	; 0x01
    1a06:	28 2f       	mov	r18, r24
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	3d 83       	std	Y+5, r19	; 0x05
    1a0c:	2c 83       	std	Y+4, r18	; 0x04
    1a0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a10:	9d 81       	ldd	r25, Y+5	; 0x05
    1a12:	81 30       	cpi	r24, 0x01	; 1
    1a14:	91 05       	cpc	r25, r1
    1a16:	09 f4       	brne	.+2      	; 0x1a1a <DIO_vidSetPinValue+0x42>
    1a18:	43 c0       	rjmp	.+134    	; 0x1aa0 <DIO_vidSetPinValue+0xc8>
    1a1a:	2c 81       	ldd	r18, Y+4	; 0x04
    1a1c:	3d 81       	ldd	r19, Y+5	; 0x05
    1a1e:	22 30       	cpi	r18, 0x02	; 2
    1a20:	31 05       	cpc	r19, r1
    1a22:	2c f4       	brge	.+10     	; 0x1a2e <DIO_vidSetPinValue+0x56>
    1a24:	8c 81       	ldd	r24, Y+4	; 0x04
    1a26:	9d 81       	ldd	r25, Y+5	; 0x05
    1a28:	00 97       	sbiw	r24, 0x00	; 0
    1a2a:	71 f0       	breq	.+28     	; 0x1a48 <DIO_vidSetPinValue+0x70>
    1a2c:	bc c0       	rjmp	.+376    	; 0x1ba6 <DIO_vidSetPinValue+0x1ce>
    1a2e:	2c 81       	ldd	r18, Y+4	; 0x04
    1a30:	3d 81       	ldd	r19, Y+5	; 0x05
    1a32:	22 30       	cpi	r18, 0x02	; 2
    1a34:	31 05       	cpc	r19, r1
    1a36:	09 f4       	brne	.+2      	; 0x1a3a <DIO_vidSetPinValue+0x62>
    1a38:	5f c0       	rjmp	.+190    	; 0x1af8 <DIO_vidSetPinValue+0x120>
    1a3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a3c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a3e:	83 30       	cpi	r24, 0x03	; 3
    1a40:	91 05       	cpc	r25, r1
    1a42:	09 f4       	brne	.+2      	; 0x1a46 <DIO_vidSetPinValue+0x6e>
    1a44:	85 c0       	rjmp	.+266    	; 0x1b50 <DIO_vidSetPinValue+0x178>
    1a46:	af c0       	rjmp	.+350    	; 0x1ba6 <DIO_vidSetPinValue+0x1ce>
        {
            case DIO_GROUP_A:
                if (Copy_u8Value == DIO_LOW)
    1a48:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4a:	88 23       	and	r24, r24
    1a4c:	a9 f4       	brne	.+42     	; 0x1a78 <DIO_vidSetPinValue+0xa0>
                    PORTA &=~ (DIO_BIT_MASK<<Copy_u8PinID);
    1a4e:	ab e3       	ldi	r26, 0x3B	; 59
    1a50:	b0 e0       	ldi	r27, 0x00	; 0
    1a52:	eb e3       	ldi	r30, 0x3B	; 59
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	80 81       	ld	r24, Z
    1a58:	48 2f       	mov	r20, r24
    1a5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5c:	28 2f       	mov	r18, r24
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	81 e0       	ldi	r24, 0x01	; 1
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	02 2e       	mov	r0, r18
    1a66:	02 c0       	rjmp	.+4      	; 0x1a6c <DIO_vidSetPinValue+0x94>
    1a68:	88 0f       	add	r24, r24
    1a6a:	99 1f       	adc	r25, r25
    1a6c:	0a 94       	dec	r0
    1a6e:	e2 f7       	brpl	.-8      	; 0x1a68 <DIO_vidSetPinValue+0x90>
    1a70:	80 95       	com	r24
    1a72:	84 23       	and	r24, r20
    1a74:	8c 93       	st	X, r24
    1a76:	97 c0       	rjmp	.+302    	; 0x1ba6 <DIO_vidSetPinValue+0x1ce>
                else
                    PORTA |= (DIO_BIT_MASK<<Copy_u8PinID);
    1a78:	ab e3       	ldi	r26, 0x3B	; 59
    1a7a:	b0 e0       	ldi	r27, 0x00	; 0
    1a7c:	eb e3       	ldi	r30, 0x3B	; 59
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	80 81       	ld	r24, Z
    1a82:	48 2f       	mov	r20, r24
    1a84:	8a 81       	ldd	r24, Y+2	; 0x02
    1a86:	28 2f       	mov	r18, r24
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	02 2e       	mov	r0, r18
    1a90:	02 c0       	rjmp	.+4      	; 0x1a96 <DIO_vidSetPinValue+0xbe>
    1a92:	88 0f       	add	r24, r24
    1a94:	99 1f       	adc	r25, r25
    1a96:	0a 94       	dec	r0
    1a98:	e2 f7       	brpl	.-8      	; 0x1a92 <DIO_vidSetPinValue+0xba>
    1a9a:	84 2b       	or	r24, r20
    1a9c:	8c 93       	st	X, r24
    1a9e:	83 c0       	rjmp	.+262    	; 0x1ba6 <DIO_vidSetPinValue+0x1ce>
            break;

            case DIO_GROUP_B:
                if (Copy_u8Value == DIO_LOW)
    1aa0:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa2:	88 23       	and	r24, r24
    1aa4:	a9 f4       	brne	.+42     	; 0x1ad0 <DIO_vidSetPinValue+0xf8>
                    PORTB &=~ (DIO_BIT_MASK<<Copy_u8PinID);
    1aa6:	a8 e3       	ldi	r26, 0x38	; 56
    1aa8:	b0 e0       	ldi	r27, 0x00	; 0
    1aaa:	e8 e3       	ldi	r30, 0x38	; 56
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	80 81       	ld	r24, Z
    1ab0:	48 2f       	mov	r20, r24
    1ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab4:	28 2f       	mov	r18, r24
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	81 e0       	ldi	r24, 0x01	; 1
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	02 2e       	mov	r0, r18
    1abe:	02 c0       	rjmp	.+4      	; 0x1ac4 <DIO_vidSetPinValue+0xec>
    1ac0:	88 0f       	add	r24, r24
    1ac2:	99 1f       	adc	r25, r25
    1ac4:	0a 94       	dec	r0
    1ac6:	e2 f7       	brpl	.-8      	; 0x1ac0 <DIO_vidSetPinValue+0xe8>
    1ac8:	80 95       	com	r24
    1aca:	84 23       	and	r24, r20
    1acc:	8c 93       	st	X, r24
    1ace:	6b c0       	rjmp	.+214    	; 0x1ba6 <DIO_vidSetPinValue+0x1ce>
                else
                    PORTB |= (DIO_BIT_MASK<<Copy_u8PinID);
    1ad0:	a8 e3       	ldi	r26, 0x38	; 56
    1ad2:	b0 e0       	ldi	r27, 0x00	; 0
    1ad4:	e8 e3       	ldi	r30, 0x38	; 56
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	80 81       	ld	r24, Z
    1ada:	48 2f       	mov	r20, r24
    1adc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ade:	28 2f       	mov	r18, r24
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	81 e0       	ldi	r24, 0x01	; 1
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	02 2e       	mov	r0, r18
    1ae8:	02 c0       	rjmp	.+4      	; 0x1aee <DIO_vidSetPinValue+0x116>
    1aea:	88 0f       	add	r24, r24
    1aec:	99 1f       	adc	r25, r25
    1aee:	0a 94       	dec	r0
    1af0:	e2 f7       	brpl	.-8      	; 0x1aea <DIO_vidSetPinValue+0x112>
    1af2:	84 2b       	or	r24, r20
    1af4:	8c 93       	st	X, r24
    1af6:	57 c0       	rjmp	.+174    	; 0x1ba6 <DIO_vidSetPinValue+0x1ce>
            break;

            case DIO_GROUP_C:
                if (Copy_u8Value == DIO_LOW)
    1af8:	8b 81       	ldd	r24, Y+3	; 0x03
    1afa:	88 23       	and	r24, r24
    1afc:	a9 f4       	brne	.+42     	; 0x1b28 <DIO_vidSetPinValue+0x150>
                    PORTC &=~ (DIO_BIT_MASK<<Copy_u8PinID);
    1afe:	a5 e3       	ldi	r26, 0x35	; 53
    1b00:	b0 e0       	ldi	r27, 0x00	; 0
    1b02:	e5 e3       	ldi	r30, 0x35	; 53
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	80 81       	ld	r24, Z
    1b08:	48 2f       	mov	r20, r24
    1b0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0c:	28 2f       	mov	r18, r24
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	02 2e       	mov	r0, r18
    1b16:	02 c0       	rjmp	.+4      	; 0x1b1c <DIO_vidSetPinValue+0x144>
    1b18:	88 0f       	add	r24, r24
    1b1a:	99 1f       	adc	r25, r25
    1b1c:	0a 94       	dec	r0
    1b1e:	e2 f7       	brpl	.-8      	; 0x1b18 <DIO_vidSetPinValue+0x140>
    1b20:	80 95       	com	r24
    1b22:	84 23       	and	r24, r20
    1b24:	8c 93       	st	X, r24
    1b26:	3f c0       	rjmp	.+126    	; 0x1ba6 <DIO_vidSetPinValue+0x1ce>
                else
                    PORTC |= (DIO_BIT_MASK<<Copy_u8PinID);
    1b28:	a5 e3       	ldi	r26, 0x35	; 53
    1b2a:	b0 e0       	ldi	r27, 0x00	; 0
    1b2c:	e5 e3       	ldi	r30, 0x35	; 53
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	80 81       	ld	r24, Z
    1b32:	48 2f       	mov	r20, r24
    1b34:	8a 81       	ldd	r24, Y+2	; 0x02
    1b36:	28 2f       	mov	r18, r24
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	02 2e       	mov	r0, r18
    1b40:	02 c0       	rjmp	.+4      	; 0x1b46 <DIO_vidSetPinValue+0x16e>
    1b42:	88 0f       	add	r24, r24
    1b44:	99 1f       	adc	r25, r25
    1b46:	0a 94       	dec	r0
    1b48:	e2 f7       	brpl	.-8      	; 0x1b42 <DIO_vidSetPinValue+0x16a>
    1b4a:	84 2b       	or	r24, r20
    1b4c:	8c 93       	st	X, r24
    1b4e:	2b c0       	rjmp	.+86     	; 0x1ba6 <DIO_vidSetPinValue+0x1ce>
            break;

            case DIO_GROUP_D:
                if (Copy_u8Value == DIO_LOW)
    1b50:	8b 81       	ldd	r24, Y+3	; 0x03
    1b52:	88 23       	and	r24, r24
    1b54:	a9 f4       	brne	.+42     	; 0x1b80 <DIO_vidSetPinValue+0x1a8>
                    PORTD &=~ (DIO_BIT_MASK<<Copy_u8PinID);
    1b56:	a2 e3       	ldi	r26, 0x32	; 50
    1b58:	b0 e0       	ldi	r27, 0x00	; 0
    1b5a:	e2 e3       	ldi	r30, 0x32	; 50
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	80 81       	ld	r24, Z
    1b60:	48 2f       	mov	r20, r24
    1b62:	8a 81       	ldd	r24, Y+2	; 0x02
    1b64:	28 2f       	mov	r18, r24
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	81 e0       	ldi	r24, 0x01	; 1
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	02 2e       	mov	r0, r18
    1b6e:	02 c0       	rjmp	.+4      	; 0x1b74 <DIO_vidSetPinValue+0x19c>
    1b70:	88 0f       	add	r24, r24
    1b72:	99 1f       	adc	r25, r25
    1b74:	0a 94       	dec	r0
    1b76:	e2 f7       	brpl	.-8      	; 0x1b70 <DIO_vidSetPinValue+0x198>
    1b78:	80 95       	com	r24
    1b7a:	84 23       	and	r24, r20
    1b7c:	8c 93       	st	X, r24
    1b7e:	13 c0       	rjmp	.+38     	; 0x1ba6 <DIO_vidSetPinValue+0x1ce>
                else
                    PORTD |= (DIO_BIT_MASK<<Copy_u8PinID);
    1b80:	a2 e3       	ldi	r26, 0x32	; 50
    1b82:	b0 e0       	ldi	r27, 0x00	; 0
    1b84:	e2 e3       	ldi	r30, 0x32	; 50
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	80 81       	ld	r24, Z
    1b8a:	48 2f       	mov	r20, r24
    1b8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8e:	28 2f       	mov	r18, r24
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	81 e0       	ldi	r24, 0x01	; 1
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	02 2e       	mov	r0, r18
    1b98:	02 c0       	rjmp	.+4      	; 0x1b9e <DIO_vidSetPinValue+0x1c6>
    1b9a:	88 0f       	add	r24, r24
    1b9c:	99 1f       	adc	r25, r25
    1b9e:	0a 94       	dec	r0
    1ba0:	e2 f7       	brpl	.-8      	; 0x1b9a <DIO_vidSetPinValue+0x1c2>
    1ba2:	84 2b       	or	r24, r20
    1ba4:	8c 93       	st	X, r24
            break;

        }
	}

}
    1ba6:	0f 90       	pop	r0
    1ba8:	0f 90       	pop	r0
    1baa:	0f 90       	pop	r0
    1bac:	0f 90       	pop	r0
    1bae:	0f 90       	pop	r0
    1bb0:	cf 91       	pop	r28
    1bb2:	df 91       	pop	r29
    1bb4:	08 95       	ret

00001bb6 <DIO_vidTogglePinValue>:

void DIO_vidTogglePinValue(u8 Copy_u8GroupID, u8 Copy_u8PinID)
{
    1bb6:	df 93       	push	r29
    1bb8:	cf 93       	push	r28
    1bba:	00 d0       	rcall	.+0      	; 0x1bbc <DIO_vidTogglePinValue+0x6>
    1bbc:	00 d0       	rcall	.+0      	; 0x1bbe <DIO_vidTogglePinValue+0x8>
    1bbe:	cd b7       	in	r28, 0x3d	; 61
    1bc0:	de b7       	in	r29, 0x3e	; 62
    1bc2:	89 83       	std	Y+1, r24	; 0x01
    1bc4:	6a 83       	std	Y+2, r22	; 0x02
    if (Copy_u8GroupID <= DIO_GROUP_D && Copy_u8PinID <= DIO_PIN_7)
    1bc6:	89 81       	ldd	r24, Y+1	; 0x01
    1bc8:	84 30       	cpi	r24, 0x04	; 4
    1bca:	08 f0       	brcs	.+2      	; 0x1bce <DIO_vidTogglePinValue+0x18>
    1bcc:	72 c0       	rjmp	.+228    	; 0x1cb2 <DIO_vidTogglePinValue+0xfc>
    1bce:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd0:	88 30       	cpi	r24, 0x08	; 8
    1bd2:	08 f0       	brcs	.+2      	; 0x1bd6 <DIO_vidTogglePinValue+0x20>
    1bd4:	6e c0       	rjmp	.+220    	; 0x1cb2 <DIO_vidTogglePinValue+0xfc>
	{
        switch(Copy_u8GroupID)
    1bd6:	89 81       	ldd	r24, Y+1	; 0x01
    1bd8:	28 2f       	mov	r18, r24
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	3c 83       	std	Y+4, r19	; 0x04
    1bde:	2b 83       	std	Y+3, r18	; 0x03
    1be0:	8b 81       	ldd	r24, Y+3	; 0x03
    1be2:	9c 81       	ldd	r25, Y+4	; 0x04
    1be4:	81 30       	cpi	r24, 0x01	; 1
    1be6:	91 05       	cpc	r25, r1
    1be8:	49 f1       	breq	.+82     	; 0x1c3c <DIO_vidTogglePinValue+0x86>
    1bea:	2b 81       	ldd	r18, Y+3	; 0x03
    1bec:	3c 81       	ldd	r19, Y+4	; 0x04
    1bee:	22 30       	cpi	r18, 0x02	; 2
    1bf0:	31 05       	cpc	r19, r1
    1bf2:	2c f4       	brge	.+10     	; 0x1bfe <DIO_vidTogglePinValue+0x48>
    1bf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf8:	00 97       	sbiw	r24, 0x00	; 0
    1bfa:	61 f0       	breq	.+24     	; 0x1c14 <DIO_vidTogglePinValue+0x5e>
    1bfc:	5a c0       	rjmp	.+180    	; 0x1cb2 <DIO_vidTogglePinValue+0xfc>
    1bfe:	2b 81       	ldd	r18, Y+3	; 0x03
    1c00:	3c 81       	ldd	r19, Y+4	; 0x04
    1c02:	22 30       	cpi	r18, 0x02	; 2
    1c04:	31 05       	cpc	r19, r1
    1c06:	71 f1       	breq	.+92     	; 0x1c64 <DIO_vidTogglePinValue+0xae>
    1c08:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c0c:	83 30       	cpi	r24, 0x03	; 3
    1c0e:	91 05       	cpc	r25, r1
    1c10:	e9 f1       	breq	.+122    	; 0x1c8c <DIO_vidTogglePinValue+0xd6>
    1c12:	4f c0       	rjmp	.+158    	; 0x1cb2 <DIO_vidTogglePinValue+0xfc>
        {
            case DIO_GROUP_A:
                PORTA ^= (DIO_BIT_MASK<<Copy_u8PinID);
    1c14:	ab e3       	ldi	r26, 0x3B	; 59
    1c16:	b0 e0       	ldi	r27, 0x00	; 0
    1c18:	eb e3       	ldi	r30, 0x3B	; 59
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	80 81       	ld	r24, Z
    1c1e:	48 2f       	mov	r20, r24
    1c20:	8a 81       	ldd	r24, Y+2	; 0x02
    1c22:	28 2f       	mov	r18, r24
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	81 e0       	ldi	r24, 0x01	; 1
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	02 2e       	mov	r0, r18
    1c2c:	02 c0       	rjmp	.+4      	; 0x1c32 <DIO_vidTogglePinValue+0x7c>
    1c2e:	88 0f       	add	r24, r24
    1c30:	99 1f       	adc	r25, r25
    1c32:	0a 94       	dec	r0
    1c34:	e2 f7       	brpl	.-8      	; 0x1c2e <DIO_vidTogglePinValue+0x78>
    1c36:	84 27       	eor	r24, r20
    1c38:	8c 93       	st	X, r24
    1c3a:	3b c0       	rjmp	.+118    	; 0x1cb2 <DIO_vidTogglePinValue+0xfc>
            break;

            case DIO_GROUP_B:
                PORTB ^= (DIO_BIT_MASK<<Copy_u8PinID);
    1c3c:	a8 e3       	ldi	r26, 0x38	; 56
    1c3e:	b0 e0       	ldi	r27, 0x00	; 0
    1c40:	e8 e3       	ldi	r30, 0x38	; 56
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	80 81       	ld	r24, Z
    1c46:	48 2f       	mov	r20, r24
    1c48:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4a:	28 2f       	mov	r18, r24
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	02 2e       	mov	r0, r18
    1c54:	02 c0       	rjmp	.+4      	; 0x1c5a <DIO_vidTogglePinValue+0xa4>
    1c56:	88 0f       	add	r24, r24
    1c58:	99 1f       	adc	r25, r25
    1c5a:	0a 94       	dec	r0
    1c5c:	e2 f7       	brpl	.-8      	; 0x1c56 <DIO_vidTogglePinValue+0xa0>
    1c5e:	84 27       	eor	r24, r20
    1c60:	8c 93       	st	X, r24
    1c62:	27 c0       	rjmp	.+78     	; 0x1cb2 <DIO_vidTogglePinValue+0xfc>
            break;

            case DIO_GROUP_C:
                PORTC ^= (DIO_BIT_MASK<<Copy_u8PinID);
    1c64:	a5 e3       	ldi	r26, 0x35	; 53
    1c66:	b0 e0       	ldi	r27, 0x00	; 0
    1c68:	e5 e3       	ldi	r30, 0x35	; 53
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	80 81       	ld	r24, Z
    1c6e:	48 2f       	mov	r20, r24
    1c70:	8a 81       	ldd	r24, Y+2	; 0x02
    1c72:	28 2f       	mov	r18, r24
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	81 e0       	ldi	r24, 0x01	; 1
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	02 2e       	mov	r0, r18
    1c7c:	02 c0       	rjmp	.+4      	; 0x1c82 <DIO_vidTogglePinValue+0xcc>
    1c7e:	88 0f       	add	r24, r24
    1c80:	99 1f       	adc	r25, r25
    1c82:	0a 94       	dec	r0
    1c84:	e2 f7       	brpl	.-8      	; 0x1c7e <DIO_vidTogglePinValue+0xc8>
    1c86:	84 27       	eor	r24, r20
    1c88:	8c 93       	st	X, r24
    1c8a:	13 c0       	rjmp	.+38     	; 0x1cb2 <DIO_vidTogglePinValue+0xfc>
            break;

            case DIO_GROUP_D:
                PORTD ^= (DIO_BIT_MASK<<Copy_u8PinID);
    1c8c:	a2 e3       	ldi	r26, 0x32	; 50
    1c8e:	b0 e0       	ldi	r27, 0x00	; 0
    1c90:	e2 e3       	ldi	r30, 0x32	; 50
    1c92:	f0 e0       	ldi	r31, 0x00	; 0
    1c94:	80 81       	ld	r24, Z
    1c96:	48 2f       	mov	r20, r24
    1c98:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9a:	28 2f       	mov	r18, r24
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	02 2e       	mov	r0, r18
    1ca4:	02 c0       	rjmp	.+4      	; 0x1caa <DIO_vidTogglePinValue+0xf4>
    1ca6:	88 0f       	add	r24, r24
    1ca8:	99 1f       	adc	r25, r25
    1caa:	0a 94       	dec	r0
    1cac:	e2 f7       	brpl	.-8      	; 0x1ca6 <DIO_vidTogglePinValue+0xf0>
    1cae:	84 27       	eor	r24, r20
    1cb0:	8c 93       	st	X, r24
            break;

        }
	}
}
    1cb2:	0f 90       	pop	r0
    1cb4:	0f 90       	pop	r0
    1cb6:	0f 90       	pop	r0
    1cb8:	0f 90       	pop	r0
    1cba:	cf 91       	pop	r28
    1cbc:	df 91       	pop	r29
    1cbe:	08 95       	ret

00001cc0 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8GroupID, u8 Copy_u8PinID)
{
    1cc0:	df 93       	push	r29
    1cc2:	cf 93       	push	r28
    1cc4:	00 d0       	rcall	.+0      	; 0x1cc6 <DIO_u8GetPinValue+0x6>
    1cc6:	00 d0       	rcall	.+0      	; 0x1cc8 <DIO_u8GetPinValue+0x8>
    1cc8:	0f 92       	push	r0
    1cca:	cd b7       	in	r28, 0x3d	; 61
    1ccc:	de b7       	in	r29, 0x3e	; 62
    1cce:	8a 83       	std	Y+2, r24	; 0x02
    1cd0:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8PinValue = 0xff;
    1cd2:	8f ef       	ldi	r24, 0xFF	; 255
    1cd4:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_u8GroupID <= DIO_GROUP_D && Copy_u8PinID <= DIO_PIN_7)
    1cd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd8:	84 30       	cpi	r24, 0x04	; 4
    1cda:	08 f0       	brcs	.+2      	; 0x1cde <DIO_u8GetPinValue+0x1e>
    1cdc:	6b c0       	rjmp	.+214    	; 0x1db4 <DIO_u8GetPinValue+0xf4>
    1cde:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce0:	88 30       	cpi	r24, 0x08	; 8
    1ce2:	08 f0       	brcs	.+2      	; 0x1ce6 <DIO_u8GetPinValue+0x26>
    1ce4:	67 c0       	rjmp	.+206    	; 0x1db4 <DIO_u8GetPinValue+0xf4>
	{
        switch(Copy_u8GroupID)
    1ce6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce8:	28 2f       	mov	r18, r24
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	3d 83       	std	Y+5, r19	; 0x05
    1cee:	2c 83       	std	Y+4, r18	; 0x04
    1cf0:	4c 81       	ldd	r20, Y+4	; 0x04
    1cf2:	5d 81       	ldd	r21, Y+5	; 0x05
    1cf4:	41 30       	cpi	r20, 0x01	; 1
    1cf6:	51 05       	cpc	r21, r1
    1cf8:	41 f1       	breq	.+80     	; 0x1d4a <DIO_u8GetPinValue+0x8a>
    1cfa:	8c 81       	ldd	r24, Y+4	; 0x04
    1cfc:	9d 81       	ldd	r25, Y+5	; 0x05
    1cfe:	82 30       	cpi	r24, 0x02	; 2
    1d00:	91 05       	cpc	r25, r1
    1d02:	34 f4       	brge	.+12     	; 0x1d10 <DIO_u8GetPinValue+0x50>
    1d04:	2c 81       	ldd	r18, Y+4	; 0x04
    1d06:	3d 81       	ldd	r19, Y+5	; 0x05
    1d08:	21 15       	cp	r18, r1
    1d0a:	31 05       	cpc	r19, r1
    1d0c:	61 f0       	breq	.+24     	; 0x1d26 <DIO_u8GetPinValue+0x66>
    1d0e:	52 c0       	rjmp	.+164    	; 0x1db4 <DIO_u8GetPinValue+0xf4>
    1d10:	4c 81       	ldd	r20, Y+4	; 0x04
    1d12:	5d 81       	ldd	r21, Y+5	; 0x05
    1d14:	42 30       	cpi	r20, 0x02	; 2
    1d16:	51 05       	cpc	r21, r1
    1d18:	51 f1       	breq	.+84     	; 0x1d6e <DIO_u8GetPinValue+0xae>
    1d1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d1c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d1e:	83 30       	cpi	r24, 0x03	; 3
    1d20:	91 05       	cpc	r25, r1
    1d22:	b9 f1       	breq	.+110    	; 0x1d92 <DIO_u8GetPinValue+0xd2>
    1d24:	47 c0       	rjmp	.+142    	; 0x1db4 <DIO_u8GetPinValue+0xf4>
        {
            case DIO_GROUP_A:
                Local_u8PinValue = ((PINA>>Copy_u8PinID)&DIO_BIT_MASK);
    1d26:	e9 e3       	ldi	r30, 0x39	; 57
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	80 81       	ld	r24, Z
    1d2c:	28 2f       	mov	r18, r24
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	8b 81       	ldd	r24, Y+3	; 0x03
    1d32:	88 2f       	mov	r24, r24
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	a9 01       	movw	r20, r18
    1d38:	02 c0       	rjmp	.+4      	; 0x1d3e <DIO_u8GetPinValue+0x7e>
    1d3a:	55 95       	asr	r21
    1d3c:	47 95       	ror	r20
    1d3e:	8a 95       	dec	r24
    1d40:	e2 f7       	brpl	.-8      	; 0x1d3a <DIO_u8GetPinValue+0x7a>
    1d42:	ca 01       	movw	r24, r20
    1d44:	81 70       	andi	r24, 0x01	; 1
    1d46:	89 83       	std	Y+1, r24	; 0x01
    1d48:	35 c0       	rjmp	.+106    	; 0x1db4 <DIO_u8GetPinValue+0xf4>
            break;

            case DIO_GROUP_B:
                Local_u8PinValue = ((PINB>>Copy_u8PinID)&DIO_BIT_MASK);
    1d4a:	e6 e3       	ldi	r30, 0x36	; 54
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	80 81       	ld	r24, Z
    1d50:	28 2f       	mov	r18, r24
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	8b 81       	ldd	r24, Y+3	; 0x03
    1d56:	88 2f       	mov	r24, r24
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	a9 01       	movw	r20, r18
    1d5c:	02 c0       	rjmp	.+4      	; 0x1d62 <DIO_u8GetPinValue+0xa2>
    1d5e:	55 95       	asr	r21
    1d60:	47 95       	ror	r20
    1d62:	8a 95       	dec	r24
    1d64:	e2 f7       	brpl	.-8      	; 0x1d5e <DIO_u8GetPinValue+0x9e>
    1d66:	ca 01       	movw	r24, r20
    1d68:	81 70       	andi	r24, 0x01	; 1
    1d6a:	89 83       	std	Y+1, r24	; 0x01
    1d6c:	23 c0       	rjmp	.+70     	; 0x1db4 <DIO_u8GetPinValue+0xf4>
            break;

            case DIO_GROUP_C:
                Local_u8PinValue = ((PINC>>Copy_u8PinID)&DIO_BIT_MASK);
    1d6e:	e3 e3       	ldi	r30, 0x33	; 51
    1d70:	f0 e0       	ldi	r31, 0x00	; 0
    1d72:	80 81       	ld	r24, Z
    1d74:	28 2f       	mov	r18, r24
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7a:	88 2f       	mov	r24, r24
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	a9 01       	movw	r20, r18
    1d80:	02 c0       	rjmp	.+4      	; 0x1d86 <DIO_u8GetPinValue+0xc6>
    1d82:	55 95       	asr	r21
    1d84:	47 95       	ror	r20
    1d86:	8a 95       	dec	r24
    1d88:	e2 f7       	brpl	.-8      	; 0x1d82 <DIO_u8GetPinValue+0xc2>
    1d8a:	ca 01       	movw	r24, r20
    1d8c:	81 70       	andi	r24, 0x01	; 1
    1d8e:	89 83       	std	Y+1, r24	; 0x01
    1d90:	11 c0       	rjmp	.+34     	; 0x1db4 <DIO_u8GetPinValue+0xf4>
            break;

            case DIO_GROUP_D:
                Local_u8PinValue = ((PIND>>Copy_u8PinID)&DIO_BIT_MASK);
    1d92:	e0 e3       	ldi	r30, 0x30	; 48
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
    1d96:	80 81       	ld	r24, Z
    1d98:	28 2f       	mov	r18, r24
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9e:	88 2f       	mov	r24, r24
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	a9 01       	movw	r20, r18
    1da4:	02 c0       	rjmp	.+4      	; 0x1daa <DIO_u8GetPinValue+0xea>
    1da6:	55 95       	asr	r21
    1da8:	47 95       	ror	r20
    1daa:	8a 95       	dec	r24
    1dac:	e2 f7       	brpl	.-8      	; 0x1da6 <DIO_u8GetPinValue+0xe6>
    1dae:	ca 01       	movw	r24, r20
    1db0:	81 70       	andi	r24, 0x01	; 1
    1db2:	89 83       	std	Y+1, r24	; 0x01
            break;

        }
	}
    return Local_u8PinValue;
    1db4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1db6:	0f 90       	pop	r0
    1db8:	0f 90       	pop	r0
    1dba:	0f 90       	pop	r0
    1dbc:	0f 90       	pop	r0
    1dbe:	0f 90       	pop	r0
    1dc0:	cf 91       	pop	r28
    1dc2:	df 91       	pop	r29
    1dc4:	08 95       	ret

00001dc6 <ADC_init>:

#include "ADC_interface.h"


void ADC_init(u8 type,u8 VREF,u8 prescale)
{
    1dc6:	df 93       	push	r29
    1dc8:	cf 93       	push	r28
    1dca:	00 d0       	rcall	.+0      	; 0x1dcc <ADC_init+0x6>
    1dcc:	00 d0       	rcall	.+0      	; 0x1dce <ADC_init+0x8>
    1dce:	0f 92       	push	r0
    1dd0:	cd b7       	in	r28, 0x3d	; 61
    1dd2:	de b7       	in	r29, 0x3e	; 62
    1dd4:	89 83       	std	Y+1, r24	; 0x01
    1dd6:	6a 83       	std	Y+2, r22	; 0x02
    1dd8:	4b 83       	std	Y+3, r20	; 0x03
	
	SET_BIT(ADCSRA,ADEN);
    1dda:	a6 e2       	ldi	r26, 0x26	; 38
    1ddc:	b0 e0       	ldi	r27, 0x00	; 0
    1dde:	e6 e2       	ldi	r30, 0x26	; 38
    1de0:	f0 e0       	ldi	r31, 0x00	; 0
    1de2:	80 81       	ld	r24, Z
    1de4:	80 68       	ori	r24, 0x80	; 128
    1de6:	8c 93       	st	X, r24


	if(type == MSB)
    1de8:	89 81       	ldd	r24, Y+1	; 0x01
    1dea:	81 30       	cpi	r24, 0x01	; 1
    1dec:	41 f4       	brne	.+16     	; 0x1dfe <ADC_init+0x38>
	{
		SET_BIT(ADMUX,ADLAR);
    1dee:	a7 e2       	ldi	r26, 0x27	; 39
    1df0:	b0 e0       	ldi	r27, 0x00	; 0
    1df2:	e7 e2       	ldi	r30, 0x27	; 39
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	80 81       	ld	r24, Z
    1df8:	80 62       	ori	r24, 0x20	; 32
    1dfa:	8c 93       	st	X, r24
    1dfc:	0a c0       	rjmp	.+20     	; 0x1e12 <ADC_init+0x4c>
	}
	else if (type == LSB)
    1dfe:	89 81       	ldd	r24, Y+1	; 0x01
    1e00:	88 23       	and	r24, r24
    1e02:	39 f4       	brne	.+14     	; 0x1e12 <ADC_init+0x4c>
	{
		CLR_BIT(ADMUX,ADLAR);
    1e04:	a7 e2       	ldi	r26, 0x27	; 39
    1e06:	b0 e0       	ldi	r27, 0x00	; 0
    1e08:	e7 e2       	ldi	r30, 0x27	; 39
    1e0a:	f0 e0       	ldi	r31, 0x00	; 0
    1e0c:	80 81       	ld	r24, Z
    1e0e:	8f 7d       	andi	r24, 0xDF	; 223
    1e10:	8c 93       	st	X, r24
	}


	if(VREF == internal)
    1e12:	8a 81       	ldd	r24, Y+2	; 0x02
    1e14:	88 23       	and	r24, r24
    1e16:	79 f4       	brne	.+30     	; 0x1e36 <ADC_init+0x70>
	{
		CLR_BIT(ADMUX,REFS1);
    1e18:	a7 e2       	ldi	r26, 0x27	; 39
    1e1a:	b0 e0       	ldi	r27, 0x00	; 0
    1e1c:	e7 e2       	ldi	r30, 0x27	; 39
    1e1e:	f0 e0       	ldi	r31, 0x00	; 0
    1e20:	80 81       	ld	r24, Z
    1e22:	8f 77       	andi	r24, 0x7F	; 127
    1e24:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,REFS0);
    1e26:	a7 e2       	ldi	r26, 0x27	; 39
    1e28:	b0 e0       	ldi	r27, 0x00	; 0
    1e2a:	e7 e2       	ldi	r30, 0x27	; 39
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	80 81       	ld	r24, Z
    1e30:	8f 7b       	andi	r24, 0xBF	; 191
    1e32:	8c 93       	st	X, r24
    1e34:	11 c0       	rjmp	.+34     	; 0x1e58 <ADC_init+0x92>
	}
	else if (type == external)
    1e36:	89 81       	ldd	r24, Y+1	; 0x01
    1e38:	81 30       	cpi	r24, 0x01	; 1
    1e3a:	71 f4       	brne	.+28     	; 0x1e58 <ADC_init+0x92>
	{
		SET_BIT(ADMUX,REFS1);
    1e3c:	a7 e2       	ldi	r26, 0x27	; 39
    1e3e:	b0 e0       	ldi	r27, 0x00	; 0
    1e40:	e7 e2       	ldi	r30, 0x27	; 39
    1e42:	f0 e0       	ldi	r31, 0x00	; 0
    1e44:	80 81       	ld	r24, Z
    1e46:	80 68       	ori	r24, 0x80	; 128
    1e48:	8c 93       	st	X, r24
		SET_BIT(ADMUX,REFS0);
    1e4a:	a7 e2       	ldi	r26, 0x27	; 39
    1e4c:	b0 e0       	ldi	r27, 0x00	; 0
    1e4e:	e7 e2       	ldi	r30, 0x27	; 39
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	80 81       	ld	r24, Z
    1e54:	80 64       	ori	r24, 0x40	; 64
    1e56:	8c 93       	st	X, r24

	}

	switch(prescale)
    1e58:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5a:	28 2f       	mov	r18, r24
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	3d 83       	std	Y+5, r19	; 0x05
    1e60:	2c 83       	std	Y+4, r18	; 0x04
    1e62:	8c 81       	ldd	r24, Y+4	; 0x04
    1e64:	9d 81       	ldd	r25, Y+5	; 0x05
    1e66:	80 31       	cpi	r24, 0x10	; 16
    1e68:	91 05       	cpc	r25, r1
    1e6a:	09 f4       	brne	.+2      	; 0x1e6e <ADC_init+0xa8>
    1e6c:	6b c0       	rjmp	.+214    	; 0x1f44 <ADC_init+0x17e>
    1e6e:	2c 81       	ldd	r18, Y+4	; 0x04
    1e70:	3d 81       	ldd	r19, Y+5	; 0x05
    1e72:	21 31       	cpi	r18, 0x11	; 17
    1e74:	31 05       	cpc	r19, r1
    1e76:	8c f4       	brge	.+34     	; 0x1e9a <ADC_init+0xd4>
    1e78:	8c 81       	ldd	r24, Y+4	; 0x04
    1e7a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e7c:	84 30       	cpi	r24, 0x04	; 4
    1e7e:	91 05       	cpc	r25, r1
    1e80:	a9 f1       	breq	.+106    	; 0x1eec <ADC_init+0x126>
    1e82:	2c 81       	ldd	r18, Y+4	; 0x04
    1e84:	3d 81       	ldd	r19, Y+5	; 0x05
    1e86:	28 30       	cpi	r18, 0x08	; 8
    1e88:	31 05       	cpc	r19, r1
    1e8a:	09 f4       	brne	.+2      	; 0x1e8e <ADC_init+0xc8>
    1e8c:	45 c0       	rjmp	.+138    	; 0x1f18 <ADC_init+0x152>
    1e8e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e90:	9d 81       	ldd	r25, Y+5	; 0x05
    1e92:	82 30       	cpi	r24, 0x02	; 2
    1e94:	91 05       	cpc	r25, r1
    1e96:	a1 f0       	breq	.+40     	; 0x1ec0 <ADC_init+0xfa>
    1e98:	ac c0       	rjmp	.+344    	; 0x1ff2 <ADC_init+0x22c>
    1e9a:	2c 81       	ldd	r18, Y+4	; 0x04
    1e9c:	3d 81       	ldd	r19, Y+5	; 0x05
    1e9e:	20 34       	cpi	r18, 0x40	; 64
    1ea0:	31 05       	cpc	r19, r1
    1ea2:	09 f4       	brne	.+2      	; 0x1ea6 <ADC_init+0xe0>
    1ea4:	7b c0       	rjmp	.+246    	; 0x1f9c <ADC_init+0x1d6>
    1ea6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea8:	9d 81       	ldd	r25, Y+5	; 0x05
    1eaa:	80 38       	cpi	r24, 0x80	; 128
    1eac:	91 05       	cpc	r25, r1
    1eae:	09 f4       	brne	.+2      	; 0x1eb2 <ADC_init+0xec>
    1eb0:	8b c0       	rjmp	.+278    	; 0x1fc8 <ADC_init+0x202>
    1eb2:	2c 81       	ldd	r18, Y+4	; 0x04
    1eb4:	3d 81       	ldd	r19, Y+5	; 0x05
    1eb6:	20 32       	cpi	r18, 0x20	; 32
    1eb8:	31 05       	cpc	r19, r1
    1eba:	09 f4       	brne	.+2      	; 0x1ebe <ADC_init+0xf8>
    1ebc:	59 c0       	rjmp	.+178    	; 0x1f70 <ADC_init+0x1aa>
    1ebe:	99 c0       	rjmp	.+306    	; 0x1ff2 <ADC_init+0x22c>
	{
		case 2:	CLR_BIT(ADCSRA,ADPS0);
    1ec0:	a6 e2       	ldi	r26, 0x26	; 38
    1ec2:	b0 e0       	ldi	r27, 0x00	; 0
    1ec4:	e6 e2       	ldi	r30, 0x26	; 38
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	80 81       	ld	r24, Z
    1eca:	8e 7f       	andi	r24, 0xFE	; 254
    1ecc:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA,ADPS1);
    1ece:	a6 e2       	ldi	r26, 0x26	; 38
    1ed0:	b0 e0       	ldi	r27, 0x00	; 0
    1ed2:	e6 e2       	ldi	r30, 0x26	; 38
    1ed4:	f0 e0       	ldi	r31, 0x00	; 0
    1ed6:	80 81       	ld	r24, Z
    1ed8:	8d 7f       	andi	r24, 0xFD	; 253
    1eda:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA,ADPS2);
    1edc:	a6 e2       	ldi	r26, 0x26	; 38
    1ede:	b0 e0       	ldi	r27, 0x00	; 0
    1ee0:	e6 e2       	ldi	r30, 0x26	; 38
    1ee2:	f0 e0       	ldi	r31, 0x00	; 0
    1ee4:	80 81       	ld	r24, Z
    1ee6:	8b 7f       	andi	r24, 0xFB	; 251
    1ee8:	8c 93       	st	X, r24
    1eea:	83 c0       	rjmp	.+262    	; 0x1ff2 <ADC_init+0x22c>
		break;
		case 4: CLR_BIT(ADCSRA,ADPS0);
    1eec:	a6 e2       	ldi	r26, 0x26	; 38
    1eee:	b0 e0       	ldi	r27, 0x00	; 0
    1ef0:	e6 e2       	ldi	r30, 0x26	; 38
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	80 81       	ld	r24, Z
    1ef6:	8e 7f       	andi	r24, 0xFE	; 254
    1ef8:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS1);
    1efa:	a6 e2       	ldi	r26, 0x26	; 38
    1efc:	b0 e0       	ldi	r27, 0x00	; 0
    1efe:	e6 e2       	ldi	r30, 0x26	; 38
    1f00:	f0 e0       	ldi	r31, 0x00	; 0
    1f02:	80 81       	ld	r24, Z
    1f04:	82 60       	ori	r24, 0x02	; 2
    1f06:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA,ADPS2);
    1f08:	a6 e2       	ldi	r26, 0x26	; 38
    1f0a:	b0 e0       	ldi	r27, 0x00	; 0
    1f0c:	e6 e2       	ldi	r30, 0x26	; 38
    1f0e:	f0 e0       	ldi	r31, 0x00	; 0
    1f10:	80 81       	ld	r24, Z
    1f12:	8b 7f       	andi	r24, 0xFB	; 251
    1f14:	8c 93       	st	X, r24
    1f16:	6d c0       	rjmp	.+218    	; 0x1ff2 <ADC_init+0x22c>
		break;
		case 8: SET_BIT(ADCSRA,ADPS0);
    1f18:	a6 e2       	ldi	r26, 0x26	; 38
    1f1a:	b0 e0       	ldi	r27, 0x00	; 0
    1f1c:	e6 e2       	ldi	r30, 0x26	; 38
    1f1e:	f0 e0       	ldi	r31, 0x00	; 0
    1f20:	80 81       	ld	r24, Z
    1f22:	81 60       	ori	r24, 0x01	; 1
    1f24:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS1);
    1f26:	a6 e2       	ldi	r26, 0x26	; 38
    1f28:	b0 e0       	ldi	r27, 0x00	; 0
    1f2a:	e6 e2       	ldi	r30, 0x26	; 38
    1f2c:	f0 e0       	ldi	r31, 0x00	; 0
    1f2e:	80 81       	ld	r24, Z
    1f30:	82 60       	ori	r24, 0x02	; 2
    1f32:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA,ADPS2);
    1f34:	a6 e2       	ldi	r26, 0x26	; 38
    1f36:	b0 e0       	ldi	r27, 0x00	; 0
    1f38:	e6 e2       	ldi	r30, 0x26	; 38
    1f3a:	f0 e0       	ldi	r31, 0x00	; 0
    1f3c:	80 81       	ld	r24, Z
    1f3e:	8b 7f       	andi	r24, 0xFB	; 251
    1f40:	8c 93       	st	X, r24
    1f42:	57 c0       	rjmp	.+174    	; 0x1ff2 <ADC_init+0x22c>
		break;
		case 16: CLR_BIT(ADCSRA,ADPS0);
    1f44:	a6 e2       	ldi	r26, 0x26	; 38
    1f46:	b0 e0       	ldi	r27, 0x00	; 0
    1f48:	e6 e2       	ldi	r30, 0x26	; 38
    1f4a:	f0 e0       	ldi	r31, 0x00	; 0
    1f4c:	80 81       	ld	r24, Z
    1f4e:	8e 7f       	andi	r24, 0xFE	; 254
    1f50:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA,ADPS1);
    1f52:	a6 e2       	ldi	r26, 0x26	; 38
    1f54:	b0 e0       	ldi	r27, 0x00	; 0
    1f56:	e6 e2       	ldi	r30, 0x26	; 38
    1f58:	f0 e0       	ldi	r31, 0x00	; 0
    1f5a:	80 81       	ld	r24, Z
    1f5c:	8d 7f       	andi	r24, 0xFD	; 253
    1f5e:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS2);
    1f60:	a6 e2       	ldi	r26, 0x26	; 38
    1f62:	b0 e0       	ldi	r27, 0x00	; 0
    1f64:	e6 e2       	ldi	r30, 0x26	; 38
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	80 81       	ld	r24, Z
    1f6a:	84 60       	ori	r24, 0x04	; 4
    1f6c:	8c 93       	st	X, r24
    1f6e:	41 c0       	rjmp	.+130    	; 0x1ff2 <ADC_init+0x22c>
		break;
		case 32: SET_BIT(ADCSRA,ADPS0);
    1f70:	a6 e2       	ldi	r26, 0x26	; 38
    1f72:	b0 e0       	ldi	r27, 0x00	; 0
    1f74:	e6 e2       	ldi	r30, 0x26	; 38
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	80 81       	ld	r24, Z
    1f7a:	81 60       	ori	r24, 0x01	; 1
    1f7c:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA,ADPS1);
    1f7e:	a6 e2       	ldi	r26, 0x26	; 38
    1f80:	b0 e0       	ldi	r27, 0x00	; 0
    1f82:	e6 e2       	ldi	r30, 0x26	; 38
    1f84:	f0 e0       	ldi	r31, 0x00	; 0
    1f86:	80 81       	ld	r24, Z
    1f88:	8d 7f       	andi	r24, 0xFD	; 253
    1f8a:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS2);
    1f8c:	a6 e2       	ldi	r26, 0x26	; 38
    1f8e:	b0 e0       	ldi	r27, 0x00	; 0
    1f90:	e6 e2       	ldi	r30, 0x26	; 38
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	80 81       	ld	r24, Z
    1f96:	84 60       	ori	r24, 0x04	; 4
    1f98:	8c 93       	st	X, r24
    1f9a:	2b c0       	rjmp	.+86     	; 0x1ff2 <ADC_init+0x22c>
		break;
		case 64: CLR_BIT(ADCSRA,ADPS0);
    1f9c:	a6 e2       	ldi	r26, 0x26	; 38
    1f9e:	b0 e0       	ldi	r27, 0x00	; 0
    1fa0:	e6 e2       	ldi	r30, 0x26	; 38
    1fa2:	f0 e0       	ldi	r31, 0x00	; 0
    1fa4:	80 81       	ld	r24, Z
    1fa6:	8e 7f       	andi	r24, 0xFE	; 254
    1fa8:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS1);
    1faa:	a6 e2       	ldi	r26, 0x26	; 38
    1fac:	b0 e0       	ldi	r27, 0x00	; 0
    1fae:	e6 e2       	ldi	r30, 0x26	; 38
    1fb0:	f0 e0       	ldi	r31, 0x00	; 0
    1fb2:	80 81       	ld	r24, Z
    1fb4:	82 60       	ori	r24, 0x02	; 2
    1fb6:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS2);
    1fb8:	a6 e2       	ldi	r26, 0x26	; 38
    1fba:	b0 e0       	ldi	r27, 0x00	; 0
    1fbc:	e6 e2       	ldi	r30, 0x26	; 38
    1fbe:	f0 e0       	ldi	r31, 0x00	; 0
    1fc0:	80 81       	ld	r24, Z
    1fc2:	84 60       	ori	r24, 0x04	; 4
    1fc4:	8c 93       	st	X, r24
    1fc6:	15 c0       	rjmp	.+42     	; 0x1ff2 <ADC_init+0x22c>
		break;
		case 128: SET_BIT(ADCSRA,ADPS0);
    1fc8:	a6 e2       	ldi	r26, 0x26	; 38
    1fca:	b0 e0       	ldi	r27, 0x00	; 0
    1fcc:	e6 e2       	ldi	r30, 0x26	; 38
    1fce:	f0 e0       	ldi	r31, 0x00	; 0
    1fd0:	80 81       	ld	r24, Z
    1fd2:	81 60       	ori	r24, 0x01	; 1
    1fd4:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS1);
    1fd6:	a6 e2       	ldi	r26, 0x26	; 38
    1fd8:	b0 e0       	ldi	r27, 0x00	; 0
    1fda:	e6 e2       	ldi	r30, 0x26	; 38
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	80 81       	ld	r24, Z
    1fe0:	82 60       	ori	r24, 0x02	; 2
    1fe2:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS2);
    1fe4:	a6 e2       	ldi	r26, 0x26	; 38
    1fe6:	b0 e0       	ldi	r27, 0x00	; 0
    1fe8:	e6 e2       	ldi	r30, 0x26	; 38
    1fea:	f0 e0       	ldi	r31, 0x00	; 0
    1fec:	80 81       	ld	r24, Z
    1fee:	84 60       	ori	r24, 0x04	; 4
    1ff0:	8c 93       	st	X, r24
		break;
		default:
		break;
	}
}
    1ff2:	0f 90       	pop	r0
    1ff4:	0f 90       	pop	r0
    1ff6:	0f 90       	pop	r0
    1ff8:	0f 90       	pop	r0
    1ffa:	0f 90       	pop	r0
    1ffc:	cf 91       	pop	r28
    1ffe:	df 91       	pop	r29
    2000:	08 95       	ret

00002002 <ADC_ReadChannel>:


u16 ADC_ReadChannel(u8 Channel)
{
    2002:	df 93       	push	r29
    2004:	cf 93       	push	r28
    2006:	00 d0       	rcall	.+0      	; 0x2008 <ADC_ReadChannel+0x6>
    2008:	0f 92       	push	r0
    200a:	cd b7       	in	r28, 0x3d	; 61
    200c:	de b7       	in	r29, 0x3e	; 62
    200e:	8b 83       	std	Y+3, r24	; 0x03

	Channel &= 0x07;
    2010:	8b 81       	ldd	r24, Y+3	; 0x03
    2012:	87 70       	andi	r24, 0x07	; 7
    2014:	8b 83       	std	Y+3, r24	; 0x03
	ADMUX &=0xE0 ;
    2016:	a7 e2       	ldi	r26, 0x27	; 39
    2018:	b0 e0       	ldi	r27, 0x00	; 0
    201a:	e7 e2       	ldi	r30, 0x27	; 39
    201c:	f0 e0       	ldi	r31, 0x00	; 0
    201e:	80 81       	ld	r24, Z
    2020:	80 7e       	andi	r24, 0xE0	; 224
    2022:	8c 93       	st	X, r24
	ADMUX = ADMUX | Channel;
    2024:	a7 e2       	ldi	r26, 0x27	; 39
    2026:	b0 e0       	ldi	r27, 0x00	; 0
    2028:	e7 e2       	ldi	r30, 0x27	; 39
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	90 81       	ld	r25, Z
    202e:	8b 81       	ldd	r24, Y+3	; 0x03
    2030:	89 2b       	or	r24, r25
    2032:	8c 93       	st	X, r24
	u16 ADC_value=0;
    2034:	1a 82       	std	Y+2, r1	; 0x02
    2036:	19 82       	std	Y+1, r1	; 0x01
	ADC_value |= ADCL ;
    2038:	e4 e2       	ldi	r30, 0x24	; 36
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	80 81       	ld	r24, Z
    203e:	28 2f       	mov	r18, r24
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	89 81       	ldd	r24, Y+1	; 0x01
    2044:	9a 81       	ldd	r25, Y+2	; 0x02
    2046:	82 2b       	or	r24, r18
    2048:	93 2b       	or	r25, r19
    204a:	9a 83       	std	Y+2, r25	; 0x02
    204c:	89 83       	std	Y+1, r24	; 0x01
	ADC_value |= (ADCH<<8);
    204e:	e5 e2       	ldi	r30, 0x25	; 37
    2050:	f0 e0       	ldi	r31, 0x00	; 0
    2052:	80 81       	ld	r24, Z
    2054:	88 2f       	mov	r24, r24
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	98 2f       	mov	r25, r24
    205a:	88 27       	eor	r24, r24
    205c:	9c 01       	movw	r18, r24
    205e:	89 81       	ldd	r24, Y+1	; 0x01
    2060:	9a 81       	ldd	r25, Y+2	; 0x02
    2062:	82 2b       	or	r24, r18
    2064:	93 2b       	or	r25, r19
    2066:	9a 83       	std	Y+2, r25	; 0x02
    2068:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(ADCSRA,ADSC);
    206a:	a6 e2       	ldi	r26, 0x26	; 38
    206c:	b0 e0       	ldi	r27, 0x00	; 0
    206e:	e6 e2       	ldi	r30, 0x26	; 38
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	80 81       	ld	r24, Z
    2074:	80 64       	ori	r24, 0x40	; 64
    2076:	8c 93       	st	X, r24
	while(!GET_BIT(ADCSRA,ADIF));
    2078:	e6 e2       	ldi	r30, 0x26	; 38
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	80 81       	ld	r24, Z
    207e:	82 95       	swap	r24
    2080:	8f 70       	andi	r24, 0x0F	; 15
    2082:	88 2f       	mov	r24, r24
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	81 70       	andi	r24, 0x01	; 1
    2088:	90 70       	andi	r25, 0x00	; 0
    208a:	00 97       	sbiw	r24, 0x00	; 0
    208c:	a9 f3       	breq	.-22     	; 0x2078 <ADC_ReadChannel+0x76>
	SET_BIT(ADCSRA,ADIF);
    208e:	a6 e2       	ldi	r26, 0x26	; 38
    2090:	b0 e0       	ldi	r27, 0x00	; 0
    2092:	e6 e2       	ldi	r30, 0x26	; 38
    2094:	f0 e0       	ldi	r31, 0x00	; 0
    2096:	80 81       	ld	r24, Z
    2098:	80 61       	ori	r24, 0x10	; 16
    209a:	8c 93       	st	X, r24
	return ADC_value;
    209c:	89 81       	ldd	r24, Y+1	; 0x01
    209e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    20a0:	0f 90       	pop	r0
    20a2:	0f 90       	pop	r0
    20a4:	0f 90       	pop	r0
    20a6:	cf 91       	pop	r28
    20a8:	df 91       	pop	r29
    20aa:	08 95       	ret

000020ac <LM35_init>:

#include "LM35.h"

void LM35_init(u8 PORTID,u8 PINID)
{
    20ac:	df 93       	push	r29
    20ae:	cf 93       	push	r28
    20b0:	00 d0       	rcall	.+0      	; 0x20b2 <LM35_init+0x6>
    20b2:	cd b7       	in	r28, 0x3d	; 61
    20b4:	de b7       	in	r29, 0x3e	; 62
    20b6:	89 83       	std	Y+1, r24	; 0x01
    20b8:	6a 83       	std	Y+2, r22	; 0x02
	ADC_init(MODE, VREF, prescale);
    20ba:	80 e0       	ldi	r24, 0x00	; 0
    20bc:	61 e0       	ldi	r22, 0x01	; 1
    20be:	40 e4       	ldi	r20, 0x40	; 64
    20c0:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <ADC_init>
}
    20c4:	0f 90       	pop	r0
    20c6:	0f 90       	pop	r0
    20c8:	cf 91       	pop	r28
    20ca:	df 91       	pop	r29
    20cc:	08 95       	ret

000020ce <LM35_Read>:

u8 LM35_Read(u8 Channel)
{
    20ce:	df 93       	push	r29
    20d0:	cf 93       	push	r28
    20d2:	00 d0       	rcall	.+0      	; 0x20d4 <LM35_Read+0x6>
    20d4:	00 d0       	rcall	.+0      	; 0x20d6 <LM35_Read+0x8>
    20d6:	0f 92       	push	r0
    20d8:	cd b7       	in	r28, 0x3d	; 61
    20da:	de b7       	in	r29, 0x3e	; 62
    20dc:	8d 83       	std	Y+5, r24	; 0x05
	float temp = 0 ;
    20de:	80 e0       	ldi	r24, 0x00	; 0
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	a0 e0       	ldi	r26, 0x00	; 0
    20e4:	b0 e0       	ldi	r27, 0x00	; 0
    20e6:	89 83       	std	Y+1, r24	; 0x01
    20e8:	9a 83       	std	Y+2, r25	; 0x02
    20ea:	ab 83       	std	Y+3, r26	; 0x03
    20ec:	bc 83       	std	Y+4, r27	; 0x04
	temp = (float)ADC_ReadChannel(Channel);
    20ee:	8d 81       	ldd	r24, Y+5	; 0x05
    20f0:	0e 94 01 10 	call	0x2002	; 0x2002 <ADC_ReadChannel>
    20f4:	cc 01       	movw	r24, r24
    20f6:	a0 e0       	ldi	r26, 0x00	; 0
    20f8:	b0 e0       	ldi	r27, 0x00	; 0
    20fa:	bc 01       	movw	r22, r24
    20fc:	cd 01       	movw	r24, r26
    20fe:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    2102:	dc 01       	movw	r26, r24
    2104:	cb 01       	movw	r24, r22
    2106:	89 83       	std	Y+1, r24	; 0x01
    2108:	9a 83       	std	Y+2, r25	; 0x02
    210a:	ab 83       	std	Y+3, r26	; 0x03
    210c:	bc 83       	std	Y+4, r27	; 0x04
	temp = (float)((5*temp)/1024)*100;
    210e:	69 81       	ldd	r22, Y+1	; 0x01
    2110:	7a 81       	ldd	r23, Y+2	; 0x02
    2112:	8b 81       	ldd	r24, Y+3	; 0x03
    2114:	9c 81       	ldd	r25, Y+4	; 0x04
    2116:	20 e0       	ldi	r18, 0x00	; 0
    2118:	30 e0       	ldi	r19, 0x00	; 0
    211a:	40 ea       	ldi	r20, 0xA0	; 160
    211c:	50 e4       	ldi	r21, 0x40	; 64
    211e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2122:	dc 01       	movw	r26, r24
    2124:	cb 01       	movw	r24, r22
    2126:	bc 01       	movw	r22, r24
    2128:	cd 01       	movw	r24, r26
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	40 e8       	ldi	r20, 0x80	; 128
    2130:	54 e4       	ldi	r21, 0x44	; 68
    2132:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2136:	dc 01       	movw	r26, r24
    2138:	cb 01       	movw	r24, r22
    213a:	bc 01       	movw	r22, r24
    213c:	cd 01       	movw	r24, r26
    213e:	20 e0       	ldi	r18, 0x00	; 0
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	48 ec       	ldi	r20, 0xC8	; 200
    2144:	52 e4       	ldi	r21, 0x42	; 66
    2146:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    214a:	dc 01       	movw	r26, r24
    214c:	cb 01       	movw	r24, r22
    214e:	89 83       	std	Y+1, r24	; 0x01
    2150:	9a 83       	std	Y+2, r25	; 0x02
    2152:	ab 83       	std	Y+3, r26	; 0x03
    2154:	bc 83       	std	Y+4, r27	; 0x04
	return temp;
    2156:	69 81       	ldd	r22, Y+1	; 0x01
    2158:	7a 81       	ldd	r23, Y+2	; 0x02
    215a:	8b 81       	ldd	r24, Y+3	; 0x03
    215c:	9c 81       	ldd	r25, Y+4	; 0x04
    215e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2162:	dc 01       	movw	r26, r24
    2164:	cb 01       	movw	r24, r22
}
    2166:	0f 90       	pop	r0
    2168:	0f 90       	pop	r0
    216a:	0f 90       	pop	r0
    216c:	0f 90       	pop	r0
    216e:	0f 90       	pop	r0
    2170:	cf 91       	pop	r28
    2172:	df 91       	pop	r29
    2174:	08 95       	ret

00002176 <LED_init>:
#include "LED_interface.h"



void LED_init(u8 PORTID,u8 PINID)
{
    2176:	df 93       	push	r29
    2178:	cf 93       	push	r28
    217a:	00 d0       	rcall	.+0      	; 0x217c <LED_init+0x6>
    217c:	cd b7       	in	r28, 0x3d	; 61
    217e:	de b7       	in	r29, 0x3e	; 62
    2180:	89 83       	std	Y+1, r24	; 0x01
    2182:	6a 83       	std	Y+2, r22	; 0x02
	DIO_vidSetPinDirection(PORTID, PINID, DIO_OUTPUT);
    2184:	89 81       	ldd	r24, Y+1	; 0x01
    2186:	6a 81       	ldd	r22, Y+2	; 0x02
    2188:	41 e0       	ldi	r20, 0x01	; 1
    218a:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <DIO_vidSetPinDirection>
}
    218e:	0f 90       	pop	r0
    2190:	0f 90       	pop	r0
    2192:	cf 91       	pop	r28
    2194:	df 91       	pop	r29
    2196:	08 95       	ret

00002198 <LED_on>:



void LED_on(u8 PORTID,u8 PINID)
{
    2198:	df 93       	push	r29
    219a:	cf 93       	push	r28
    219c:	00 d0       	rcall	.+0      	; 0x219e <LED_on+0x6>
    219e:	cd b7       	in	r28, 0x3d	; 61
    21a0:	de b7       	in	r29, 0x3e	; 62
    21a2:	89 83       	std	Y+1, r24	; 0x01
    21a4:	6a 83       	std	Y+2, r22	; 0x02
	DIO_vidSetPinValue(PORTID, PINID, DIO_HIGH);
    21a6:	89 81       	ldd	r24, Y+1	; 0x01
    21a8:	6a 81       	ldd	r22, Y+2	; 0x02
    21aa:	41 e0       	ldi	r20, 0x01	; 1
    21ac:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <DIO_vidSetPinValue>
}
    21b0:	0f 90       	pop	r0
    21b2:	0f 90       	pop	r0
    21b4:	cf 91       	pop	r28
    21b6:	df 91       	pop	r29
    21b8:	08 95       	ret

000021ba <LED_off>:



void LED_off(u8 PORTID,u8 PINID)
{
    21ba:	df 93       	push	r29
    21bc:	cf 93       	push	r28
    21be:	00 d0       	rcall	.+0      	; 0x21c0 <LED_off+0x6>
    21c0:	cd b7       	in	r28, 0x3d	; 61
    21c2:	de b7       	in	r29, 0x3e	; 62
    21c4:	89 83       	std	Y+1, r24	; 0x01
    21c6:	6a 83       	std	Y+2, r22	; 0x02
	DIO_vidSetPinValue(PORTID, PINID, DIO_LOW);
    21c8:	89 81       	ldd	r24, Y+1	; 0x01
    21ca:	6a 81       	ldd	r22, Y+2	; 0x02
    21cc:	40 e0       	ldi	r20, 0x00	; 0
    21ce:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <DIO_vidSetPinValue>
}
    21d2:	0f 90       	pop	r0
    21d4:	0f 90       	pop	r0
    21d6:	cf 91       	pop	r28
    21d8:	df 91       	pop	r29
    21da:	08 95       	ret

000021dc <LED_toggle>:



void LED_toggle(u8 PORTID,u8 PINID)
{
    21dc:	df 93       	push	r29
    21de:	cf 93       	push	r28
    21e0:	00 d0       	rcall	.+0      	; 0x21e2 <LED_toggle+0x6>
    21e2:	cd b7       	in	r28, 0x3d	; 61
    21e4:	de b7       	in	r29, 0x3e	; 62
    21e6:	89 83       	std	Y+1, r24	; 0x01
    21e8:	6a 83       	std	Y+2, r22	; 0x02
	if(DIO_u8GetPinValue(PORTID, PINID)==DIO_HIGH)
    21ea:	89 81       	ldd	r24, Y+1	; 0x01
    21ec:	6a 81       	ldd	r22, Y+2	; 0x02
    21ee:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <DIO_u8GetPinValue>
    21f2:	81 30       	cpi	r24, 0x01	; 1
    21f4:	29 f4       	brne	.+10     	; 0x2200 <LED_toggle+0x24>
	{
		LED_off(PORTID, PINID);
    21f6:	89 81       	ldd	r24, Y+1	; 0x01
    21f8:	6a 81       	ldd	r22, Y+2	; 0x02
    21fa:	0e 94 dd 10 	call	0x21ba	; 0x21ba <LED_off>
    21fe:	0a c0       	rjmp	.+20     	; 0x2214 <LED_toggle+0x38>
	}
	else if(DIO_u8GetPinValue(PORTID, PINID)==DIO_LOW)
    2200:	89 81       	ldd	r24, Y+1	; 0x01
    2202:	6a 81       	ldd	r22, Y+2	; 0x02
    2204:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <DIO_u8GetPinValue>
    2208:	88 23       	and	r24, r24
    220a:	21 f4       	brne	.+8      	; 0x2214 <LED_toggle+0x38>
	{
		LED_on(PORTID, PINID);
    220c:	89 81       	ldd	r24, Y+1	; 0x01
    220e:	6a 81       	ldd	r22, Y+2	; 0x02
    2210:	0e 94 cc 10 	call	0x2198	; 0x2198 <LED_on>
	}
	else
	{

	}
}
    2214:	0f 90       	pop	r0
    2216:	0f 90       	pop	r0
    2218:	cf 91       	pop	r28
    221a:	df 91       	pop	r29
    221c:	08 95       	ret

0000221e <HEAT_INIT>:




void HEAT_INIT(void)
{
    221e:	df 93       	push	r29
    2220:	cf 93       	push	r28
    2222:	cd b7       	in	r28, 0x3d	; 61
    2224:	de b7       	in	r29, 0x3e	; 62
	DIO_vidSetPinDirection(HEAT_PORT, HEAT_PIN, DIO_OUTPUT);
    2226:	82 e0       	ldi	r24, 0x02	; 2
    2228:	62 e0       	ldi	r22, 0x02	; 2
    222a:	41 e0       	ldi	r20, 0x01	; 1
    222c:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <DIO_vidSetPinDirection>
}
    2230:	cf 91       	pop	r28
    2232:	df 91       	pop	r29
    2234:	08 95       	ret

00002236 <HEAT_START>:
void HEAT_START(void)
{
    2236:	df 93       	push	r29
    2238:	cf 93       	push	r28
    223a:	cd b7       	in	r28, 0x3d	; 61
    223c:	de b7       	in	r29, 0x3e	; 62
	DIO_vidSetPinValue(HEAT_PORT, HEAT_PIN, DIO_HIGH);
    223e:	82 e0       	ldi	r24, 0x02	; 2
    2240:	62 e0       	ldi	r22, 0x02	; 2
    2242:	41 e0       	ldi	r20, 0x01	; 1
    2244:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <DIO_vidSetPinValue>
}
    2248:	cf 91       	pop	r28
    224a:	df 91       	pop	r29
    224c:	08 95       	ret

0000224e <HEAT_STOP>:
void HEAT_STOP(void)
{
    224e:	df 93       	push	r29
    2250:	cf 93       	push	r28
    2252:	cd b7       	in	r28, 0x3d	; 61
    2254:	de b7       	in	r29, 0x3e	; 62
	DIO_vidSetPinValue(HEAT_PORT, HEAT_PIN, DIO_LOW);
    2256:	82 e0       	ldi	r24, 0x02	; 2
    2258:	62 e0       	ldi	r22, 0x02	; 2
    225a:	40 e0       	ldi	r20, 0x00	; 0
    225c:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <DIO_vidSetPinValue>
}
    2260:	cf 91       	pop	r28
    2262:	df 91       	pop	r29
    2264:	08 95       	ret

00002266 <COOL_INIT>:

void COOL_INIT(void)
{
    2266:	df 93       	push	r29
    2268:	cf 93       	push	r28
    226a:	cd b7       	in	r28, 0x3d	; 61
    226c:	de b7       	in	r29, 0x3e	; 62
	DIO_vidSetPinDirection(COOL_PORT, COOL_PIN, DIO_OUTPUT);
    226e:	82 e0       	ldi	r24, 0x02	; 2
    2270:	63 e0       	ldi	r22, 0x03	; 3
    2272:	41 e0       	ldi	r20, 0x01	; 1
    2274:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <DIO_vidSetPinDirection>
}
    2278:	cf 91       	pop	r28
    227a:	df 91       	pop	r29
    227c:	08 95       	ret

0000227e <COOL_START>:
void COOL_START(void)
{
    227e:	df 93       	push	r29
    2280:	cf 93       	push	r28
    2282:	cd b7       	in	r28, 0x3d	; 61
    2284:	de b7       	in	r29, 0x3e	; 62
	DIO_vidSetPinValue(COOL_PORT, COOL_PIN, DIO_HIGH);
    2286:	82 e0       	ldi	r24, 0x02	; 2
    2288:	63 e0       	ldi	r22, 0x03	; 3
    228a:	41 e0       	ldi	r20, 0x01	; 1
    228c:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <DIO_vidSetPinValue>
}
    2290:	cf 91       	pop	r28
    2292:	df 91       	pop	r29
    2294:	08 95       	ret

00002296 <COOL_STOP>:
void COOL_STOP(void)
{
    2296:	df 93       	push	r29
    2298:	cf 93       	push	r28
    229a:	cd b7       	in	r28, 0x3d	; 61
    229c:	de b7       	in	r29, 0x3e	; 62
	DIO_vidSetPinValue(COOL_PORT, COOL_PIN, DIO_LOW);
    229e:	82 e0       	ldi	r24, 0x02	; 2
    22a0:	63 e0       	ldi	r22, 0x03	; 3
    22a2:	40 e0       	ldi	r20, 0x00	; 0
    22a4:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <DIO_vidSetPinValue>
}
    22a8:	cf 91       	pop	r28
    22aa:	df 91       	pop	r29
    22ac:	08 95       	ret

000022ae <State_led_INIT>:

void State_led_INIT(void)
{
    22ae:	df 93       	push	r29
    22b0:	cf 93       	push	r28
    22b2:	cd b7       	in	r28, 0x3d	; 61
    22b4:	de b7       	in	r29, 0x3e	; 62
	DIO_vidSetPinDirection(STATE_LED_PORT, STATE_LED_PORT, DIO_OUTPUT);
    22b6:	82 e0       	ldi	r24, 0x02	; 2
    22b8:	62 e0       	ldi	r22, 0x02	; 2
    22ba:	41 e0       	ldi	r20, 0x01	; 1
    22bc:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <DIO_vidSetPinDirection>
}
    22c0:	cf 91       	pop	r28
    22c2:	df 91       	pop	r29
    22c4:	08 95       	ret

000022c6 <State_led_start>:
void State_led_start(void)
{
    22c6:	df 93       	push	r29
    22c8:	cf 93       	push	r28
    22ca:	cd b7       	in	r28, 0x3d	; 61
    22cc:	de b7       	in	r29, 0x3e	; 62
	DIO_vidSetPinValue(STATE_LED_PORT, STATE_LED_PIN, DIO_HIGH);
    22ce:	82 e0       	ldi	r24, 0x02	; 2
    22d0:	64 e0       	ldi	r22, 0x04	; 4
    22d2:	41 e0       	ldi	r20, 0x01	; 1
    22d4:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <DIO_vidSetPinValue>
}
    22d8:	cf 91       	pop	r28
    22da:	df 91       	pop	r29
    22dc:	08 95       	ret

000022de <State_led_stop>:
void State_led_stop(void)
{
    22de:	df 93       	push	r29
    22e0:	cf 93       	push	r28
    22e2:	cd b7       	in	r28, 0x3d	; 61
    22e4:	de b7       	in	r29, 0x3e	; 62
	DIO_vidSetPinValue(STATE_LED_PORT, STATE_LED_PIN, DIO_LOW);
    22e6:	82 e0       	ldi	r24, 0x02	; 2
    22e8:	64 e0       	ldi	r22, 0x04	; 4
    22ea:	40 e0       	ldi	r20, 0x00	; 0
    22ec:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <DIO_vidSetPinValue>
}
    22f0:	cf 91       	pop	r28
    22f2:	df 91       	pop	r29
    22f4:	08 95       	ret

000022f6 <State_led_tog>:

void State_led_tog(void)
{
    22f6:	df 93       	push	r29
    22f8:	cf 93       	push	r28
    22fa:	cd b7       	in	r28, 0x3d	; 61
    22fc:	de b7       	in	r29, 0x3e	; 62
    22fe:	2e 97       	sbiw	r28, 0x0e	; 14
    2300:	0f b6       	in	r0, 0x3f	; 63
    2302:	f8 94       	cli
    2304:	de bf       	out	0x3e, r29	; 62
    2306:	0f be       	out	0x3f, r0	; 63
    2308:	cd bf       	out	0x3d, r28	; 61
	DIO_vidSetPinValue(STATE_LED_PORT, STATE_LED_PIN, DIO_HIGH);
    230a:	82 e0       	ldi	r24, 0x02	; 2
    230c:	64 e0       	ldi	r22, 0x04	; 4
    230e:	41 e0       	ldi	r20, 0x01	; 1
    2310:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <DIO_vidSetPinValue>
    2314:	80 e0       	ldi	r24, 0x00	; 0
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	aa e7       	ldi	r26, 0x7A	; 122
    231a:	b4 e4       	ldi	r27, 0x44	; 68
    231c:	8b 87       	std	Y+11, r24	; 0x0b
    231e:	9c 87       	std	Y+12, r25	; 0x0c
    2320:	ad 87       	std	Y+13, r26	; 0x0d
    2322:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2324:	6b 85       	ldd	r22, Y+11	; 0x0b
    2326:	7c 85       	ldd	r23, Y+12	; 0x0c
    2328:	8d 85       	ldd	r24, Y+13	; 0x0d
    232a:	9e 85       	ldd	r25, Y+14	; 0x0e
    232c:	20 e0       	ldi	r18, 0x00	; 0
    232e:	30 e0       	ldi	r19, 0x00	; 0
    2330:	4a e7       	ldi	r20, 0x7A	; 122
    2332:	53 e4       	ldi	r21, 0x43	; 67
    2334:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2338:	dc 01       	movw	r26, r24
    233a:	cb 01       	movw	r24, r22
    233c:	8f 83       	std	Y+7, r24	; 0x07
    233e:	98 87       	std	Y+8, r25	; 0x08
    2340:	a9 87       	std	Y+9, r26	; 0x09
    2342:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2344:	6f 81       	ldd	r22, Y+7	; 0x07
    2346:	78 85       	ldd	r23, Y+8	; 0x08
    2348:	89 85       	ldd	r24, Y+9	; 0x09
    234a:	9a 85       	ldd	r25, Y+10	; 0x0a
    234c:	20 e0       	ldi	r18, 0x00	; 0
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	40 e8       	ldi	r20, 0x80	; 128
    2352:	5f e3       	ldi	r21, 0x3F	; 63
    2354:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2358:	88 23       	and	r24, r24
    235a:	2c f4       	brge	.+10     	; 0x2366 <State_led_tog+0x70>
		__ticks = 1;
    235c:	81 e0       	ldi	r24, 0x01	; 1
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	9e 83       	std	Y+6, r25	; 0x06
    2362:	8d 83       	std	Y+5, r24	; 0x05
    2364:	3f c0       	rjmp	.+126    	; 0x23e4 <State_led_tog+0xee>
	else if (__tmp > 65535)
    2366:	6f 81       	ldd	r22, Y+7	; 0x07
    2368:	78 85       	ldd	r23, Y+8	; 0x08
    236a:	89 85       	ldd	r24, Y+9	; 0x09
    236c:	9a 85       	ldd	r25, Y+10	; 0x0a
    236e:	20 e0       	ldi	r18, 0x00	; 0
    2370:	3f ef       	ldi	r19, 0xFF	; 255
    2372:	4f e7       	ldi	r20, 0x7F	; 127
    2374:	57 e4       	ldi	r21, 0x47	; 71
    2376:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    237a:	18 16       	cp	r1, r24
    237c:	4c f5       	brge	.+82     	; 0x23d0 <State_led_tog+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    237e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2380:	7c 85       	ldd	r23, Y+12	; 0x0c
    2382:	8d 85       	ldd	r24, Y+13	; 0x0d
    2384:	9e 85       	ldd	r25, Y+14	; 0x0e
    2386:	20 e0       	ldi	r18, 0x00	; 0
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	40 e2       	ldi	r20, 0x20	; 32
    238c:	51 e4       	ldi	r21, 0x41	; 65
    238e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2392:	dc 01       	movw	r26, r24
    2394:	cb 01       	movw	r24, r22
    2396:	bc 01       	movw	r22, r24
    2398:	cd 01       	movw	r24, r26
    239a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    239e:	dc 01       	movw	r26, r24
    23a0:	cb 01       	movw	r24, r22
    23a2:	9e 83       	std	Y+6, r25	; 0x06
    23a4:	8d 83       	std	Y+5, r24	; 0x05
    23a6:	0f c0       	rjmp	.+30     	; 0x23c6 <State_led_tog+0xd0>
    23a8:	89 e1       	ldi	r24, 0x19	; 25
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	9c 83       	std	Y+4, r25	; 0x04
    23ae:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23b0:	8b 81       	ldd	r24, Y+3	; 0x03
    23b2:	9c 81       	ldd	r25, Y+4	; 0x04
    23b4:	01 97       	sbiw	r24, 0x01	; 1
    23b6:	f1 f7       	brne	.-4      	; 0x23b4 <State_led_tog+0xbe>
    23b8:	9c 83       	std	Y+4, r25	; 0x04
    23ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23bc:	8d 81       	ldd	r24, Y+5	; 0x05
    23be:	9e 81       	ldd	r25, Y+6	; 0x06
    23c0:	01 97       	sbiw	r24, 0x01	; 1
    23c2:	9e 83       	std	Y+6, r25	; 0x06
    23c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23c6:	8d 81       	ldd	r24, Y+5	; 0x05
    23c8:	9e 81       	ldd	r25, Y+6	; 0x06
    23ca:	00 97       	sbiw	r24, 0x00	; 0
    23cc:	69 f7       	brne	.-38     	; 0x23a8 <State_led_tog+0xb2>
    23ce:	14 c0       	rjmp	.+40     	; 0x23f8 <State_led_tog+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23d0:	6f 81       	ldd	r22, Y+7	; 0x07
    23d2:	78 85       	ldd	r23, Y+8	; 0x08
    23d4:	89 85       	ldd	r24, Y+9	; 0x09
    23d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    23d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23dc:	dc 01       	movw	r26, r24
    23de:	cb 01       	movw	r24, r22
    23e0:	9e 83       	std	Y+6, r25	; 0x06
    23e2:	8d 83       	std	Y+5, r24	; 0x05
    23e4:	8d 81       	ldd	r24, Y+5	; 0x05
    23e6:	9e 81       	ldd	r25, Y+6	; 0x06
    23e8:	9a 83       	std	Y+2, r25	; 0x02
    23ea:	89 83       	std	Y+1, r24	; 0x01
    23ec:	89 81       	ldd	r24, Y+1	; 0x01
    23ee:	9a 81       	ldd	r25, Y+2	; 0x02
    23f0:	01 97       	sbiw	r24, 0x01	; 1
    23f2:	f1 f7       	brne	.-4      	; 0x23f0 <State_led_tog+0xfa>
    23f4:	9a 83       	std	Y+2, r25	; 0x02
    23f6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	DIO_vidSetPinValue(STATE_LED_PORT, STATE_LED_PIN, DIO_LOW);
    23f8:	82 e0       	ldi	r24, 0x02	; 2
    23fa:	64 e0       	ldi	r22, 0x04	; 4
    23fc:	40 e0       	ldi	r20, 0x00	; 0
    23fe:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <DIO_vidSetPinValue>
}
    2402:	2e 96       	adiw	r28, 0x0e	; 14
    2404:	0f b6       	in	r0, 0x3f	; 63
    2406:	f8 94       	cli
    2408:	de bf       	out	0x3e, r29	; 62
    240a:	0f be       	out	0x3f, r0	; 63
    240c:	cd bf       	out	0x3d, r28	; 61
    240e:	cf 91       	pop	r28
    2410:	df 91       	pop	r29
    2412:	08 95       	ret

00002414 <getState>:


u8 getState(void)
{
    2414:	df 93       	push	r29
    2416:	cf 93       	push	r28
    2418:	0f 92       	push	r0
    241a:	cd b7       	in	r28, 0x3d	; 61
    241c:	de b7       	in	r29, 0x3e	; 62
	if (DIO_u8GetPinValue(HEAT_PORT, HEAT_PIN)==DIO_HIGH)
    241e:	82 e0       	ldi	r24, 0x02	; 2
    2420:	62 e0       	ldi	r22, 0x02	; 2
    2422:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <DIO_u8GetPinValue>
    2426:	81 30       	cpi	r24, 0x01	; 1
    2428:	19 f4       	brne	.+6      	; 0x2430 <getState+0x1c>
	{
		return HEAT_ON;
    242a:	81 e0       	ldi	r24, 0x01	; 1
    242c:	89 83       	std	Y+1, r24	; 0x01
    242e:	0a c0       	rjmp	.+20     	; 0x2444 <getState+0x30>
	}
	else if (DIO_u8GetPinValue(COOL_PORT, COOL_PIN)==DIO_HIGH)
    2430:	82 e0       	ldi	r24, 0x02	; 2
    2432:	63 e0       	ldi	r22, 0x03	; 3
    2434:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <DIO_u8GetPinValue>
    2438:	81 30       	cpi	r24, 0x01	; 1
    243a:	19 f4       	brne	.+6      	; 0x2442 <getState+0x2e>
	{
		return COOL_ON;
    243c:	82 e0       	ldi	r24, 0x02	; 2
    243e:	89 83       	std	Y+1, r24	; 0x01
    2440:	01 c0       	rjmp	.+2      	; 0x2444 <getState+0x30>
	}
	else
	{
		return BOTH_OFF;
    2442:	19 82       	std	Y+1, r1	; 0x01
    2444:	89 81       	ldd	r24, Y+1	; 0x01
	}
}
    2446:	0f 90       	pop	r0
    2448:	cf 91       	pop	r28
    244a:	df 91       	pop	r29
    244c:	08 95       	ret

0000244e <EEPROM_init>:

#include "EEPROM_interface.h"

void EEPROM_init(void)
{
    244e:	df 93       	push	r29
    2450:	cf 93       	push	r28
    2452:	cd b7       	in	r28, 0x3d	; 61
    2454:	de b7       	in	r29, 0x3e	; 62
	TWI_Init();
    2456:	0e 94 8d 09 	call	0x131a	; 0x131a <TWI_Init>
}
    245a:	cf 91       	pop	r28
    245c:	df 91       	pop	r29
    245e:	08 95       	ret

00002460 <EEPROM_WRITE>:

void EEPROM_WRITE(u16 Address ,u8 Data)
{
    2460:	df 93       	push	r29
    2462:	cf 93       	push	r28
    2464:	00 d0       	rcall	.+0      	; 0x2466 <EEPROM_WRITE+0x6>
    2466:	0f 92       	push	r0
    2468:	cd b7       	in	r28, 0x3d	; 61
    246a:	de b7       	in	r29, 0x3e	; 62
    246c:	9a 83       	std	Y+2, r25	; 0x02
    246e:	89 83       	std	Y+1, r24	; 0x01
    2470:	6b 83       	std	Y+3, r22	; 0x03
	 TWI_Start();
    2472:	0e 94 a3 09 	call	0x1346	; 0x1346 <TWI_Start>
	 TWI_Write((unsigned char)(0xA0 | ((Address & 0x0700)>>7)));
    2476:	89 81       	ldd	r24, Y+1	; 0x01
    2478:	9a 81       	ldd	r25, Y+2	; 0x02
    247a:	80 70       	andi	r24, 0x00	; 0
    247c:	97 70       	andi	r25, 0x07	; 7
    247e:	88 0f       	add	r24, r24
    2480:	89 2f       	mov	r24, r25
    2482:	88 1f       	adc	r24, r24
    2484:	99 0b       	sbc	r25, r25
    2486:	91 95       	neg	r25
    2488:	80 6a       	ori	r24, 0xA0	; 160
    248a:	0e 94 be 09 	call	0x137c	; 0x137c <TWI_Write>
	 TWI_Write((unsigned char)(Address));
    248e:	89 81       	ldd	r24, Y+1	; 0x01
    2490:	0e 94 be 09 	call	0x137c	; 0x137c <TWI_Write>
	 TWI_Write(Data);
    2494:	8b 81       	ldd	r24, Y+3	; 0x03
    2496:	0e 94 be 09 	call	0x137c	; 0x137c <TWI_Write>
	 TWI_Stop();
    249a:	0e 94 b3 09 	call	0x1366	; 0x1366 <TWI_Stop>
}
    249e:	0f 90       	pop	r0
    24a0:	0f 90       	pop	r0
    24a2:	0f 90       	pop	r0
    24a4:	cf 91       	pop	r28
    24a6:	df 91       	pop	r29
    24a8:	08 95       	ret

000024aa <EEPROM_READ>:

void EEPROM_READ(u16 Address ,u8 *Data)
{
    24aa:	df 93       	push	r29
    24ac:	cf 93       	push	r28
    24ae:	00 d0       	rcall	.+0      	; 0x24b0 <EEPROM_READ+0x6>
    24b0:	00 d0       	rcall	.+0      	; 0x24b2 <EEPROM_READ+0x8>
    24b2:	cd b7       	in	r28, 0x3d	; 61
    24b4:	de b7       	in	r29, 0x3e	; 62
    24b6:	9a 83       	std	Y+2, r25	; 0x02
    24b8:	89 83       	std	Y+1, r24	; 0x01
    24ba:	7c 83       	std	Y+4, r23	; 0x04
    24bc:	6b 83       	std	Y+3, r22	; 0x03
	 TWI_Start();
    24be:	0e 94 a3 09 	call	0x1346	; 0x1346 <TWI_Start>
	 TWI_Write((unsigned char)((0xA0) | ((Address & 0x0700)>>7)));
    24c2:	89 81       	ldd	r24, Y+1	; 0x01
    24c4:	9a 81       	ldd	r25, Y+2	; 0x02
    24c6:	80 70       	andi	r24, 0x00	; 0
    24c8:	97 70       	andi	r25, 0x07	; 7
    24ca:	88 0f       	add	r24, r24
    24cc:	89 2f       	mov	r24, r25
    24ce:	88 1f       	adc	r24, r24
    24d0:	99 0b       	sbc	r25, r25
    24d2:	91 95       	neg	r25
    24d4:	80 6a       	ori	r24, 0xA0	; 160
    24d6:	0e 94 be 09 	call	0x137c	; 0x137c <TWI_Write>
	 TWI_Write((unsigned char)(Address));
    24da:	89 81       	ldd	r24, Y+1	; 0x01
    24dc:	0e 94 be 09 	call	0x137c	; 0x137c <TWI_Write>
	 TWI_Start();
    24e0:	0e 94 a3 09 	call	0x1346	; 0x1346 <TWI_Start>

     TWI_Write((unsigned char)((0xA0) | ((Address & 0x0700)>>7) | 1));
    24e4:	89 81       	ldd	r24, Y+1	; 0x01
    24e6:	9a 81       	ldd	r25, Y+2	; 0x02
    24e8:	80 70       	andi	r24, 0x00	; 0
    24ea:	97 70       	andi	r25, 0x07	; 7
    24ec:	88 0f       	add	r24, r24
    24ee:	89 2f       	mov	r24, r25
    24f0:	88 1f       	adc	r24, r24
    24f2:	99 0b       	sbc	r25, r25
    24f4:	91 95       	neg	r25
    24f6:	81 6a       	ori	r24, 0xA1	; 161
    24f8:	0e 94 be 09 	call	0x137c	; 0x137c <TWI_Write>

	 *Data = TWI_Read_With_NACK();
    24fc:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <TWI_Read_With_NACK>
    2500:	eb 81       	ldd	r30, Y+3	; 0x03
    2502:	fc 81       	ldd	r31, Y+4	; 0x04
    2504:	80 83       	st	Z, r24

	   TWI_Stop();
    2506:	0e 94 b3 09 	call	0x1366	; 0x1366 <TWI_Stop>
}
    250a:	0f 90       	pop	r0
    250c:	0f 90       	pop	r0
    250e:	0f 90       	pop	r0
    2510:	0f 90       	pop	r0
    2512:	cf 91       	pop	r28
    2514:	df 91       	pop	r29
    2516:	08 95       	ret

00002518 <button_init>:
#include "Button_interface.h"



void button_init(u8 PORTID,u8 PINID,u8 mode)
{
    2518:	df 93       	push	r29
    251a:	cf 93       	push	r28
    251c:	00 d0       	rcall	.+0      	; 0x251e <button_init+0x6>
    251e:	0f 92       	push	r0
    2520:	cd b7       	in	r28, 0x3d	; 61
    2522:	de b7       	in	r29, 0x3e	; 62
    2524:	89 83       	std	Y+1, r24	; 0x01
    2526:	6a 83       	std	Y+2, r22	; 0x02
    2528:	4b 83       	std	Y+3, r20	; 0x03
	if (mode == PULL_UP)
    252a:	8b 81       	ldd	r24, Y+3	; 0x03
    252c:	88 23       	and	r24, r24
    252e:	59 f4       	brne	.+22     	; 0x2546 <button_init+0x2e>
	{
DIO_vidSetPinDirection(PORTID, PINID, DIO_INPUT);
    2530:	89 81       	ldd	r24, Y+1	; 0x01
    2532:	6a 81       	ldd	r22, Y+2	; 0x02
    2534:	40 e0       	ldi	r20, 0x00	; 0
    2536:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <DIO_vidSetPinDirection>
DIO_vidSetPinValue(PORTID, PINID, DIO_PULL_UP);
    253a:	89 81       	ldd	r24, Y+1	; 0x01
    253c:	6a 81       	ldd	r22, Y+2	; 0x02
    253e:	41 e0       	ldi	r20, 0x01	; 1
    2540:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <DIO_vidSetPinValue>
    2544:	0d c0       	rjmp	.+26     	; 0x2560 <button_init+0x48>

	}
	else if (mode == PULL_DOWN)
    2546:	8b 81       	ldd	r24, Y+3	; 0x03
    2548:	81 30       	cpi	r24, 0x01	; 1
    254a:	51 f4       	brne	.+20     	; 0x2560 <button_init+0x48>
	{
		DIO_vidSetPinDirection(PORTID, PINID, DIO_INPUT);
    254c:	89 81       	ldd	r24, Y+1	; 0x01
    254e:	6a 81       	ldd	r22, Y+2	; 0x02
    2550:	40 e0       	ldi	r20, 0x00	; 0
    2552:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <DIO_vidSetPinDirection>
		DIO_vidSetPinValue(PORTID, PINID, DIO_FLOAT);
    2556:	89 81       	ldd	r24, Y+1	; 0x01
    2558:	6a 81       	ldd	r22, Y+2	; 0x02
    255a:	40 e0       	ldi	r20, 0x00	; 0
    255c:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <DIO_vidSetPinValue>
	else
	{

	}
	
}
    2560:	0f 90       	pop	r0
    2562:	0f 90       	pop	r0
    2564:	0f 90       	pop	r0
    2566:	cf 91       	pop	r28
    2568:	df 91       	pop	r29
    256a:	08 95       	ret

0000256c <button_state>:



u8 button_state(u8 PORTID,u8 PINID)
{
    256c:	df 93       	push	r29
    256e:	cf 93       	push	r28
    2570:	00 d0       	rcall	.+0      	; 0x2572 <button_state+0x6>
    2572:	cd b7       	in	r28, 0x3d	; 61
    2574:	de b7       	in	r29, 0x3e	; 62
    2576:	89 83       	std	Y+1, r24	; 0x01
    2578:	6a 83       	std	Y+2, r22	; 0x02
	return DIO_u8GetPinValue(PORTID, PINID);
    257a:	89 81       	ldd	r24, Y+1	; 0x01
    257c:	6a 81       	ldd	r22, Y+2	; 0x02
    257e:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <DIO_u8GetPinValue>

}
    2582:	0f 90       	pop	r0
    2584:	0f 90       	pop	r0
    2586:	cf 91       	pop	r28
    2588:	df 91       	pop	r29
    258a:	08 95       	ret

0000258c <Seven_segment_enable>:
#include "Seven_Segment.h"



void Seven_segment_enable(u8 Segment)
{
    258c:	df 93       	push	r29
    258e:	cf 93       	push	r28
    2590:	0f 92       	push	r0
    2592:	cd b7       	in	r28, 0x3d	; 61
    2594:	de b7       	in	r29, 0x3e	; 62
    2596:	89 83       	std	Y+1, r24	; 0x01
	if (Segment == TENS)
    2598:	89 81       	ldd	r24, Y+1	; 0x01
    259a:	81 30       	cpi	r24, 0x01	; 1
    259c:	59 f4       	brne	.+22     	; 0x25b4 <Seven_segment_enable+0x28>
	{

		DIO_vidSetPinDirection(DIO_GROUP_B, DIO_PIN_3, DIO_OUTPUT);
    259e:	81 e0       	ldi	r24, 0x01	; 1
    25a0:	63 e0       	ldi	r22, 0x03	; 3
    25a2:	41 e0       	ldi	r20, 0x01	; 1
    25a4:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <DIO_vidSetPinDirection>
		DIO_vidSetPinValue(DIO_GROUP_B, DIO_PIN_3, DIO_HIGH);
    25a8:	81 e0       	ldi	r24, 0x01	; 1
    25aa:	63 e0       	ldi	r22, 0x03	; 3
    25ac:	41 e0       	ldi	r20, 0x01	; 1
    25ae:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <DIO_vidSetPinValue>
    25b2:	0d c0       	rjmp	.+26     	; 0x25ce <Seven_segment_enable+0x42>

	}
	else if (Segment == UNIT)
    25b4:	89 81       	ldd	r24, Y+1	; 0x01
    25b6:	88 23       	and	r24, r24
    25b8:	51 f4       	brne	.+20     	; 0x25ce <Seven_segment_enable+0x42>
	{

		DIO_vidSetPinDirection(DIO_GROUP_B, DIO_PIN_1, DIO_OUTPUT);
    25ba:	81 e0       	ldi	r24, 0x01	; 1
    25bc:	61 e0       	ldi	r22, 0x01	; 1
    25be:	41 e0       	ldi	r20, 0x01	; 1
    25c0:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <DIO_vidSetPinDirection>
		DIO_vidSetPinValue(DIO_GROUP_B, DIO_PIN_1, DIO_HIGH);
    25c4:	81 e0       	ldi	r24, 0x01	; 1
    25c6:	61 e0       	ldi	r22, 0x01	; 1
    25c8:	41 e0       	ldi	r20, 0x01	; 1
    25ca:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <DIO_vidSetPinValue>

	}
}
    25ce:	0f 90       	pop	r0
    25d0:	cf 91       	pop	r28
    25d2:	df 91       	pop	r29
    25d4:	08 95       	ret

000025d6 <Seven_segment_disable>:


void Seven_segment_disable(u8 Segment)
{
    25d6:	df 93       	push	r29
    25d8:	cf 93       	push	r28
    25da:	0f 92       	push	r0
    25dc:	cd b7       	in	r28, 0x3d	; 61
    25de:	de b7       	in	r29, 0x3e	; 62
    25e0:	89 83       	std	Y+1, r24	; 0x01
	if (Segment == TENS)
    25e2:	89 81       	ldd	r24, Y+1	; 0x01
    25e4:	81 30       	cpi	r24, 0x01	; 1
    25e6:	59 f4       	brne	.+22     	; 0x25fe <Seven_segment_disable+0x28>
	{

		DIO_vidSetPinDirection(DIO_GROUP_B, DIO_PIN_3, DIO_OUTPUT);
    25e8:	81 e0       	ldi	r24, 0x01	; 1
    25ea:	63 e0       	ldi	r22, 0x03	; 3
    25ec:	41 e0       	ldi	r20, 0x01	; 1
    25ee:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <DIO_vidSetPinDirection>
		DIO_vidSetPinValue(DIO_GROUP_B, DIO_PIN_3, DIO_LOW);
    25f2:	81 e0       	ldi	r24, 0x01	; 1
    25f4:	63 e0       	ldi	r22, 0x03	; 3
    25f6:	40 e0       	ldi	r20, 0x00	; 0
    25f8:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <DIO_vidSetPinValue>
    25fc:	0d c0       	rjmp	.+26     	; 0x2618 <Seven_segment_disable+0x42>

	}
	else if (Segment == UNIT)
    25fe:	89 81       	ldd	r24, Y+1	; 0x01
    2600:	88 23       	and	r24, r24
    2602:	51 f4       	brne	.+20     	; 0x2618 <Seven_segment_disable+0x42>
	{
		DIO_vidSetPinDirection(DIO_GROUP_B, DIO_PIN_1, DIO_OUTPUT);
    2604:	81 e0       	ldi	r24, 0x01	; 1
    2606:	61 e0       	ldi	r22, 0x01	; 1
    2608:	41 e0       	ldi	r20, 0x01	; 1
    260a:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <DIO_vidSetPinDirection>
		DIO_vidSetPinValue(DIO_GROUP_B, DIO_PIN_1, DIO_LOW);
    260e:	81 e0       	ldi	r24, 0x01	; 1
    2610:	61 e0       	ldi	r22, 0x01	; 1
    2612:	40 e0       	ldi	r20, 0x00	; 0
    2614:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <DIO_vidSetPinValue>
	}
}
    2618:	0f 90       	pop	r0
    261a:	cf 91       	pop	r28
    261c:	df 91       	pop	r29
    261e:	08 95       	ret

00002620 <Seven_segment_init>:



void Seven_segment_init(u8 PORTID,u8 type)
{
    2620:	df 93       	push	r29
    2622:	cf 93       	push	r28
    2624:	00 d0       	rcall	.+0      	; 0x2626 <Seven_segment_init+0x6>
    2626:	cd b7       	in	r28, 0x3d	; 61
    2628:	de b7       	in	r29, 0x3e	; 62
    262a:	89 83       	std	Y+1, r24	; 0x01
    262c:	6a 83       	std	Y+2, r22	; 0x02
  if(type == MSB)
    262e:	8a 81       	ldd	r24, Y+2	; 0x02
    2630:	81 30       	cpi	r24, 0x01	; 1
    2632:	a9 f4       	brne	.+42     	; 0x265e <Seven_segment_init+0x3e>
  {
	  DIO_vidSetPinDirection(PORTID, DIO_PIN_4, DIO_OUTPUT);
    2634:	89 81       	ldd	r24, Y+1	; 0x01
    2636:	64 e0       	ldi	r22, 0x04	; 4
    2638:	41 e0       	ldi	r20, 0x01	; 1
    263a:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <DIO_vidSetPinDirection>
	  DIO_vidSetPinDirection(PORTID, DIO_PIN_5, DIO_OUTPUT);
    263e:	89 81       	ldd	r24, Y+1	; 0x01
    2640:	65 e0       	ldi	r22, 0x05	; 5
    2642:	41 e0       	ldi	r20, 0x01	; 1
    2644:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <DIO_vidSetPinDirection>
	  DIO_vidSetPinDirection(PORTID, DIO_PIN_6, DIO_OUTPUT);
    2648:	89 81       	ldd	r24, Y+1	; 0x01
    264a:	66 e0       	ldi	r22, 0x06	; 6
    264c:	41 e0       	ldi	r20, 0x01	; 1
    264e:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <DIO_vidSetPinDirection>
	  DIO_vidSetPinDirection(PORTID, DIO_PIN_7, DIO_OUTPUT);
    2652:	89 81       	ldd	r24, Y+1	; 0x01
    2654:	67 e0       	ldi	r22, 0x07	; 7
    2656:	41 e0       	ldi	r20, 0x01	; 1
    2658:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <DIO_vidSetPinDirection>
    265c:	17 c0       	rjmp	.+46     	; 0x268c <Seven_segment_init+0x6c>
  }
  else if (type == LSB)
    265e:	8a 81       	ldd	r24, Y+2	; 0x02
    2660:	88 23       	and	r24, r24
    2662:	a1 f4       	brne	.+40     	; 0x268c <Seven_segment_init+0x6c>
  {
	  DIO_vidSetPinDirection(PORTID, DIO_PIN_0, DIO_OUTPUT);
    2664:	89 81       	ldd	r24, Y+1	; 0x01
    2666:	60 e0       	ldi	r22, 0x00	; 0
    2668:	41 e0       	ldi	r20, 0x01	; 1
    266a:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <DIO_vidSetPinDirection>
	DIO_vidSetPinDirection(PORTID, DIO_PIN_1, DIO_OUTPUT);
    266e:	89 81       	ldd	r24, Y+1	; 0x01
    2670:	61 e0       	ldi	r22, 0x01	; 1
    2672:	41 e0       	ldi	r20, 0x01	; 1
    2674:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <DIO_vidSetPinDirection>
    DIO_vidSetPinDirection(PORTID, DIO_PIN_2, DIO_OUTPUT);
    2678:	89 81       	ldd	r24, Y+1	; 0x01
    267a:	62 e0       	ldi	r22, 0x02	; 2
    267c:	41 e0       	ldi	r20, 0x01	; 1
    267e:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <DIO_vidSetPinDirection>
	DIO_vidSetPinDirection(PORTID, DIO_PIN_3, DIO_OUTPUT);
    2682:	89 81       	ldd	r24, Y+1	; 0x01
    2684:	63 e0       	ldi	r22, 0x03	; 3
    2686:	41 e0       	ldi	r20, 0x01	; 1
    2688:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <DIO_vidSetPinDirection>
  }
  else
  {

  }
}
    268c:	0f 90       	pop	r0
    268e:	0f 90       	pop	r0
    2690:	cf 91       	pop	r28
    2692:	df 91       	pop	r29
    2694:	08 95       	ret

00002696 <Write_Seven_segment>:



void Write_Seven_segment(u8 PORTID,u8 type, u8 num)
{
    2696:	df 93       	push	r29
    2698:	cf 93       	push	r28
    269a:	cd b7       	in	r28, 0x3d	; 61
    269c:	de b7       	in	r29, 0x3e	; 62
    269e:	27 97       	sbiw	r28, 0x07	; 7
    26a0:	0f b6       	in	r0, 0x3f	; 63
    26a2:	f8 94       	cli
    26a4:	de bf       	out	0x3e, r29	; 62
    26a6:	0f be       	out	0x3f, r0	; 63
    26a8:	cd bf       	out	0x3d, r28	; 61
    26aa:	89 83       	std	Y+1, r24	; 0x01
    26ac:	6a 83       	std	Y+2, r22	; 0x02
    26ae:	4b 83       	std	Y+3, r20	; 0x03
	if(type == MSB)
    26b0:	8a 81       	ldd	r24, Y+2	; 0x02
    26b2:	81 30       	cpi	r24, 0x01	; 1
    26b4:	09 f0       	breq	.+2      	; 0x26b8 <Write_Seven_segment+0x22>
    26b6:	6b c0       	rjmp	.+214    	; 0x278e <Write_Seven_segment+0xf8>
	{
		switch(PORTID)
    26b8:	89 81       	ldd	r24, Y+1	; 0x01
    26ba:	28 2f       	mov	r18, r24
    26bc:	30 e0       	ldi	r19, 0x00	; 0
    26be:	3f 83       	std	Y+7, r19	; 0x07
    26c0:	2e 83       	std	Y+6, r18	; 0x06
    26c2:	8e 81       	ldd	r24, Y+6	; 0x06
    26c4:	9f 81       	ldd	r25, Y+7	; 0x07
    26c6:	81 30       	cpi	r24, 0x01	; 1
    26c8:	91 05       	cpc	r25, r1
    26ca:	41 f1       	breq	.+80     	; 0x271c <Write_Seven_segment+0x86>
    26cc:	2e 81       	ldd	r18, Y+6	; 0x06
    26ce:	3f 81       	ldd	r19, Y+7	; 0x07
    26d0:	22 30       	cpi	r18, 0x02	; 2
    26d2:	31 05       	cpc	r19, r1
    26d4:	2c f4       	brge	.+10     	; 0x26e0 <Write_Seven_segment+0x4a>
    26d6:	8e 81       	ldd	r24, Y+6	; 0x06
    26d8:	9f 81       	ldd	r25, Y+7	; 0x07
    26da:	00 97       	sbiw	r24, 0x00	; 0
    26dc:	61 f0       	breq	.+24     	; 0x26f6 <Write_Seven_segment+0x60>
    26de:	a1 c0       	rjmp	.+322    	; 0x2822 <Write_Seven_segment+0x18c>
    26e0:	2e 81       	ldd	r18, Y+6	; 0x06
    26e2:	3f 81       	ldd	r19, Y+7	; 0x07
    26e4:	22 30       	cpi	r18, 0x02	; 2
    26e6:	31 05       	cpc	r19, r1
    26e8:	61 f1       	breq	.+88     	; 0x2742 <Write_Seven_segment+0xac>
    26ea:	8e 81       	ldd	r24, Y+6	; 0x06
    26ec:	9f 81       	ldd	r25, Y+7	; 0x07
    26ee:	83 30       	cpi	r24, 0x03	; 3
    26f0:	91 05       	cpc	r25, r1
    26f2:	d1 f1       	breq	.+116    	; 0x2768 <Write_Seven_segment+0xd2>
    26f4:	96 c0       	rjmp	.+300    	; 0x2822 <Write_Seven_segment+0x18c>
				{
				case DIO_GROUP_A:
					PORTA=(PORTA & 0x0F) | (num<<4);
    26f6:	ab e3       	ldi	r26, 0x3B	; 59
    26f8:	b0 e0       	ldi	r27, 0x00	; 0
    26fa:	eb e3       	ldi	r30, 0x3B	; 59
    26fc:	f0 e0       	ldi	r31, 0x00	; 0
    26fe:	80 81       	ld	r24, Z
    2700:	28 2f       	mov	r18, r24
    2702:	2f 70       	andi	r18, 0x0F	; 15
    2704:	8b 81       	ldd	r24, Y+3	; 0x03
    2706:	88 2f       	mov	r24, r24
    2708:	90 e0       	ldi	r25, 0x00	; 0
    270a:	82 95       	swap	r24
    270c:	92 95       	swap	r25
    270e:	90 7f       	andi	r25, 0xF0	; 240
    2710:	98 27       	eor	r25, r24
    2712:	80 7f       	andi	r24, 0xF0	; 240
    2714:	98 27       	eor	r25, r24
    2716:	82 2b       	or	r24, r18
    2718:	8c 93       	st	X, r24
    271a:	83 c0       	rjmp	.+262    	; 0x2822 <Write_Seven_segment+0x18c>
					break;
				case DIO_GROUP_B:
					PORTB=(PORTB & 0x0F) | (num<<4);
    271c:	a8 e3       	ldi	r26, 0x38	; 56
    271e:	b0 e0       	ldi	r27, 0x00	; 0
    2720:	e8 e3       	ldi	r30, 0x38	; 56
    2722:	f0 e0       	ldi	r31, 0x00	; 0
    2724:	80 81       	ld	r24, Z
    2726:	28 2f       	mov	r18, r24
    2728:	2f 70       	andi	r18, 0x0F	; 15
    272a:	8b 81       	ldd	r24, Y+3	; 0x03
    272c:	88 2f       	mov	r24, r24
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	82 95       	swap	r24
    2732:	92 95       	swap	r25
    2734:	90 7f       	andi	r25, 0xF0	; 240
    2736:	98 27       	eor	r25, r24
    2738:	80 7f       	andi	r24, 0xF0	; 240
    273a:	98 27       	eor	r25, r24
    273c:	82 2b       	or	r24, r18
    273e:	8c 93       	st	X, r24
    2740:	70 c0       	rjmp	.+224    	; 0x2822 <Write_Seven_segment+0x18c>
					break;
				case DIO_GROUP_C:
					PORTC=(PORTC & 0x0F) | (num<<4);
    2742:	a5 e3       	ldi	r26, 0x35	; 53
    2744:	b0 e0       	ldi	r27, 0x00	; 0
    2746:	e5 e3       	ldi	r30, 0x35	; 53
    2748:	f0 e0       	ldi	r31, 0x00	; 0
    274a:	80 81       	ld	r24, Z
    274c:	28 2f       	mov	r18, r24
    274e:	2f 70       	andi	r18, 0x0F	; 15
    2750:	8b 81       	ldd	r24, Y+3	; 0x03
    2752:	88 2f       	mov	r24, r24
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	82 95       	swap	r24
    2758:	92 95       	swap	r25
    275a:	90 7f       	andi	r25, 0xF0	; 240
    275c:	98 27       	eor	r25, r24
    275e:	80 7f       	andi	r24, 0xF0	; 240
    2760:	98 27       	eor	r25, r24
    2762:	82 2b       	or	r24, r18
    2764:	8c 93       	st	X, r24
    2766:	5d c0       	rjmp	.+186    	; 0x2822 <Write_Seven_segment+0x18c>
					break;
				case DIO_GROUP_D:
					PORTD=(PORTD & 0x0F) | (num<<4);
    2768:	a2 e3       	ldi	r26, 0x32	; 50
    276a:	b0 e0       	ldi	r27, 0x00	; 0
    276c:	e2 e3       	ldi	r30, 0x32	; 50
    276e:	f0 e0       	ldi	r31, 0x00	; 0
    2770:	80 81       	ld	r24, Z
    2772:	28 2f       	mov	r18, r24
    2774:	2f 70       	andi	r18, 0x0F	; 15
    2776:	8b 81       	ldd	r24, Y+3	; 0x03
    2778:	88 2f       	mov	r24, r24
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	82 95       	swap	r24
    277e:	92 95       	swap	r25
    2780:	90 7f       	andi	r25, 0xF0	; 240
    2782:	98 27       	eor	r25, r24
    2784:	80 7f       	andi	r24, 0xF0	; 240
    2786:	98 27       	eor	r25, r24
    2788:	82 2b       	or	r24, r18
    278a:	8c 93       	st	X, r24
    278c:	4a c0       	rjmp	.+148    	; 0x2822 <Write_Seven_segment+0x18c>
					break;
				default:
					break;
				}
	}
	else if (type == LSB)
    278e:	8a 81       	ldd	r24, Y+2	; 0x02
    2790:	88 23       	and	r24, r24
    2792:	09 f0       	breq	.+2      	; 0x2796 <Write_Seven_segment+0x100>
    2794:	46 c0       	rjmp	.+140    	; 0x2822 <Write_Seven_segment+0x18c>
	{
		switch(PORTID)
    2796:	89 81       	ldd	r24, Y+1	; 0x01
    2798:	28 2f       	mov	r18, r24
    279a:	30 e0       	ldi	r19, 0x00	; 0
    279c:	3d 83       	std	Y+5, r19	; 0x05
    279e:	2c 83       	std	Y+4, r18	; 0x04
    27a0:	8c 81       	ldd	r24, Y+4	; 0x04
    27a2:	9d 81       	ldd	r25, Y+5	; 0x05
    27a4:	81 30       	cpi	r24, 0x01	; 1
    27a6:	91 05       	cpc	r25, r1
    27a8:	f9 f0       	breq	.+62     	; 0x27e8 <Write_Seven_segment+0x152>
    27aa:	2c 81       	ldd	r18, Y+4	; 0x04
    27ac:	3d 81       	ldd	r19, Y+5	; 0x05
    27ae:	22 30       	cpi	r18, 0x02	; 2
    27b0:	31 05       	cpc	r19, r1
    27b2:	2c f4       	brge	.+10     	; 0x27be <Write_Seven_segment+0x128>
    27b4:	8c 81       	ldd	r24, Y+4	; 0x04
    27b6:	9d 81       	ldd	r25, Y+5	; 0x05
    27b8:	00 97       	sbiw	r24, 0x00	; 0
    27ba:	61 f0       	breq	.+24     	; 0x27d4 <Write_Seven_segment+0x13e>
    27bc:	32 c0       	rjmp	.+100    	; 0x2822 <Write_Seven_segment+0x18c>
    27be:	2c 81       	ldd	r18, Y+4	; 0x04
    27c0:	3d 81       	ldd	r19, Y+5	; 0x05
    27c2:	22 30       	cpi	r18, 0x02	; 2
    27c4:	31 05       	cpc	r19, r1
    27c6:	d1 f0       	breq	.+52     	; 0x27fc <Write_Seven_segment+0x166>
    27c8:	8c 81       	ldd	r24, Y+4	; 0x04
    27ca:	9d 81       	ldd	r25, Y+5	; 0x05
    27cc:	83 30       	cpi	r24, 0x03	; 3
    27ce:	91 05       	cpc	r25, r1
    27d0:	f9 f0       	breq	.+62     	; 0x2810 <Write_Seven_segment+0x17a>
    27d2:	27 c0       	rjmp	.+78     	; 0x2822 <Write_Seven_segment+0x18c>
		{
		case DIO_GROUP_A:
			PORTA=(PORTID & 0xF0) | (num & 0x0F);
    27d4:	eb e3       	ldi	r30, 0x3B	; 59
    27d6:	f0 e0       	ldi	r31, 0x00	; 0
    27d8:	89 81       	ldd	r24, Y+1	; 0x01
    27da:	98 2f       	mov	r25, r24
    27dc:	90 7f       	andi	r25, 0xF0	; 240
    27de:	8b 81       	ldd	r24, Y+3	; 0x03
    27e0:	8f 70       	andi	r24, 0x0F	; 15
    27e2:	89 2b       	or	r24, r25
    27e4:	80 83       	st	Z, r24
    27e6:	1d c0       	rjmp	.+58     	; 0x2822 <Write_Seven_segment+0x18c>
			break;
		case DIO_GROUP_B:
			PORTB=(PORTID & 0xF0) | (num & 0x0F);
    27e8:	e8 e3       	ldi	r30, 0x38	; 56
    27ea:	f0 e0       	ldi	r31, 0x00	; 0
    27ec:	89 81       	ldd	r24, Y+1	; 0x01
    27ee:	98 2f       	mov	r25, r24
    27f0:	90 7f       	andi	r25, 0xF0	; 240
    27f2:	8b 81       	ldd	r24, Y+3	; 0x03
    27f4:	8f 70       	andi	r24, 0x0F	; 15
    27f6:	89 2b       	or	r24, r25
    27f8:	80 83       	st	Z, r24
    27fa:	13 c0       	rjmp	.+38     	; 0x2822 <Write_Seven_segment+0x18c>
			break;
		case DIO_GROUP_C:
			PORTC=(PORTID & 0xF0) | (num & 0x0F);
    27fc:	e5 e3       	ldi	r30, 0x35	; 53
    27fe:	f0 e0       	ldi	r31, 0x00	; 0
    2800:	89 81       	ldd	r24, Y+1	; 0x01
    2802:	98 2f       	mov	r25, r24
    2804:	90 7f       	andi	r25, 0xF0	; 240
    2806:	8b 81       	ldd	r24, Y+3	; 0x03
    2808:	8f 70       	andi	r24, 0x0F	; 15
    280a:	89 2b       	or	r24, r25
    280c:	80 83       	st	Z, r24
    280e:	09 c0       	rjmp	.+18     	; 0x2822 <Write_Seven_segment+0x18c>
			break;
		case DIO_GROUP_D:
			PORTD=(PORTID & 0xF0) | (num & 0x0F);
    2810:	e2 e3       	ldi	r30, 0x32	; 50
    2812:	f0 e0       	ldi	r31, 0x00	; 0
    2814:	89 81       	ldd	r24, Y+1	; 0x01
    2816:	98 2f       	mov	r25, r24
    2818:	90 7f       	andi	r25, 0xF0	; 240
    281a:	8b 81       	ldd	r24, Y+3	; 0x03
    281c:	8f 70       	andi	r24, 0x0F	; 15
    281e:	89 2b       	or	r24, r25
    2820:	80 83       	st	Z, r24
			break;
		default:
			break;
		}
	}
}
    2822:	27 96       	adiw	r28, 0x07	; 7
    2824:	0f b6       	in	r0, 0x3f	; 63
    2826:	f8 94       	cli
    2828:	de bf       	out	0x3e, r29	; 62
    282a:	0f be       	out	0x3f, r0	; 63
    282c:	cd bf       	out	0x3d, r28	; 61
    282e:	cf 91       	pop	r28
    2830:	df 91       	pop	r29
    2832:	08 95       	ret

00002834 <Read_Seven_segment>:



u8 Read_Seven_segment(u8 PORTID,u8 type)
{
    2834:	df 93       	push	r29
    2836:	cf 93       	push	r28
    2838:	00 d0       	rcall	.+0      	; 0x283a <Read_Seven_segment+0x6>
    283a:	0f 92       	push	r0
    283c:	cd b7       	in	r28, 0x3d	; 61
    283e:	de b7       	in	r29, 0x3e	; 62
    2840:	8a 83       	std	Y+2, r24	; 0x02
    2842:	6b 83       	std	Y+3, r22	; 0x03
	u8 Bits = 0;
    2844:	19 82       	std	Y+1, r1	; 0x01
	if(type == MSB)
    2846:	8b 81       	ldd	r24, Y+3	; 0x03
    2848:	81 30       	cpi	r24, 0x01	; 1
    284a:	29 f4       	brne	.+10     	; 0x2856 <Read_Seven_segment+0x22>
	{
		Bits = ((PORTID & 0xF0)>>4);
    284c:	8a 81       	ldd	r24, Y+2	; 0x02
    284e:	82 95       	swap	r24
    2850:	8f 70       	andi	r24, 0x0F	; 15
    2852:	89 83       	std	Y+1, r24	; 0x01
    2854:	06 c0       	rjmp	.+12     	; 0x2862 <Read_Seven_segment+0x2e>
	}
	else if (type == LSB)
    2856:	8b 81       	ldd	r24, Y+3	; 0x03
    2858:	88 23       	and	r24, r24
    285a:	19 f4       	brne	.+6      	; 0x2862 <Read_Seven_segment+0x2e>
	{
		Bits = (PORTID & 0x0F);
    285c:	8a 81       	ldd	r24, Y+2	; 0x02
    285e:	8f 70       	andi	r24, 0x0F	; 15
    2860:	89 83       	std	Y+1, r24	; 0x01
	}
	return Bits ;
    2862:	89 81       	ldd	r24, Y+1	; 0x01
}
    2864:	0f 90       	pop	r0
    2866:	0f 90       	pop	r0
    2868:	0f 90       	pop	r0
    286a:	cf 91       	pop	r28
    286c:	df 91       	pop	r29
    286e:	08 95       	ret

00002870 <BothSevenSegmentWrite>:


void BothSevenSegmentWrite(u8 PORTID,u8 type,u8 val)
{
    2870:	df 93       	push	r29
    2872:	cf 93       	push	r28
    2874:	cd b7       	in	r28, 0x3d	; 61
    2876:	de b7       	in	r29, 0x3e	; 62
    2878:	a2 97       	sbiw	r28, 0x22	; 34
    287a:	0f b6       	in	r0, 0x3f	; 63
    287c:	f8 94       	cli
    287e:	de bf       	out	0x3e, r29	; 62
    2880:	0f be       	out	0x3f, r0	; 63
    2882:	cd bf       	out	0x3d, r28	; 61
    2884:	88 a3       	std	Y+32, r24	; 0x20
    2886:	69 a3       	std	Y+33, r22	; 0x21
    2888:	4a a3       	std	Y+34, r20	; 0x22
	u8 tens,ones;
	if (val <= 99)
    288a:	8a a1       	ldd	r24, Y+34	; 0x22
    288c:	84 36       	cpi	r24, 0x64	; 100
    288e:	08 f0       	brcs	.+2      	; 0x2892 <BothSevenSegmentWrite+0x22>
    2890:	10 c1       	rjmp	.+544    	; 0x2ab2 <BothSevenSegmentWrite+0x242>
	{
		tens = val / 10 ;
    2892:	8a a1       	ldd	r24, Y+34	; 0x22
    2894:	9a e0       	ldi	r25, 0x0A	; 10
    2896:	69 2f       	mov	r22, r25
    2898:	0e 94 67 1a 	call	0x34ce	; 0x34ce <__udivmodqi4>
    289c:	8f 8f       	std	Y+31, r24	; 0x1f
		ones = val%10;
    289e:	8a a1       	ldd	r24, Y+34	; 0x22
    28a0:	9a e0       	ldi	r25, 0x0A	; 10
    28a2:	69 2f       	mov	r22, r25
    28a4:	0e 94 67 1a 	call	0x34ce	; 0x34ce <__udivmodqi4>
    28a8:	89 2f       	mov	r24, r25
    28aa:	8e 8f       	std	Y+30, r24	; 0x1e
		for (u8 i = 0 ; i <= 10 ; i++)
    28ac:	1d 8e       	std	Y+29, r1	; 0x1d
    28ae:	fd c0       	rjmp	.+506    	; 0x2aaa <BothSevenSegmentWrite+0x23a>
		{
			Seven_segment_disable(TENS);
    28b0:	81 e0       	ldi	r24, 0x01	; 1
    28b2:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <Seven_segment_disable>
			Seven_segment_enable(UNIT);
    28b6:	80 e0       	ldi	r24, 0x00	; 0
    28b8:	0e 94 c6 12 	call	0x258c	; 0x258c <Seven_segment_enable>
			Write_Seven_segment(PORTID,type,ones);
    28bc:	88 a1       	ldd	r24, Y+32	; 0x20
    28be:	69 a1       	ldd	r22, Y+33	; 0x21
    28c0:	4e 8d       	ldd	r20, Y+30	; 0x1e
    28c2:	0e 94 4b 13 	call	0x2696	; 0x2696 <Write_Seven_segment>
    28c6:	80 e0       	ldi	r24, 0x00	; 0
    28c8:	90 e0       	ldi	r25, 0x00	; 0
    28ca:	a0 ea       	ldi	r26, 0xA0	; 160
    28cc:	b0 e4       	ldi	r27, 0x40	; 64
    28ce:	89 8f       	std	Y+25, r24	; 0x19
    28d0:	9a 8f       	std	Y+26, r25	; 0x1a
    28d2:	ab 8f       	std	Y+27, r26	; 0x1b
    28d4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28d6:	69 8d       	ldd	r22, Y+25	; 0x19
    28d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28de:	20 e0       	ldi	r18, 0x00	; 0
    28e0:	30 e0       	ldi	r19, 0x00	; 0
    28e2:	4a e7       	ldi	r20, 0x7A	; 122
    28e4:	53 e4       	ldi	r21, 0x43	; 67
    28e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ea:	dc 01       	movw	r26, r24
    28ec:	cb 01       	movw	r24, r22
    28ee:	8d 8b       	std	Y+21, r24	; 0x15
    28f0:	9e 8b       	std	Y+22, r25	; 0x16
    28f2:	af 8b       	std	Y+23, r26	; 0x17
    28f4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    28f6:	6d 89       	ldd	r22, Y+21	; 0x15
    28f8:	7e 89       	ldd	r23, Y+22	; 0x16
    28fa:	8f 89       	ldd	r24, Y+23	; 0x17
    28fc:	98 8d       	ldd	r25, Y+24	; 0x18
    28fe:	20 e0       	ldi	r18, 0x00	; 0
    2900:	30 e0       	ldi	r19, 0x00	; 0
    2902:	40 e8       	ldi	r20, 0x80	; 128
    2904:	5f e3       	ldi	r21, 0x3F	; 63
    2906:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    290a:	88 23       	and	r24, r24
    290c:	2c f4       	brge	.+10     	; 0x2918 <BothSevenSegmentWrite+0xa8>
		__ticks = 1;
    290e:	81 e0       	ldi	r24, 0x01	; 1
    2910:	90 e0       	ldi	r25, 0x00	; 0
    2912:	9c 8b       	std	Y+20, r25	; 0x14
    2914:	8b 8b       	std	Y+19, r24	; 0x13
    2916:	3f c0       	rjmp	.+126    	; 0x2996 <BothSevenSegmentWrite+0x126>
	else if (__tmp > 65535)
    2918:	6d 89       	ldd	r22, Y+21	; 0x15
    291a:	7e 89       	ldd	r23, Y+22	; 0x16
    291c:	8f 89       	ldd	r24, Y+23	; 0x17
    291e:	98 8d       	ldd	r25, Y+24	; 0x18
    2920:	20 e0       	ldi	r18, 0x00	; 0
    2922:	3f ef       	ldi	r19, 0xFF	; 255
    2924:	4f e7       	ldi	r20, 0x7F	; 127
    2926:	57 e4       	ldi	r21, 0x47	; 71
    2928:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    292c:	18 16       	cp	r1, r24
    292e:	4c f5       	brge	.+82     	; 0x2982 <BothSevenSegmentWrite+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2930:	69 8d       	ldd	r22, Y+25	; 0x19
    2932:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2934:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2936:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2938:	20 e0       	ldi	r18, 0x00	; 0
    293a:	30 e0       	ldi	r19, 0x00	; 0
    293c:	40 e2       	ldi	r20, 0x20	; 32
    293e:	51 e4       	ldi	r21, 0x41	; 65
    2940:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2944:	dc 01       	movw	r26, r24
    2946:	cb 01       	movw	r24, r22
    2948:	bc 01       	movw	r22, r24
    294a:	cd 01       	movw	r24, r26
    294c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2950:	dc 01       	movw	r26, r24
    2952:	cb 01       	movw	r24, r22
    2954:	9c 8b       	std	Y+20, r25	; 0x14
    2956:	8b 8b       	std	Y+19, r24	; 0x13
    2958:	0f c0       	rjmp	.+30     	; 0x2978 <BothSevenSegmentWrite+0x108>
    295a:	89 e1       	ldi	r24, 0x19	; 25
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	9a 8b       	std	Y+18, r25	; 0x12
    2960:	89 8b       	std	Y+17, r24	; 0x11
    2962:	89 89       	ldd	r24, Y+17	; 0x11
    2964:	9a 89       	ldd	r25, Y+18	; 0x12
    2966:	01 97       	sbiw	r24, 0x01	; 1
    2968:	f1 f7       	brne	.-4      	; 0x2966 <BothSevenSegmentWrite+0xf6>
    296a:	9a 8b       	std	Y+18, r25	; 0x12
    296c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    296e:	8b 89       	ldd	r24, Y+19	; 0x13
    2970:	9c 89       	ldd	r25, Y+20	; 0x14
    2972:	01 97       	sbiw	r24, 0x01	; 1
    2974:	9c 8b       	std	Y+20, r25	; 0x14
    2976:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2978:	8b 89       	ldd	r24, Y+19	; 0x13
    297a:	9c 89       	ldd	r25, Y+20	; 0x14
    297c:	00 97       	sbiw	r24, 0x00	; 0
    297e:	69 f7       	brne	.-38     	; 0x295a <BothSevenSegmentWrite+0xea>
    2980:	14 c0       	rjmp	.+40     	; 0x29aa <BothSevenSegmentWrite+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2982:	6d 89       	ldd	r22, Y+21	; 0x15
    2984:	7e 89       	ldd	r23, Y+22	; 0x16
    2986:	8f 89       	ldd	r24, Y+23	; 0x17
    2988:	98 8d       	ldd	r25, Y+24	; 0x18
    298a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    298e:	dc 01       	movw	r26, r24
    2990:	cb 01       	movw	r24, r22
    2992:	9c 8b       	std	Y+20, r25	; 0x14
    2994:	8b 8b       	std	Y+19, r24	; 0x13
    2996:	8b 89       	ldd	r24, Y+19	; 0x13
    2998:	9c 89       	ldd	r25, Y+20	; 0x14
    299a:	98 8b       	std	Y+16, r25	; 0x10
    299c:	8f 87       	std	Y+15, r24	; 0x0f
    299e:	8f 85       	ldd	r24, Y+15	; 0x0f
    29a0:	98 89       	ldd	r25, Y+16	; 0x10
    29a2:	01 97       	sbiw	r24, 0x01	; 1
    29a4:	f1 f7       	brne	.-4      	; 0x29a2 <BothSevenSegmentWrite+0x132>
    29a6:	98 8b       	std	Y+16, r25	; 0x10
    29a8:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(5);
			Seven_segment_disable(UNIT);
    29aa:	80 e0       	ldi	r24, 0x00	; 0
    29ac:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <Seven_segment_disable>
			Seven_segment_enable(TENS);
    29b0:	81 e0       	ldi	r24, 0x01	; 1
    29b2:	0e 94 c6 12 	call	0x258c	; 0x258c <Seven_segment_enable>
			Write_Seven_segment(PORTID,type,tens);
    29b6:	88 a1       	ldd	r24, Y+32	; 0x20
    29b8:	69 a1       	ldd	r22, Y+33	; 0x21
    29ba:	4f 8d       	ldd	r20, Y+31	; 0x1f
    29bc:	0e 94 4b 13 	call	0x2696	; 0x2696 <Write_Seven_segment>
    29c0:	80 e0       	ldi	r24, 0x00	; 0
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	a0 ea       	ldi	r26, 0xA0	; 160
    29c6:	b0 e4       	ldi	r27, 0x40	; 64
    29c8:	8b 87       	std	Y+11, r24	; 0x0b
    29ca:	9c 87       	std	Y+12, r25	; 0x0c
    29cc:	ad 87       	std	Y+13, r26	; 0x0d
    29ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    29d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    29d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    29d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    29d8:	20 e0       	ldi	r18, 0x00	; 0
    29da:	30 e0       	ldi	r19, 0x00	; 0
    29dc:	4a e7       	ldi	r20, 0x7A	; 122
    29de:	53 e4       	ldi	r21, 0x43	; 67
    29e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29e4:	dc 01       	movw	r26, r24
    29e6:	cb 01       	movw	r24, r22
    29e8:	8f 83       	std	Y+7, r24	; 0x07
    29ea:	98 87       	std	Y+8, r25	; 0x08
    29ec:	a9 87       	std	Y+9, r26	; 0x09
    29ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29f0:	6f 81       	ldd	r22, Y+7	; 0x07
    29f2:	78 85       	ldd	r23, Y+8	; 0x08
    29f4:	89 85       	ldd	r24, Y+9	; 0x09
    29f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    29f8:	20 e0       	ldi	r18, 0x00	; 0
    29fa:	30 e0       	ldi	r19, 0x00	; 0
    29fc:	40 e8       	ldi	r20, 0x80	; 128
    29fe:	5f e3       	ldi	r21, 0x3F	; 63
    2a00:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a04:	88 23       	and	r24, r24
    2a06:	2c f4       	brge	.+10     	; 0x2a12 <BothSevenSegmentWrite+0x1a2>
		__ticks = 1;
    2a08:	81 e0       	ldi	r24, 0x01	; 1
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
    2a0c:	9e 83       	std	Y+6, r25	; 0x06
    2a0e:	8d 83       	std	Y+5, r24	; 0x05
    2a10:	3f c0       	rjmp	.+126    	; 0x2a90 <BothSevenSegmentWrite+0x220>
	else if (__tmp > 65535)
    2a12:	6f 81       	ldd	r22, Y+7	; 0x07
    2a14:	78 85       	ldd	r23, Y+8	; 0x08
    2a16:	89 85       	ldd	r24, Y+9	; 0x09
    2a18:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a1a:	20 e0       	ldi	r18, 0x00	; 0
    2a1c:	3f ef       	ldi	r19, 0xFF	; 255
    2a1e:	4f e7       	ldi	r20, 0x7F	; 127
    2a20:	57 e4       	ldi	r21, 0x47	; 71
    2a22:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a26:	18 16       	cp	r1, r24
    2a28:	4c f5       	brge	.+82     	; 0x2a7c <BothSevenSegmentWrite+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a30:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a32:	20 e0       	ldi	r18, 0x00	; 0
    2a34:	30 e0       	ldi	r19, 0x00	; 0
    2a36:	40 e2       	ldi	r20, 0x20	; 32
    2a38:	51 e4       	ldi	r21, 0x41	; 65
    2a3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a3e:	dc 01       	movw	r26, r24
    2a40:	cb 01       	movw	r24, r22
    2a42:	bc 01       	movw	r22, r24
    2a44:	cd 01       	movw	r24, r26
    2a46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a4a:	dc 01       	movw	r26, r24
    2a4c:	cb 01       	movw	r24, r22
    2a4e:	9e 83       	std	Y+6, r25	; 0x06
    2a50:	8d 83       	std	Y+5, r24	; 0x05
    2a52:	0f c0       	rjmp	.+30     	; 0x2a72 <BothSevenSegmentWrite+0x202>
    2a54:	89 e1       	ldi	r24, 0x19	; 25
    2a56:	90 e0       	ldi	r25, 0x00	; 0
    2a58:	9c 83       	std	Y+4, r25	; 0x04
    2a5a:	8b 83       	std	Y+3, r24	; 0x03
    2a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a5e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a60:	01 97       	sbiw	r24, 0x01	; 1
    2a62:	f1 f7       	brne	.-4      	; 0x2a60 <BothSevenSegmentWrite+0x1f0>
    2a64:	9c 83       	std	Y+4, r25	; 0x04
    2a66:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a68:	8d 81       	ldd	r24, Y+5	; 0x05
    2a6a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a6c:	01 97       	sbiw	r24, 0x01	; 1
    2a6e:	9e 83       	std	Y+6, r25	; 0x06
    2a70:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a72:	8d 81       	ldd	r24, Y+5	; 0x05
    2a74:	9e 81       	ldd	r25, Y+6	; 0x06
    2a76:	00 97       	sbiw	r24, 0x00	; 0
    2a78:	69 f7       	brne	.-38     	; 0x2a54 <BothSevenSegmentWrite+0x1e4>
    2a7a:	14 c0       	rjmp	.+40     	; 0x2aa4 <BothSevenSegmentWrite+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a7c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a7e:	78 85       	ldd	r23, Y+8	; 0x08
    2a80:	89 85       	ldd	r24, Y+9	; 0x09
    2a82:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a88:	dc 01       	movw	r26, r24
    2a8a:	cb 01       	movw	r24, r22
    2a8c:	9e 83       	std	Y+6, r25	; 0x06
    2a8e:	8d 83       	std	Y+5, r24	; 0x05
    2a90:	8d 81       	ldd	r24, Y+5	; 0x05
    2a92:	9e 81       	ldd	r25, Y+6	; 0x06
    2a94:	9a 83       	std	Y+2, r25	; 0x02
    2a96:	89 83       	std	Y+1, r24	; 0x01
    2a98:	89 81       	ldd	r24, Y+1	; 0x01
    2a9a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a9c:	01 97       	sbiw	r24, 0x01	; 1
    2a9e:	f1 f7       	brne	.-4      	; 0x2a9c <BothSevenSegmentWrite+0x22c>
    2aa0:	9a 83       	std	Y+2, r25	; 0x02
    2aa2:	89 83       	std	Y+1, r24	; 0x01
	u8 tens,ones;
	if (val <= 99)
	{
		tens = val / 10 ;
		ones = val%10;
		for (u8 i = 0 ; i <= 10 ; i++)
    2aa4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2aa6:	8f 5f       	subi	r24, 0xFF	; 255
    2aa8:	8d 8f       	std	Y+29, r24	; 0x1d
    2aaa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2aac:	8b 30       	cpi	r24, 0x0B	; 11
    2aae:	08 f4       	brcc	.+2      	; 0x2ab2 <BothSevenSegmentWrite+0x242>
    2ab0:	ff ce       	rjmp	.-514    	; 0x28b0 <BothSevenSegmentWrite+0x40>
	}
	else
	{

	}
}
    2ab2:	a2 96       	adiw	r28, 0x22	; 34
    2ab4:	0f b6       	in	r0, 0x3f	; 63
    2ab6:	f8 94       	cli
    2ab8:	de bf       	out	0x3e, r29	; 62
    2aba:	0f be       	out	0x3f, r0	; 63
    2abc:	cd bf       	out	0x3d, r28	; 61
    2abe:	cf 91       	pop	r28
    2ac0:	df 91       	pop	r29
    2ac2:	08 95       	ret

00002ac4 <BothSevenSegmentWriteFloat>:

void BothSevenSegmentWriteFloat(u8 PORTID,u8 type,u32 val)
{
    2ac4:	df 93       	push	r29
    2ac6:	cf 93       	push	r28
    2ac8:	cd b7       	in	r28, 0x3d	; 61
    2aca:	de b7       	in	r29, 0x3e	; 62
    2acc:	a5 97       	sbiw	r28, 0x25	; 37
    2ace:	0f b6       	in	r0, 0x3f	; 63
    2ad0:	f8 94       	cli
    2ad2:	de bf       	out	0x3e, r29	; 62
    2ad4:	0f be       	out	0x3f, r0	; 63
    2ad6:	cd bf       	out	0x3d, r28	; 61
    2ad8:	88 a3       	std	Y+32, r24	; 0x20
    2ada:	69 a3       	std	Y+33, r22	; 0x21
    2adc:	2a a3       	std	Y+34, r18	; 0x22
    2ade:	3b a3       	std	Y+35, r19	; 0x23
    2ae0:	4c a3       	std	Y+36, r20	; 0x24
    2ae2:	5d a3       	std	Y+37, r21	; 0x25
	u8 tens,ones;
	if (val <= 99)
    2ae4:	8a a1       	ldd	r24, Y+34	; 0x22
    2ae6:	9b a1       	ldd	r25, Y+35	; 0x23
    2ae8:	ac a1       	ldd	r26, Y+36	; 0x24
    2aea:	bd a1       	ldd	r27, Y+37	; 0x25
    2aec:	84 36       	cpi	r24, 0x64	; 100
    2aee:	91 05       	cpc	r25, r1
    2af0:	a1 05       	cpc	r26, r1
    2af2:	b1 05       	cpc	r27, r1
    2af4:	08 f0       	brcs	.+2      	; 0x2af8 <BothSevenSegmentWriteFloat+0x34>
    2af6:	21 c1       	rjmp	.+578    	; 0x2d3a <BothSevenSegmentWriteFloat+0x276>
	{
		tens = val / 10 ;
    2af8:	8a a1       	ldd	r24, Y+34	; 0x22
    2afa:	9b a1       	ldd	r25, Y+35	; 0x23
    2afc:	ac a1       	ldd	r26, Y+36	; 0x24
    2afe:	bd a1       	ldd	r27, Y+37	; 0x25
    2b00:	2a e0       	ldi	r18, 0x0A	; 10
    2b02:	30 e0       	ldi	r19, 0x00	; 0
    2b04:	40 e0       	ldi	r20, 0x00	; 0
    2b06:	50 e0       	ldi	r21, 0x00	; 0
    2b08:	bc 01       	movw	r22, r24
    2b0a:	cd 01       	movw	r24, r26
    2b0c:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <__udivmodsi4>
    2b10:	da 01       	movw	r26, r20
    2b12:	c9 01       	movw	r24, r18
    2b14:	8f 8f       	std	Y+31, r24	; 0x1f
		ones = val%10;
    2b16:	8a a1       	ldd	r24, Y+34	; 0x22
    2b18:	9b a1       	ldd	r25, Y+35	; 0x23
    2b1a:	ac a1       	ldd	r26, Y+36	; 0x24
    2b1c:	bd a1       	ldd	r27, Y+37	; 0x25
    2b1e:	2a e0       	ldi	r18, 0x0A	; 10
    2b20:	30 e0       	ldi	r19, 0x00	; 0
    2b22:	40 e0       	ldi	r20, 0x00	; 0
    2b24:	50 e0       	ldi	r21, 0x00	; 0
    2b26:	bc 01       	movw	r22, r24
    2b28:	cd 01       	movw	r24, r26
    2b2a:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <__udivmodsi4>
    2b2e:	dc 01       	movw	r26, r24
    2b30:	cb 01       	movw	r24, r22
    2b32:	8e 8f       	std	Y+30, r24	; 0x1e
		for (u8 i = 0 ; i <= 10 ; i++)
    2b34:	1d 8e       	std	Y+29, r1	; 0x1d
    2b36:	fd c0       	rjmp	.+506    	; 0x2d32 <BothSevenSegmentWriteFloat+0x26e>
		{
			Seven_segment_disable(TENS);
    2b38:	81 e0       	ldi	r24, 0x01	; 1
    2b3a:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <Seven_segment_disable>
			Seven_segment_enable(UNIT);
    2b3e:	80 e0       	ldi	r24, 0x00	; 0
    2b40:	0e 94 c6 12 	call	0x258c	; 0x258c <Seven_segment_enable>
			Write_Seven_segment(PORTID,type,ones);
    2b44:	88 a1       	ldd	r24, Y+32	; 0x20
    2b46:	69 a1       	ldd	r22, Y+33	; 0x21
    2b48:	4e 8d       	ldd	r20, Y+30	; 0x1e
    2b4a:	0e 94 4b 13 	call	0x2696	; 0x2696 <Write_Seven_segment>
    2b4e:	80 e0       	ldi	r24, 0x00	; 0
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	a0 ea       	ldi	r26, 0xA0	; 160
    2b54:	b0 e4       	ldi	r27, 0x40	; 64
    2b56:	89 8f       	std	Y+25, r24	; 0x19
    2b58:	9a 8f       	std	Y+26, r25	; 0x1a
    2b5a:	ab 8f       	std	Y+27, r26	; 0x1b
    2b5c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b5e:	69 8d       	ldd	r22, Y+25	; 0x19
    2b60:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b62:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b64:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b66:	20 e0       	ldi	r18, 0x00	; 0
    2b68:	30 e0       	ldi	r19, 0x00	; 0
    2b6a:	4a e7       	ldi	r20, 0x7A	; 122
    2b6c:	53 e4       	ldi	r21, 0x43	; 67
    2b6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b72:	dc 01       	movw	r26, r24
    2b74:	cb 01       	movw	r24, r22
    2b76:	8d 8b       	std	Y+21, r24	; 0x15
    2b78:	9e 8b       	std	Y+22, r25	; 0x16
    2b7a:	af 8b       	std	Y+23, r26	; 0x17
    2b7c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b7e:	6d 89       	ldd	r22, Y+21	; 0x15
    2b80:	7e 89       	ldd	r23, Y+22	; 0x16
    2b82:	8f 89       	ldd	r24, Y+23	; 0x17
    2b84:	98 8d       	ldd	r25, Y+24	; 0x18
    2b86:	20 e0       	ldi	r18, 0x00	; 0
    2b88:	30 e0       	ldi	r19, 0x00	; 0
    2b8a:	40 e8       	ldi	r20, 0x80	; 128
    2b8c:	5f e3       	ldi	r21, 0x3F	; 63
    2b8e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b92:	88 23       	and	r24, r24
    2b94:	2c f4       	brge	.+10     	; 0x2ba0 <BothSevenSegmentWriteFloat+0xdc>
		__ticks = 1;
    2b96:	81 e0       	ldi	r24, 0x01	; 1
    2b98:	90 e0       	ldi	r25, 0x00	; 0
    2b9a:	9c 8b       	std	Y+20, r25	; 0x14
    2b9c:	8b 8b       	std	Y+19, r24	; 0x13
    2b9e:	3f c0       	rjmp	.+126    	; 0x2c1e <BothSevenSegmentWriteFloat+0x15a>
	else if (__tmp > 65535)
    2ba0:	6d 89       	ldd	r22, Y+21	; 0x15
    2ba2:	7e 89       	ldd	r23, Y+22	; 0x16
    2ba4:	8f 89       	ldd	r24, Y+23	; 0x17
    2ba6:	98 8d       	ldd	r25, Y+24	; 0x18
    2ba8:	20 e0       	ldi	r18, 0x00	; 0
    2baa:	3f ef       	ldi	r19, 0xFF	; 255
    2bac:	4f e7       	ldi	r20, 0x7F	; 127
    2bae:	57 e4       	ldi	r21, 0x47	; 71
    2bb0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bb4:	18 16       	cp	r1, r24
    2bb6:	4c f5       	brge	.+82     	; 0x2c0a <BothSevenSegmentWriteFloat+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bb8:	69 8d       	ldd	r22, Y+25	; 0x19
    2bba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bbc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bbe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bc0:	20 e0       	ldi	r18, 0x00	; 0
    2bc2:	30 e0       	ldi	r19, 0x00	; 0
    2bc4:	40 e2       	ldi	r20, 0x20	; 32
    2bc6:	51 e4       	ldi	r21, 0x41	; 65
    2bc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bcc:	dc 01       	movw	r26, r24
    2bce:	cb 01       	movw	r24, r22
    2bd0:	bc 01       	movw	r22, r24
    2bd2:	cd 01       	movw	r24, r26
    2bd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bd8:	dc 01       	movw	r26, r24
    2bda:	cb 01       	movw	r24, r22
    2bdc:	9c 8b       	std	Y+20, r25	; 0x14
    2bde:	8b 8b       	std	Y+19, r24	; 0x13
    2be0:	0f c0       	rjmp	.+30     	; 0x2c00 <BothSevenSegmentWriteFloat+0x13c>
    2be2:	89 e1       	ldi	r24, 0x19	; 25
    2be4:	90 e0       	ldi	r25, 0x00	; 0
    2be6:	9a 8b       	std	Y+18, r25	; 0x12
    2be8:	89 8b       	std	Y+17, r24	; 0x11
    2bea:	89 89       	ldd	r24, Y+17	; 0x11
    2bec:	9a 89       	ldd	r25, Y+18	; 0x12
    2bee:	01 97       	sbiw	r24, 0x01	; 1
    2bf0:	f1 f7       	brne	.-4      	; 0x2bee <BothSevenSegmentWriteFloat+0x12a>
    2bf2:	9a 8b       	std	Y+18, r25	; 0x12
    2bf4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bf6:	8b 89       	ldd	r24, Y+19	; 0x13
    2bf8:	9c 89       	ldd	r25, Y+20	; 0x14
    2bfa:	01 97       	sbiw	r24, 0x01	; 1
    2bfc:	9c 8b       	std	Y+20, r25	; 0x14
    2bfe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c00:	8b 89       	ldd	r24, Y+19	; 0x13
    2c02:	9c 89       	ldd	r25, Y+20	; 0x14
    2c04:	00 97       	sbiw	r24, 0x00	; 0
    2c06:	69 f7       	brne	.-38     	; 0x2be2 <BothSevenSegmentWriteFloat+0x11e>
    2c08:	14 c0       	rjmp	.+40     	; 0x2c32 <BothSevenSegmentWriteFloat+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c0a:	6d 89       	ldd	r22, Y+21	; 0x15
    2c0c:	7e 89       	ldd	r23, Y+22	; 0x16
    2c0e:	8f 89       	ldd	r24, Y+23	; 0x17
    2c10:	98 8d       	ldd	r25, Y+24	; 0x18
    2c12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c16:	dc 01       	movw	r26, r24
    2c18:	cb 01       	movw	r24, r22
    2c1a:	9c 8b       	std	Y+20, r25	; 0x14
    2c1c:	8b 8b       	std	Y+19, r24	; 0x13
    2c1e:	8b 89       	ldd	r24, Y+19	; 0x13
    2c20:	9c 89       	ldd	r25, Y+20	; 0x14
    2c22:	98 8b       	std	Y+16, r25	; 0x10
    2c24:	8f 87       	std	Y+15, r24	; 0x0f
    2c26:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c28:	98 89       	ldd	r25, Y+16	; 0x10
    2c2a:	01 97       	sbiw	r24, 0x01	; 1
    2c2c:	f1 f7       	brne	.-4      	; 0x2c2a <BothSevenSegmentWriteFloat+0x166>
    2c2e:	98 8b       	std	Y+16, r25	; 0x10
    2c30:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(5);
			Seven_segment_disable(UNIT);
    2c32:	80 e0       	ldi	r24, 0x00	; 0
    2c34:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <Seven_segment_disable>
			Seven_segment_enable(TENS);
    2c38:	81 e0       	ldi	r24, 0x01	; 1
    2c3a:	0e 94 c6 12 	call	0x258c	; 0x258c <Seven_segment_enable>
			Write_Seven_segment(PORTID,type,tens);
    2c3e:	88 a1       	ldd	r24, Y+32	; 0x20
    2c40:	69 a1       	ldd	r22, Y+33	; 0x21
    2c42:	4f 8d       	ldd	r20, Y+31	; 0x1f
    2c44:	0e 94 4b 13 	call	0x2696	; 0x2696 <Write_Seven_segment>
    2c48:	80 e0       	ldi	r24, 0x00	; 0
    2c4a:	90 e0       	ldi	r25, 0x00	; 0
    2c4c:	a0 ea       	ldi	r26, 0xA0	; 160
    2c4e:	b0 e4       	ldi	r27, 0x40	; 64
    2c50:	8b 87       	std	Y+11, r24	; 0x0b
    2c52:	9c 87       	std	Y+12, r25	; 0x0c
    2c54:	ad 87       	std	Y+13, r26	; 0x0d
    2c56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c58:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c60:	20 e0       	ldi	r18, 0x00	; 0
    2c62:	30 e0       	ldi	r19, 0x00	; 0
    2c64:	4a e7       	ldi	r20, 0x7A	; 122
    2c66:	53 e4       	ldi	r21, 0x43	; 67
    2c68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c6c:	dc 01       	movw	r26, r24
    2c6e:	cb 01       	movw	r24, r22
    2c70:	8f 83       	std	Y+7, r24	; 0x07
    2c72:	98 87       	std	Y+8, r25	; 0x08
    2c74:	a9 87       	std	Y+9, r26	; 0x09
    2c76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c78:	6f 81       	ldd	r22, Y+7	; 0x07
    2c7a:	78 85       	ldd	r23, Y+8	; 0x08
    2c7c:	89 85       	ldd	r24, Y+9	; 0x09
    2c7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c80:	20 e0       	ldi	r18, 0x00	; 0
    2c82:	30 e0       	ldi	r19, 0x00	; 0
    2c84:	40 e8       	ldi	r20, 0x80	; 128
    2c86:	5f e3       	ldi	r21, 0x3F	; 63
    2c88:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c8c:	88 23       	and	r24, r24
    2c8e:	2c f4       	brge	.+10     	; 0x2c9a <BothSevenSegmentWriteFloat+0x1d6>
		__ticks = 1;
    2c90:	81 e0       	ldi	r24, 0x01	; 1
    2c92:	90 e0       	ldi	r25, 0x00	; 0
    2c94:	9e 83       	std	Y+6, r25	; 0x06
    2c96:	8d 83       	std	Y+5, r24	; 0x05
    2c98:	3f c0       	rjmp	.+126    	; 0x2d18 <BothSevenSegmentWriteFloat+0x254>
	else if (__tmp > 65535)
    2c9a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c9c:	78 85       	ldd	r23, Y+8	; 0x08
    2c9e:	89 85       	ldd	r24, Y+9	; 0x09
    2ca0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ca2:	20 e0       	ldi	r18, 0x00	; 0
    2ca4:	3f ef       	ldi	r19, 0xFF	; 255
    2ca6:	4f e7       	ldi	r20, 0x7F	; 127
    2ca8:	57 e4       	ldi	r21, 0x47	; 71
    2caa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cae:	18 16       	cp	r1, r24
    2cb0:	4c f5       	brge	.+82     	; 0x2d04 <BothSevenSegmentWriteFloat+0x240>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cb2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cb4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cb6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cb8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cba:	20 e0       	ldi	r18, 0x00	; 0
    2cbc:	30 e0       	ldi	r19, 0x00	; 0
    2cbe:	40 e2       	ldi	r20, 0x20	; 32
    2cc0:	51 e4       	ldi	r21, 0x41	; 65
    2cc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cc6:	dc 01       	movw	r26, r24
    2cc8:	cb 01       	movw	r24, r22
    2cca:	bc 01       	movw	r22, r24
    2ccc:	cd 01       	movw	r24, r26
    2cce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cd2:	dc 01       	movw	r26, r24
    2cd4:	cb 01       	movw	r24, r22
    2cd6:	9e 83       	std	Y+6, r25	; 0x06
    2cd8:	8d 83       	std	Y+5, r24	; 0x05
    2cda:	0f c0       	rjmp	.+30     	; 0x2cfa <BothSevenSegmentWriteFloat+0x236>
    2cdc:	89 e1       	ldi	r24, 0x19	; 25
    2cde:	90 e0       	ldi	r25, 0x00	; 0
    2ce0:	9c 83       	std	Y+4, r25	; 0x04
    2ce2:	8b 83       	std	Y+3, r24	; 0x03
    2ce4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ce8:	01 97       	sbiw	r24, 0x01	; 1
    2cea:	f1 f7       	brne	.-4      	; 0x2ce8 <BothSevenSegmentWriteFloat+0x224>
    2cec:	9c 83       	std	Y+4, r25	; 0x04
    2cee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cf0:	8d 81       	ldd	r24, Y+5	; 0x05
    2cf2:	9e 81       	ldd	r25, Y+6	; 0x06
    2cf4:	01 97       	sbiw	r24, 0x01	; 1
    2cf6:	9e 83       	std	Y+6, r25	; 0x06
    2cf8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cfa:	8d 81       	ldd	r24, Y+5	; 0x05
    2cfc:	9e 81       	ldd	r25, Y+6	; 0x06
    2cfe:	00 97       	sbiw	r24, 0x00	; 0
    2d00:	69 f7       	brne	.-38     	; 0x2cdc <BothSevenSegmentWriteFloat+0x218>
    2d02:	14 c0       	rjmp	.+40     	; 0x2d2c <BothSevenSegmentWriteFloat+0x268>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d04:	6f 81       	ldd	r22, Y+7	; 0x07
    2d06:	78 85       	ldd	r23, Y+8	; 0x08
    2d08:	89 85       	ldd	r24, Y+9	; 0x09
    2d0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d10:	dc 01       	movw	r26, r24
    2d12:	cb 01       	movw	r24, r22
    2d14:	9e 83       	std	Y+6, r25	; 0x06
    2d16:	8d 83       	std	Y+5, r24	; 0x05
    2d18:	8d 81       	ldd	r24, Y+5	; 0x05
    2d1a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d1c:	9a 83       	std	Y+2, r25	; 0x02
    2d1e:	89 83       	std	Y+1, r24	; 0x01
    2d20:	89 81       	ldd	r24, Y+1	; 0x01
    2d22:	9a 81       	ldd	r25, Y+2	; 0x02
    2d24:	01 97       	sbiw	r24, 0x01	; 1
    2d26:	f1 f7       	brne	.-4      	; 0x2d24 <BothSevenSegmentWriteFloat+0x260>
    2d28:	9a 83       	std	Y+2, r25	; 0x02
    2d2a:	89 83       	std	Y+1, r24	; 0x01
	u8 tens,ones;
	if (val <= 99)
	{
		tens = val / 10 ;
		ones = val%10;
		for (u8 i = 0 ; i <= 10 ; i++)
    2d2c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d2e:	8f 5f       	subi	r24, 0xFF	; 255
    2d30:	8d 8f       	std	Y+29, r24	; 0x1d
    2d32:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d34:	8b 30       	cpi	r24, 0x0B	; 11
    2d36:	08 f4       	brcc	.+2      	; 0x2d3a <BothSevenSegmentWriteFloat+0x276>
    2d38:	ff ce       	rjmp	.-514    	; 0x2b38 <BothSevenSegmentWriteFloat+0x74>
	}
	else
	{

	}
}
    2d3a:	a5 96       	adiw	r28, 0x25	; 37
    2d3c:	0f b6       	in	r0, 0x3f	; 63
    2d3e:	f8 94       	cli
    2d40:	de bf       	out	0x3e, r29	; 62
    2d42:	0f be       	out	0x3f, r0	; 63
    2d44:	cd bf       	out	0x3d, r28	; 61
    2d46:	cf 91       	pop	r28
    2d48:	df 91       	pop	r29
    2d4a:	08 95       	ret

00002d4c <SevenSegmentWriteFloat>:

void SevenSegmentWriteFloat(u8 PORTID,u8 type,u32 val)
{
    2d4c:	df 93       	push	r29
    2d4e:	cf 93       	push	r28
    2d50:	cd b7       	in	r28, 0x3d	; 61
    2d52:	de b7       	in	r29, 0x3e	; 62
    2d54:	28 97       	sbiw	r28, 0x08	; 8
    2d56:	0f b6       	in	r0, 0x3f	; 63
    2d58:	f8 94       	cli
    2d5a:	de bf       	out	0x3e, r29	; 62
    2d5c:	0f be       	out	0x3f, r0	; 63
    2d5e:	cd bf       	out	0x3d, r28	; 61
    2d60:	8b 83       	std	Y+3, r24	; 0x03
    2d62:	6c 83       	std	Y+4, r22	; 0x04
    2d64:	2d 83       	std	Y+5, r18	; 0x05
    2d66:	3e 83       	std	Y+6, r19	; 0x06
    2d68:	4f 83       	std	Y+7, r20	; 0x07
    2d6a:	58 87       	std	Y+8, r21	; 0x08
	u8 tens,ones;
	if (val <= 99)
    2d6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d70:	af 81       	ldd	r26, Y+7	; 0x07
    2d72:	b8 85       	ldd	r27, Y+8	; 0x08
    2d74:	84 36       	cpi	r24, 0x64	; 100
    2d76:	91 05       	cpc	r25, r1
    2d78:	a1 05       	cpc	r26, r1
    2d7a:	b1 05       	cpc	r27, r1
    2d7c:	a8 f5       	brcc	.+106    	; 0x2de8 <SevenSegmentWriteFloat+0x9c>
	{
		tens = val / 10 ;
    2d7e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d80:	9e 81       	ldd	r25, Y+6	; 0x06
    2d82:	af 81       	ldd	r26, Y+7	; 0x07
    2d84:	b8 85       	ldd	r27, Y+8	; 0x08
    2d86:	2a e0       	ldi	r18, 0x0A	; 10
    2d88:	30 e0       	ldi	r19, 0x00	; 0
    2d8a:	40 e0       	ldi	r20, 0x00	; 0
    2d8c:	50 e0       	ldi	r21, 0x00	; 0
    2d8e:	bc 01       	movw	r22, r24
    2d90:	cd 01       	movw	r24, r26
    2d92:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <__udivmodsi4>
    2d96:	da 01       	movw	r26, r20
    2d98:	c9 01       	movw	r24, r18
    2d9a:	8a 83       	std	Y+2, r24	; 0x02
		ones = val%10;
    2d9c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d9e:	9e 81       	ldd	r25, Y+6	; 0x06
    2da0:	af 81       	ldd	r26, Y+7	; 0x07
    2da2:	b8 85       	ldd	r27, Y+8	; 0x08
    2da4:	2a e0       	ldi	r18, 0x0A	; 10
    2da6:	30 e0       	ldi	r19, 0x00	; 0
    2da8:	40 e0       	ldi	r20, 0x00	; 0
    2daa:	50 e0       	ldi	r21, 0x00	; 0
    2dac:	bc 01       	movw	r22, r24
    2dae:	cd 01       	movw	r24, r26
    2db0:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <__udivmodsi4>
    2db4:	dc 01       	movw	r26, r24
    2db6:	cb 01       	movw	r24, r22
    2db8:	89 83       	std	Y+1, r24	; 0x01
		Seven_segment_enable(UNIT);
    2dba:	80 e0       	ldi	r24, 0x00	; 0
    2dbc:	0e 94 c6 12 	call	0x258c	; 0x258c <Seven_segment_enable>
		Seven_segment_enable(TENS);
    2dc0:	81 e0       	ldi	r24, 0x01	; 1
    2dc2:	0e 94 c6 12 	call	0x258c	; 0x258c <Seven_segment_enable>
		if (type == MSB)
    2dc6:	8c 81       	ldd	r24, Y+4	; 0x04
    2dc8:	81 30       	cpi	r24, 0x01	; 1
    2dca:	31 f4       	brne	.+12     	; 0x2dd8 <SevenSegmentWriteFloat+0x8c>
		{
			Write_Seven_segment(B,MSB,ones);
    2dcc:	81 e0       	ldi	r24, 0x01	; 1
    2dce:	61 e0       	ldi	r22, 0x01	; 1
    2dd0:	49 81       	ldd	r20, Y+1	; 0x01
    2dd2:	0e 94 4b 13 	call	0x2696	; 0x2696 <Write_Seven_segment>
    2dd6:	08 c0       	rjmp	.+16     	; 0x2de8 <SevenSegmentWriteFloat+0x9c>
		}
		else if (type == LSB)
    2dd8:	8c 81       	ldd	r24, Y+4	; 0x04
    2dda:	88 23       	and	r24, r24
    2ddc:	29 f4       	brne	.+10     	; 0x2de8 <SevenSegmentWriteFloat+0x9c>
		{
			Write_Seven_segment(A,LSB,tens);
    2dde:	80 e0       	ldi	r24, 0x00	; 0
    2de0:	60 e0       	ldi	r22, 0x00	; 0
    2de2:	4a 81       	ldd	r20, Y+2	; 0x02
    2de4:	0e 94 4b 13 	call	0x2696	; 0x2696 <Write_Seven_segment>
	}
	else
	{

	}
}
    2de8:	28 96       	adiw	r28, 0x08	; 8
    2dea:	0f b6       	in	r0, 0x3f	; 63
    2dec:	f8 94       	cli
    2dee:	de bf       	out	0x3e, r29	; 62
    2df0:	0f be       	out	0x3f, r0	; 63
    2df2:	cd bf       	out	0x3d, r28	; 61
    2df4:	cf 91       	pop	r28
    2df6:	df 91       	pop	r29
    2df8:	08 95       	ret

00002dfa <APP_init>:




void APP_init(void)
{
    2dfa:	df 93       	push	r29
    2dfc:	cf 93       	push	r28
    2dfe:	cd b7       	in	r28, 0x3d	; 61
    2e00:	de b7       	in	r29, 0x3e	; 62
    2e02:	2e 97       	sbiw	r28, 0x0e	; 14
    2e04:	0f b6       	in	r0, 0x3f	; 63
    2e06:	f8 94       	cli
    2e08:	de bf       	out	0x3e, r29	; 62
    2e0a:	0f be       	out	0x3f, r0	; 63
    2e0c:	cd bf       	out	0x3d, r28	; 61
	button_init(DIO_GROUP_D,DIO_PIN_2,PULL_UP); /*Up Button*/
    2e0e:	83 e0       	ldi	r24, 0x03	; 3
    2e10:	62 e0       	ldi	r22, 0x02	; 2
    2e12:	40 e0       	ldi	r20, 0x00	; 0
    2e14:	0e 94 8c 12 	call	0x2518	; 0x2518 <button_init>
	button_init(DIO_GROUP_D,DIO_PIN_3,PULL_UP); /*Down Button*/
    2e18:	83 e0       	ldi	r24, 0x03	; 3
    2e1a:	63 e0       	ldi	r22, 0x03	; 3
    2e1c:	40 e0       	ldi	r20, 0x00	; 0
    2e1e:	0e 94 8c 12 	call	0x2518	; 0x2518 <button_init>
	button_init(DIO_GROUP_B,DIO_PIN_2,PULL_UP); /*ON|OFF Button*/
    2e22:	81 e0       	ldi	r24, 0x01	; 1
    2e24:	62 e0       	ldi	r22, 0x02	; 2
    2e26:	40 e0       	ldi	r20, 0x00	; 0
    2e28:	0e 94 8c 12 	call	0x2518	; 0x2518 <button_init>
	interrupt_init(EX_INT0,FALLING_MODE);  /*Up Button as Interrupt 0*/
    2e2c:	80 e0       	ldi	r24, 0x00	; 0
    2e2e:	62 e0       	ldi	r22, 0x02	; 2
    2e30:	0e 94 26 0a 	call	0x144c	; 0x144c <interrupt_init>
	interrupt_init(EX_INT1,FALLING_MODE);  /*Down Button as Interrupt 1*/
    2e34:	81 e0       	ldi	r24, 0x01	; 1
    2e36:	62 e0       	ldi	r22, 0x02	; 2
    2e38:	0e 94 26 0a 	call	0x144c	; 0x144c <interrupt_init>
	interrupt_init(EX_INT2,FALLING_MODE);  /*ON|OFF Button as Interrupt 2*/
    2e3c:	82 e0       	ldi	r24, 0x02	; 2
    2e3e:	62 e0       	ldi	r22, 0x02	; 2
    2e40:	0e 94 26 0a 	call	0x144c	; 0x144c <interrupt_init>
	
	
	timer0_init(OVERFLOW_MODE);
    2e44:	80 e0       	ldi	r24, 0x00	; 0
    2e46:	0e 94 75 07 	call	0xeea	; 0xeea <timer0_init>
	timer0_interrupt(OVERFLOW_MODE);
    2e4a:	80 e0       	ldi	r24, 0x00	; 0
    2e4c:	0e 94 43 09 	call	0x1286	; 0x1286 <timer0_interrupt>
	
	Seven_segment_init(A,LSB); 
    2e50:	80 e0       	ldi	r24, 0x00	; 0
    2e52:	60 e0       	ldi	r22, 0x00	; 0
    2e54:	0e 94 10 13 	call	0x2620	; 0x2620 <Seven_segment_init>
	Seven_segment_init(B,MSB);
    2e58:	81 e0       	ldi	r24, 0x01	; 1
    2e5a:	61 e0       	ldi	r22, 0x01	; 1
    2e5c:	0e 94 10 13 	call	0x2620	; 0x2620 <Seven_segment_init>
	

	EEPROM_init();
    2e60:	0e 94 27 12 	call	0x244e	; 0x244e <EEPROM_init>
 	EEPROM_WRITE(ADDRESS,setTemp);
    2e64:	20 91 68 01 	lds	r18, 0x0168
    2e68:	81 e0       	ldi	r24, 0x01	; 1
    2e6a:	93 e0       	ldi	r25, 0x03	; 3
    2e6c:	62 2f       	mov	r22, r18
    2e6e:	0e 94 30 12 	call	0x2460	; 0x2460 <EEPROM_WRITE>
    2e72:	80 e0       	ldi	r24, 0x00	; 0
    2e74:	90 e0       	ldi	r25, 0x00	; 0
    2e76:	a0 e2       	ldi	r26, 0x20	; 32
    2e78:	b1 e4       	ldi	r27, 0x41	; 65
    2e7a:	8b 87       	std	Y+11, r24	; 0x0b
    2e7c:	9c 87       	std	Y+12, r25	; 0x0c
    2e7e:	ad 87       	std	Y+13, r26	; 0x0d
    2e80:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e82:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e84:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e86:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e88:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e8a:	20 e0       	ldi	r18, 0x00	; 0
    2e8c:	30 e0       	ldi	r19, 0x00	; 0
    2e8e:	4a e7       	ldi	r20, 0x7A	; 122
    2e90:	53 e4       	ldi	r21, 0x43	; 67
    2e92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e96:	dc 01       	movw	r26, r24
    2e98:	cb 01       	movw	r24, r22
    2e9a:	8f 83       	std	Y+7, r24	; 0x07
    2e9c:	98 87       	std	Y+8, r25	; 0x08
    2e9e:	a9 87       	std	Y+9, r26	; 0x09
    2ea0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ea2:	6f 81       	ldd	r22, Y+7	; 0x07
    2ea4:	78 85       	ldd	r23, Y+8	; 0x08
    2ea6:	89 85       	ldd	r24, Y+9	; 0x09
    2ea8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eaa:	20 e0       	ldi	r18, 0x00	; 0
    2eac:	30 e0       	ldi	r19, 0x00	; 0
    2eae:	40 e8       	ldi	r20, 0x80	; 128
    2eb0:	5f e3       	ldi	r21, 0x3F	; 63
    2eb2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2eb6:	88 23       	and	r24, r24
    2eb8:	2c f4       	brge	.+10     	; 0x2ec4 <APP_init+0xca>
		__ticks = 1;
    2eba:	81 e0       	ldi	r24, 0x01	; 1
    2ebc:	90 e0       	ldi	r25, 0x00	; 0
    2ebe:	9e 83       	std	Y+6, r25	; 0x06
    2ec0:	8d 83       	std	Y+5, r24	; 0x05
    2ec2:	3f c0       	rjmp	.+126    	; 0x2f42 <APP_init+0x148>
	else if (__tmp > 65535)
    2ec4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ec6:	78 85       	ldd	r23, Y+8	; 0x08
    2ec8:	89 85       	ldd	r24, Y+9	; 0x09
    2eca:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ecc:	20 e0       	ldi	r18, 0x00	; 0
    2ece:	3f ef       	ldi	r19, 0xFF	; 255
    2ed0:	4f e7       	ldi	r20, 0x7F	; 127
    2ed2:	57 e4       	ldi	r21, 0x47	; 71
    2ed4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ed8:	18 16       	cp	r1, r24
    2eda:	4c f5       	brge	.+82     	; 0x2f2e <APP_init+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2edc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ede:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ee0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ee2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ee4:	20 e0       	ldi	r18, 0x00	; 0
    2ee6:	30 e0       	ldi	r19, 0x00	; 0
    2ee8:	40 e2       	ldi	r20, 0x20	; 32
    2eea:	51 e4       	ldi	r21, 0x41	; 65
    2eec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ef0:	dc 01       	movw	r26, r24
    2ef2:	cb 01       	movw	r24, r22
    2ef4:	bc 01       	movw	r22, r24
    2ef6:	cd 01       	movw	r24, r26
    2ef8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2efc:	dc 01       	movw	r26, r24
    2efe:	cb 01       	movw	r24, r22
    2f00:	9e 83       	std	Y+6, r25	; 0x06
    2f02:	8d 83       	std	Y+5, r24	; 0x05
    2f04:	0f c0       	rjmp	.+30     	; 0x2f24 <APP_init+0x12a>
    2f06:	89 e1       	ldi	r24, 0x19	; 25
    2f08:	90 e0       	ldi	r25, 0x00	; 0
    2f0a:	9c 83       	std	Y+4, r25	; 0x04
    2f0c:	8b 83       	std	Y+3, r24	; 0x03
    2f0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f10:	9c 81       	ldd	r25, Y+4	; 0x04
    2f12:	01 97       	sbiw	r24, 0x01	; 1
    2f14:	f1 f7       	brne	.-4      	; 0x2f12 <APP_init+0x118>
    2f16:	9c 83       	std	Y+4, r25	; 0x04
    2f18:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f1a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f1c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f1e:	01 97       	sbiw	r24, 0x01	; 1
    2f20:	9e 83       	std	Y+6, r25	; 0x06
    2f22:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f24:	8d 81       	ldd	r24, Y+5	; 0x05
    2f26:	9e 81       	ldd	r25, Y+6	; 0x06
    2f28:	00 97       	sbiw	r24, 0x00	; 0
    2f2a:	69 f7       	brne	.-38     	; 0x2f06 <APP_init+0x10c>
    2f2c:	14 c0       	rjmp	.+40     	; 0x2f56 <APP_init+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f2e:	6f 81       	ldd	r22, Y+7	; 0x07
    2f30:	78 85       	ldd	r23, Y+8	; 0x08
    2f32:	89 85       	ldd	r24, Y+9	; 0x09
    2f34:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f3a:	dc 01       	movw	r26, r24
    2f3c:	cb 01       	movw	r24, r22
    2f3e:	9e 83       	std	Y+6, r25	; 0x06
    2f40:	8d 83       	std	Y+5, r24	; 0x05
    2f42:	8d 81       	ldd	r24, Y+5	; 0x05
    2f44:	9e 81       	ldd	r25, Y+6	; 0x06
    2f46:	9a 83       	std	Y+2, r25	; 0x02
    2f48:	89 83       	std	Y+1, r24	; 0x01
    2f4a:	89 81       	ldd	r24, Y+1	; 0x01
    2f4c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f4e:	01 97       	sbiw	r24, 0x01	; 1
    2f50:	f1 f7       	brne	.-4      	; 0x2f4e <APP_init+0x154>
    2f52:	9a 83       	std	Y+2, r25	; 0x02
    2f54:	89 83       	std	Y+1, r24	; 0x01
 	_delay_ms(10);
	
	HEAT_INIT();
    2f56:	0e 94 0f 11 	call	0x221e	; 0x221e <HEAT_INIT>
	COOL_INIT();
    2f5a:	0e 94 33 11 	call	0x2266	; 0x2266 <COOL_INIT>
	State_led_INIT();
    2f5e:	0e 94 57 11 	call	0x22ae	; 0x22ae <State_led_INIT>

	LM35_init(A,ADC7);
    2f62:	80 e0       	ldi	r24, 0x00	; 0
    2f64:	67 e0       	ldi	r22, 0x07	; 7
    2f66:	0e 94 56 10 	call	0x20ac	; 0x20ac <LM35_init>
	
	
}
    2f6a:	2e 96       	adiw	r28, 0x0e	; 14
    2f6c:	0f b6       	in	r0, 0x3f	; 63
    2f6e:	f8 94       	cli
    2f70:	de bf       	out	0x3e, r29	; 62
    2f72:	0f be       	out	0x3f, r0	; 63
    2f74:	cd bf       	out	0x3d, r28	; 61
    2f76:	cf 91       	pop	r28
    2f78:	df 91       	pop	r29
    2f7a:	08 95       	ret

00002f7c <APP_start>:




void APP_start(void)
{
    2f7c:	df 93       	push	r29
    2f7e:	cf 93       	push	r28
    2f80:	00 d0       	rcall	.+0      	; 0x2f82 <APP_start+0x6>
    2f82:	cd b7       	in	r28, 0x3d	; 61
    2f84:	de b7       	in	r29, 0x3e	; 62

	while(1)
	{
		switch (state)
    2f86:	80 91 6a 01 	lds	r24, 0x016A
    2f8a:	28 2f       	mov	r18, r24
    2f8c:	30 e0       	ldi	r19, 0x00	; 0
    2f8e:	3a 83       	std	Y+2, r19	; 0x02
    2f90:	29 83       	std	Y+1, r18	; 0x01
    2f92:	89 81       	ldd	r24, Y+1	; 0x01
    2f94:	9a 81       	ldd	r25, Y+2	; 0x02
    2f96:	81 30       	cpi	r24, 0x01	; 1
    2f98:	91 05       	cpc	r25, r1
    2f9a:	61 f0       	breq	.+24     	; 0x2fb4 <APP_start+0x38>
    2f9c:	29 81       	ldd	r18, Y+1	; 0x01
    2f9e:	3a 81       	ldd	r19, Y+2	; 0x02
    2fa0:	22 30       	cpi	r18, 0x02	; 2
    2fa2:	31 05       	cpc	r19, r1
    2fa4:	51 f0       	breq	.+20     	; 0x2fba <APP_start+0x3e>
    2fa6:	89 81       	ldd	r24, Y+1	; 0x01
    2fa8:	9a 81       	ldd	r25, Y+2	; 0x02
    2faa:	00 97       	sbiw	r24, 0x00	; 0
    2fac:	49 f4       	brne	.+18     	; 0x2fc0 <APP_start+0x44>
		{
			case OFF:
			OFF_STATE();
    2fae:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <OFF_STATE>
    2fb2:	e9 cf       	rjmp	.-46     	; 0x2f86 <APP_start+0xa>
			break;

			case ON:
			ON_STATE();
    2fb4:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <ON_STATE>
    2fb8:	e6 cf       	rjmp	.-52     	; 0x2f86 <APP_start+0xa>
			break;

			case SETT:
			SETT_STATE();
    2fba:	0e 94 34 19 	call	0x3268	; 0x3268 <SETT_STATE>
    2fbe:	e3 cf       	rjmp	.-58     	; 0x2f86 <APP_start+0xa>
			break;

			default:
			state = OFF;  
    2fc0:	10 92 6a 01 	sts	0x016A, r1
    2fc4:	e0 cf       	rjmp	.-64     	; 0x2f86 <APP_start+0xa>

00002fc6 <OFF_STATE>:




static void OFF_STATE(void)
{
    2fc6:	df 93       	push	r29
    2fc8:	cf 93       	push	r28
    2fca:	cd b7       	in	r28, 0x3d	; 61
    2fcc:	de b7       	in	r29, 0x3e	; 62

	interrupt_disable(EX_INT0);
    2fce:	80 e0       	ldi	r24, 0x00	; 0
    2fd0:	0e 94 c6 0b 	call	0x178c	; 0x178c <interrupt_disable>
	interrupt_disable(EX_INT1);
    2fd4:	81 e0       	ldi	r24, 0x01	; 1
    2fd6:	0e 94 c6 0b 	call	0x178c	; 0x178c <interrupt_disable>
	prevState = OFF;
    2fda:	10 92 6b 01 	sts	0x016B, r1

	HEAT_STOP();
    2fde:	0e 94 27 11 	call	0x224e	; 0x224e <HEAT_STOP>
	COOL_STOP();
    2fe2:	0e 94 4b 11 	call	0x2296	; 0x2296 <COOL_STOP>
	State_led_stop();
    2fe6:	0e 94 6f 11 	call	0x22de	; 0x22de <State_led_stop>
	Seven_segment_disable(UNIT);
    2fea:	80 e0       	ldi	r24, 0x00	; 0
    2fec:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <Seven_segment_disable>
	Seven_segment_disable(TENS);
    2ff0:	81 e0       	ldi	r24, 0x01	; 1
    2ff2:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <Seven_segment_disable>
}
    2ff6:	cf 91       	pop	r28
    2ff8:	df 91       	pop	r29
    2ffa:	08 95       	ret

00002ffc <ON_STATE>:




static void ON_STATE(void)
{
    2ffc:	df 93       	push	r29
    2ffe:	cf 93       	push	r28
    3000:	00 d0       	rcall	.+0      	; 0x3002 <ON_STATE+0x6>
    3002:	00 d0       	rcall	.+0      	; 0x3004 <ON_STATE+0x8>
    3004:	0f 92       	push	r0
    3006:	cd b7       	in	r28, 0x3d	; 61
    3008:	de b7       	in	r29, 0x3e	; 62
	u8 savedTemp = 0;
    300a:	1d 82       	std	Y+5, r1	; 0x05

	interrupt_enable(EX_INT0);
    300c:	80 e0       	ldi	r24, 0x00	; 0
    300e:	0e 94 8f 0b 	call	0x171e	; 0x171e <interrupt_enable>
	interrupt_enable(EX_INT1);
    3012:	81 e0       	ldi	r24, 0x01	; 1
    3014:	0e 94 8f 0b 	call	0x171e	; 0x171e <interrupt_enable>

	if (prevState == OFF)
    3018:	80 91 6b 01 	lds	r24, 0x016B
    301c:	88 23       	and	r24, r24
    301e:	49 f4       	brne	.+18     	; 0x3032 <ON_STATE+0x36>
	{
		EEPROM_READ(ADDRESS,&savedTemp);
    3020:	9e 01       	movw	r18, r28
    3022:	2b 5f       	subi	r18, 0xFB	; 251
    3024:	3f 4f       	sbci	r19, 0xFF	; 255
    3026:	81 e0       	ldi	r24, 0x01	; 1
    3028:	93 e0       	ldi	r25, 0x03	; 3
    302a:	b9 01       	movw	r22, r18
    302c:	0e 94 55 12 	call	0x24aa	; 0x24aa <EEPROM_READ>
    3030:	03 c0       	rjmp	.+6      	; 0x3038 <ON_STATE+0x3c>
	}
	else
	{
		savedTemp = setTemp;
    3032:	80 91 68 01 	lds	r24, 0x0168
    3036:	8d 83       	std	Y+5, r24	; 0x05
	}
	prevState = ON;
    3038:	81 e0       	ldi	r24, 0x01	; 1
    303a:	80 93 6b 01 	sts	0x016B, r24
	f32 temp = 0;
    303e:	80 e0       	ldi	r24, 0x00	; 0
    3040:	90 e0       	ldi	r25, 0x00	; 0
    3042:	a0 e0       	ldi	r26, 0x00	; 0
    3044:	b0 e0       	ldi	r27, 0x00	; 0
    3046:	89 83       	std	Y+1, r24	; 0x01
    3048:	9a 83       	std	Y+2, r25	; 0x02
    304a:	ab 83       	std	Y+3, r26	; 0x03
    304c:	bc 83       	std	Y+4, r27	; 0x04

	temp = TempSense();
    304e:	0e 94 ac 18 	call	0x3158	; 0x3158 <TempSense>
    3052:	dc 01       	movw	r26, r24
    3054:	cb 01       	movw	r24, r22
    3056:	89 83       	std	Y+1, r24	; 0x01
    3058:	9a 83       	std	Y+2, r25	; 0x02
    305a:	ab 83       	std	Y+3, r26	; 0x03
    305c:	bc 83       	std	Y+4, r27	; 0x04
	SevenSegmentWriteFloat(DIO_GROUP_A,LSB,temp);
    305e:	69 81       	ldd	r22, Y+1	; 0x01
    3060:	7a 81       	ldd	r23, Y+2	; 0x02
    3062:	8b 81       	ldd	r24, Y+3	; 0x03
    3064:	9c 81       	ldd	r25, Y+4	; 0x04
    3066:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    306a:	9b 01       	movw	r18, r22
    306c:	ac 01       	movw	r20, r24
    306e:	80 e0       	ldi	r24, 0x00	; 0
    3070:	60 e0       	ldi	r22, 0x00	; 0
    3072:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <SevenSegmentWriteFloat>
	SevenSegmentWriteFloat(DIO_GROUP_B,MSB,temp);
    3076:	69 81       	ldd	r22, Y+1	; 0x01
    3078:	7a 81       	ldd	r23, Y+2	; 0x02
    307a:	8b 81       	ldd	r24, Y+3	; 0x03
    307c:	9c 81       	ldd	r25, Y+4	; 0x04
    307e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3082:	9b 01       	movw	r18, r22
    3084:	ac 01       	movw	r20, r24
    3086:	81 e0       	ldi	r24, 0x01	; 1
    3088:	61 e0       	ldi	r22, 0x01	; 1
    308a:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <SevenSegmentWriteFloat>

	if ((temp - savedTemp) > 5)
    308e:	8d 81       	ldd	r24, Y+5	; 0x05
    3090:	88 2f       	mov	r24, r24
    3092:	90 e0       	ldi	r25, 0x00	; 0
    3094:	aa 27       	eor	r26, r26
    3096:	97 fd       	sbrc	r25, 7
    3098:	a0 95       	com	r26
    309a:	ba 2f       	mov	r27, r26
    309c:	bc 01       	movw	r22, r24
    309e:	cd 01       	movw	r24, r26
    30a0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    30a4:	9b 01       	movw	r18, r22
    30a6:	ac 01       	movw	r20, r24
    30a8:	69 81       	ldd	r22, Y+1	; 0x01
    30aa:	7a 81       	ldd	r23, Y+2	; 0x02
    30ac:	8b 81       	ldd	r24, Y+3	; 0x03
    30ae:	9c 81       	ldd	r25, Y+4	; 0x04
    30b0:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    30b4:	dc 01       	movw	r26, r24
    30b6:	cb 01       	movw	r24, r22
    30b8:	bc 01       	movw	r22, r24
    30ba:	cd 01       	movw	r24, r26
    30bc:	20 e0       	ldi	r18, 0x00	; 0
    30be:	30 e0       	ldi	r19, 0x00	; 0
    30c0:	40 ea       	ldi	r20, 0xA0	; 160
    30c2:	50 e4       	ldi	r21, 0x40	; 64
    30c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30c8:	18 16       	cp	r1, r24
    30ca:	2c f4       	brge	.+10     	; 0x30d6 <ON_STATE+0xda>
	{
		HEAT_STOP();
    30cc:	0e 94 27 11 	call	0x224e	; 0x224e <HEAT_STOP>
		COOL_START();
    30d0:	0e 94 3f 11 	call	0x227e	; 0x227e <COOL_START>
    30d4:	2c c0       	rjmp	.+88     	; 0x312e <ON_STATE+0x132>
	}
	else if ((savedTemp - temp) > 5)
    30d6:	8d 81       	ldd	r24, Y+5	; 0x05
    30d8:	88 2f       	mov	r24, r24
    30da:	90 e0       	ldi	r25, 0x00	; 0
    30dc:	aa 27       	eor	r26, r26
    30de:	97 fd       	sbrc	r25, 7
    30e0:	a0 95       	com	r26
    30e2:	ba 2f       	mov	r27, r26
    30e4:	bc 01       	movw	r22, r24
    30e6:	cd 01       	movw	r24, r26
    30e8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    30ec:	dc 01       	movw	r26, r24
    30ee:	cb 01       	movw	r24, r22
    30f0:	bc 01       	movw	r22, r24
    30f2:	cd 01       	movw	r24, r26
    30f4:	29 81       	ldd	r18, Y+1	; 0x01
    30f6:	3a 81       	ldd	r19, Y+2	; 0x02
    30f8:	4b 81       	ldd	r20, Y+3	; 0x03
    30fa:	5c 81       	ldd	r21, Y+4	; 0x04
    30fc:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3100:	dc 01       	movw	r26, r24
    3102:	cb 01       	movw	r24, r22
    3104:	bc 01       	movw	r22, r24
    3106:	cd 01       	movw	r24, r26
    3108:	20 e0       	ldi	r18, 0x00	; 0
    310a:	30 e0       	ldi	r19, 0x00	; 0
    310c:	40 ea       	ldi	r20, 0xA0	; 160
    310e:	50 e4       	ldi	r21, 0x40	; 64
    3110:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3114:	18 16       	cp	r1, r24
    3116:	2c f4       	brge	.+10     	; 0x3122 <ON_STATE+0x126>
	{
		COOL_STOP();
    3118:	0e 94 4b 11 	call	0x2296	; 0x2296 <COOL_STOP>
		HEAT_START();
    311c:	0e 94 1b 11 	call	0x2236	; 0x2236 <HEAT_START>
    3120:	06 c0       	rjmp	.+12     	; 0x312e <ON_STATE+0x132>
	}
	else
	{
		COOL_STOP();
    3122:	0e 94 4b 11 	call	0x2296	; 0x2296 <COOL_STOP>
		HEAT_STOP();
    3126:	0e 94 27 11 	call	0x224e	; 0x224e <HEAT_STOP>
		State_led_stop();
    312a:	0e 94 6f 11 	call	0x22de	; 0x22de <State_led_stop>
	}

	if (getState()==HEAT_ON)
    312e:	0e 94 0a 12 	call	0x2414	; 0x2414 <getState>
    3132:	81 30       	cpi	r24, 0x01	; 1
    3134:	19 f4       	brne	.+6      	; 0x313c <ON_STATE+0x140>
	{
		State_led_tog();
    3136:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <State_led_tog>
    313a:	06 c0       	rjmp	.+12     	; 0x3148 <ON_STATE+0x14c>
	}
	else if (getState()==COOL_ON)
    313c:	0e 94 0a 12 	call	0x2414	; 0x2414 <getState>
    3140:	82 30       	cpi	r24, 0x02	; 2
    3142:	11 f4       	brne	.+4      	; 0x3148 <ON_STATE+0x14c>
	{
		State_led_start();
    3144:	0e 94 63 11 	call	0x22c6	; 0x22c6 <State_led_start>
	}
	else
	{

	}
}
    3148:	0f 90       	pop	r0
    314a:	0f 90       	pop	r0
    314c:	0f 90       	pop	r0
    314e:	0f 90       	pop	r0
    3150:	0f 90       	pop	r0
    3152:	cf 91       	pop	r28
    3154:	df 91       	pop	r29
    3156:	08 95       	ret

00003158 <TempSense>:




static f32 TempSense(void)
{
    3158:	df 93       	push	r29
    315a:	cf 93       	push	r28
    315c:	cd b7       	in	r28, 0x3d	; 61
    315e:	de b7       	in	r29, 0x3e	; 62
    3160:	ad 97       	sbiw	r28, 0x2d	; 45
    3162:	0f b6       	in	r0, 0x3f	; 63
    3164:	f8 94       	cli
    3166:	de bf       	out	0x3e, r29	; 62
    3168:	0f be       	out	0x3f, r0	; 63
    316a:	cd bf       	out	0x3d, r28	; 61
	f32 temp = 0 ;
    316c:	80 e0       	ldi	r24, 0x00	; 0
    316e:	90 e0       	ldi	r25, 0x00	; 0
    3170:	a0 e0       	ldi	r26, 0x00	; 0
    3172:	b0 e0       	ldi	r27, 0x00	; 0
    3174:	8a 83       	std	Y+2, r24	; 0x02
    3176:	9b 83       	std	Y+3, r25	; 0x03
    3178:	ac 83       	std	Y+4, r26	; 0x04
    317a:	bd 83       	std	Y+5, r27	; 0x05
	f32 readings[SIZE];
	u8 i = 0;
    317c:	19 82       	std	Y+1, r1	; 0x01

	for (i = 0 ; i < SIZE ; i++)
    317e:	19 82       	std	Y+1, r1	; 0x01
    3180:	2b c0       	rjmp	.+86     	; 0x31d8 <TempSense+0x80>
	{
		timer0_start(PRE256);
    3182:	84 e0       	ldi	r24, 0x04	; 4
    3184:	0e 94 df 07 	call	0xfbe	; 0xfbe <timer0_start>
		timer0_intial_val(READ_VALUE);
    3188:	8d e3       	ldi	r24, 0x3D	; 61
    318a:	0e 94 81 08 	call	0x1102	; 0x1102 <timer0_intial_val>
		while(timerFlag != ON_NUM_OVERFLOWS);
    318e:	80 91 6c 01 	lds	r24, 0x016C
    3192:	82 30       	cpi	r24, 0x02	; 2
    3194:	e1 f7       	brne	.-8      	; 0x318e <TempSense+0x36>
		readings[i] = currentTemp;
    3196:	89 81       	ldd	r24, Y+1	; 0x01
    3198:	88 2f       	mov	r24, r24
    319a:	90 e0       	ldi	r25, 0x00	; 0
    319c:	40 91 6e 01 	lds	r20, 0x016E
    31a0:	50 91 6f 01 	lds	r21, 0x016F
    31a4:	60 91 70 01 	lds	r22, 0x0170
    31a8:	70 91 71 01 	lds	r23, 0x0171
    31ac:	9c 01       	movw	r18, r24
    31ae:	22 0f       	add	r18, r18
    31b0:	33 1f       	adc	r19, r19
    31b2:	22 0f       	add	r18, r18
    31b4:	33 1f       	adc	r19, r19
    31b6:	ce 01       	movw	r24, r28
    31b8:	01 96       	adiw	r24, 0x01	; 1
    31ba:	82 0f       	add	r24, r18
    31bc:	93 1f       	adc	r25, r19
    31be:	fc 01       	movw	r30, r24
    31c0:	35 96       	adiw	r30, 0x05	; 5
    31c2:	40 83       	st	Z, r20
    31c4:	51 83       	std	Z+1, r21	; 0x01
    31c6:	62 83       	std	Z+2, r22	; 0x02
    31c8:	73 83       	std	Z+3, r23	; 0x03
		timer0_stop();
    31ca:	0e 94 8f 08 	call	0x111e	; 0x111e <timer0_stop>
		timerFlag = 0; 
    31ce:	10 92 6c 01 	sts	0x016C, r1
{
	f32 temp = 0 ;
	f32 readings[SIZE];
	u8 i = 0;

	for (i = 0 ; i < SIZE ; i++)
    31d2:	89 81       	ldd	r24, Y+1	; 0x01
    31d4:	8f 5f       	subi	r24, 0xFF	; 255
    31d6:	89 83       	std	Y+1, r24	; 0x01
    31d8:	89 81       	ldd	r24, Y+1	; 0x01
    31da:	8a 30       	cpi	r24, 0x0A	; 10
    31dc:	90 f2       	brcs	.-92     	; 0x3182 <TempSense+0x2a>
		readings[i] = currentTemp;
		timer0_stop();
		timerFlag = 0; 
	}

	for (i = 0 ; i < SIZE ; i++)
    31de:	19 82       	std	Y+1, r1	; 0x01
    31e0:	21 c0       	rjmp	.+66     	; 0x3224 <TempSense+0xcc>
	{
		temp = temp + readings[i];
    31e2:	89 81       	ldd	r24, Y+1	; 0x01
    31e4:	88 2f       	mov	r24, r24
    31e6:	90 e0       	ldi	r25, 0x00	; 0
    31e8:	9c 01       	movw	r18, r24
    31ea:	22 0f       	add	r18, r18
    31ec:	33 1f       	adc	r19, r19
    31ee:	22 0f       	add	r18, r18
    31f0:	33 1f       	adc	r19, r19
    31f2:	ce 01       	movw	r24, r28
    31f4:	01 96       	adiw	r24, 0x01	; 1
    31f6:	82 0f       	add	r24, r18
    31f8:	93 1f       	adc	r25, r19
    31fa:	fc 01       	movw	r30, r24
    31fc:	35 96       	adiw	r30, 0x05	; 5
    31fe:	20 81       	ld	r18, Z
    3200:	31 81       	ldd	r19, Z+1	; 0x01
    3202:	42 81       	ldd	r20, Z+2	; 0x02
    3204:	53 81       	ldd	r21, Z+3	; 0x03
    3206:	6a 81       	ldd	r22, Y+2	; 0x02
    3208:	7b 81       	ldd	r23, Y+3	; 0x03
    320a:	8c 81       	ldd	r24, Y+4	; 0x04
    320c:	9d 81       	ldd	r25, Y+5	; 0x05
    320e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3212:	dc 01       	movw	r26, r24
    3214:	cb 01       	movw	r24, r22
    3216:	8a 83       	std	Y+2, r24	; 0x02
    3218:	9b 83       	std	Y+3, r25	; 0x03
    321a:	ac 83       	std	Y+4, r26	; 0x04
    321c:	bd 83       	std	Y+5, r27	; 0x05
		readings[i] = currentTemp;
		timer0_stop();
		timerFlag = 0; 
	}

	for (i = 0 ; i < SIZE ; i++)
    321e:	89 81       	ldd	r24, Y+1	; 0x01
    3220:	8f 5f       	subi	r24, 0xFF	; 255
    3222:	89 83       	std	Y+1, r24	; 0x01
    3224:	89 81       	ldd	r24, Y+1	; 0x01
    3226:	8a 30       	cpi	r24, 0x0A	; 10
    3228:	e0 f2       	brcs	.-72     	; 0x31e2 <TempSense+0x8a>
	{
		temp = temp + readings[i];
	}
	temp = temp / SIZE ;
    322a:	6a 81       	ldd	r22, Y+2	; 0x02
    322c:	7b 81       	ldd	r23, Y+3	; 0x03
    322e:	8c 81       	ldd	r24, Y+4	; 0x04
    3230:	9d 81       	ldd	r25, Y+5	; 0x05
    3232:	20 e0       	ldi	r18, 0x00	; 0
    3234:	30 e0       	ldi	r19, 0x00	; 0
    3236:	40 e2       	ldi	r20, 0x20	; 32
    3238:	51 e4       	ldi	r21, 0x41	; 65
    323a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    323e:	dc 01       	movw	r26, r24
    3240:	cb 01       	movw	r24, r22
    3242:	8a 83       	std	Y+2, r24	; 0x02
    3244:	9b 83       	std	Y+3, r25	; 0x03
    3246:	ac 83       	std	Y+4, r26	; 0x04
    3248:	bd 83       	std	Y+5, r27	; 0x05

	return temp;
    324a:	8a 81       	ldd	r24, Y+2	; 0x02
    324c:	9b 81       	ldd	r25, Y+3	; 0x03
    324e:	ac 81       	ldd	r26, Y+4	; 0x04
    3250:	bd 81       	ldd	r27, Y+5	; 0x05
}
    3252:	bc 01       	movw	r22, r24
    3254:	cd 01       	movw	r24, r26
    3256:	ad 96       	adiw	r28, 0x2d	; 45
    3258:	0f b6       	in	r0, 0x3f	; 63
    325a:	f8 94       	cli
    325c:	de bf       	out	0x3e, r29	; 62
    325e:	0f be       	out	0x3f, r0	; 63
    3260:	cd bf       	out	0x3d, r28	; 61
    3262:	cf 91       	pop	r28
    3264:	df 91       	pop	r29
    3266:	08 95       	ret

00003268 <SETT_STATE>:




static void SETT_STATE(void)
{
    3268:	df 93       	push	r29
    326a:	cf 93       	push	r28
    326c:	0f 92       	push	r0
    326e:	cd b7       	in	r28, 0x3d	; 61
    3270:	de b7       	in	r29, 0x3e	; 62
	u8 temp = 0 ;
    3272:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		EEPROM_READ(ADDRESS,&temp);
    3274:	81 e0       	ldi	r24, 0x01	; 1
    3276:	93 e0       	ldi	r25, 0x03	; 3
    3278:	9e 01       	movw	r18, r28
    327a:	2f 5f       	subi	r18, 0xFF	; 255
    327c:	3f 4f       	sbci	r19, 0xFF	; 255
    327e:	b9 01       	movw	r22, r18
    3280:	0e 94 55 12 	call	0x24aa	; 0x24aa <EEPROM_READ>
		if (temp == setTemp)
    3284:	99 81       	ldd	r25, Y+1	; 0x01
    3286:	80 91 68 01 	lds	r24, 0x0168
    328a:	98 17       	cp	r25, r24
    328c:	29 f4       	brne	.+10     	; 0x3298 <SETT_STATE+0x30>
		{
			counterFlag++;
    328e:	80 91 6d 01 	lds	r24, 0x016D
    3292:	8f 5f       	subi	r24, 0xFF	; 255
    3294:	80 93 6d 01 	sts	0x016D, r24
		else
		{

		}

		if (counterFlag > 5)
    3298:	80 91 6d 01 	lds	r24, 0x016D
    329c:	86 30       	cpi	r24, 0x06	; 6
    329e:	c0 f4       	brcc	.+48     	; 0x32d0 <SETT_STATE+0x68>
			break;
		}
		else
		{

			timer0_start(PRE1024);
    32a0:	85 e0       	ldi	r24, 0x05	; 5
    32a2:	0e 94 df 07 	call	0xfbe	; 0xfbe <timer0_start>
			timer0_intial_val(SET_INTIAL_VALUE);
    32a6:	8c e0       	ldi	r24, 0x0C	; 12
    32a8:	0e 94 81 08 	call	0x1102	; 0x1102 <timer0_intial_val>
			EEPROM_WRITE(ADDRESS,setTemp);
    32ac:	20 91 68 01 	lds	r18, 0x0168
    32b0:	81 e0       	ldi	r24, 0x01	; 1
    32b2:	93 e0       	ldi	r25, 0x03	; 3
    32b4:	62 2f       	mov	r22, r18
    32b6:	0e 94 30 12 	call	0x2460	; 0x2460 <EEPROM_WRITE>
			SevenSegmentBlink();
    32ba:	0e 94 6f 19 	call	0x32de	; 0x32de <SevenSegmentBlink>
			while(timerFlag != SET_NUM_OVERFLOWS);
    32be:	80 91 6c 01 	lds	r24, 0x016C
    32c2:	84 30       	cpi	r24, 0x04	; 4
    32c4:	e1 f7       	brne	.-8      	; 0x32be <SETT_STATE+0x56>
			timer0_stop();
    32c6:	0e 94 8f 08 	call	0x111e	; 0x111e <timer0_stop>
			timerFlag = 0;
    32ca:	10 92 6c 01 	sts	0x016C, r1
    32ce:	d2 cf       	rjmp	.-92     	; 0x3274 <SETT_STATE+0xc>
		}
	}

	state = ON;
    32d0:	81 e0       	ldi	r24, 0x01	; 1
    32d2:	80 93 6a 01 	sts	0x016A, r24
}
    32d6:	0f 90       	pop	r0
    32d8:	cf 91       	pop	r28
    32da:	df 91       	pop	r29
    32dc:	08 95       	ret

000032de <SevenSegmentBlink>:




static void SevenSegmentBlink(void)
{
    32de:	df 93       	push	r29
    32e0:	cf 93       	push	r28
    32e2:	cd b7       	in	r28, 0x3d	; 61
    32e4:	de b7       	in	r29, 0x3e	; 62

	static u8 prev = 0;

	if (prev == 1)
    32e6:	80 91 72 01 	lds	r24, 0x0172
    32ea:	81 30       	cpi	r24, 0x01	; 1
    32ec:	49 f4       	brne	.+18     	; 0x3300 <SevenSegmentBlink+0x22>
	{
		Seven_segment_disable(UNIT);
    32ee:	80 e0       	ldi	r24, 0x00	; 0
    32f0:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <Seven_segment_disable>
		Seven_segment_disable(TENS);
    32f4:	81 e0       	ldi	r24, 0x01	; 1
    32f6:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <Seven_segment_disable>
		prev = 0 ;
    32fa:	10 92 72 01 	sts	0x0172, r1
    32fe:	17 c0       	rjmp	.+46     	; 0x332e <SevenSegmentBlink+0x50>
	}
	else
	{
		SevenSegmentWriteFloat(A,LSB,setTemp);
    3300:	80 91 68 01 	lds	r24, 0x0168
    3304:	28 2f       	mov	r18, r24
    3306:	30 e0       	ldi	r19, 0x00	; 0
    3308:	40 e0       	ldi	r20, 0x00	; 0
    330a:	50 e0       	ldi	r21, 0x00	; 0
    330c:	80 e0       	ldi	r24, 0x00	; 0
    330e:	60 e0       	ldi	r22, 0x00	; 0
    3310:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <SevenSegmentWriteFloat>
		SevenSegmentWriteFloat(B,MSB,setTemp);
    3314:	80 91 68 01 	lds	r24, 0x0168
    3318:	28 2f       	mov	r18, r24
    331a:	30 e0       	ldi	r19, 0x00	; 0
    331c:	40 e0       	ldi	r20, 0x00	; 0
    331e:	50 e0       	ldi	r21, 0x00	; 0
    3320:	81 e0       	ldi	r24, 0x01	; 1
    3322:	61 e0       	ldi	r22, 0x01	; 1
    3324:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <SevenSegmentWriteFloat>
		prev = 1 ;
    3328:	81 e0       	ldi	r24, 0x01	; 1
    332a:	80 93 72 01 	sts	0x0172, r24
	}
}
    332e:	cf 91       	pop	r28
    3330:	df 91       	pop	r29
    3332:	08 95       	ret

00003334 <__vector_1>:




ISR (EXT_INT0_VECT)
{
    3334:	1f 92       	push	r1
    3336:	0f 92       	push	r0
    3338:	0f b6       	in	r0, 0x3f	; 63
    333a:	0f 92       	push	r0
    333c:	11 24       	eor	r1, r1
    333e:	8f 93       	push	r24
    3340:	df 93       	push	r29
    3342:	cf 93       	push	r28
    3344:	cd b7       	in	r28, 0x3d	; 61
    3346:	de b7       	in	r29, 0x3e	; 62

	if (state != SETT)
    3348:	80 91 6a 01 	lds	r24, 0x016A
    334c:	82 30       	cpi	r24, 0x02	; 2
    334e:	21 f0       	breq	.+8      	; 0x3358 <__vector_1+0x24>
	{
		state = SETT;
    3350:	82 e0       	ldi	r24, 0x02	; 2
    3352:	80 93 6a 01 	sts	0x016A, r24
    3356:	0d c0       	rjmp	.+26     	; 0x3372 <__vector_1+0x3e>
	}
	else
	{
		if (setTemp >= 75)
    3358:	80 91 68 01 	lds	r24, 0x0168
    335c:	8b 34       	cpi	r24, 0x4B	; 75
    335e:	20 f0       	brcs	.+8      	; 0x3368 <__vector_1+0x34>
		{
			setTemp = 75 ;
    3360:	8b e4       	ldi	r24, 0x4B	; 75
    3362:	80 93 68 01 	sts	0x0168, r24
    3366:	05 c0       	rjmp	.+10     	; 0x3372 <__vector_1+0x3e>
		}
		else
		{
			setTemp = setTemp + 5 ;
    3368:	80 91 68 01 	lds	r24, 0x0168
    336c:	8b 5f       	subi	r24, 0xFB	; 251
    336e:	80 93 68 01 	sts	0x0168, r24
		}
	}

	timerFlag = 0;
    3372:	10 92 6c 01 	sts	0x016C, r1
	counterFlag = 0;
    3376:	10 92 6d 01 	sts	0x016D, r1
}
    337a:	cf 91       	pop	r28
    337c:	df 91       	pop	r29
    337e:	8f 91       	pop	r24
    3380:	0f 90       	pop	r0
    3382:	0f be       	out	0x3f, r0	; 63
    3384:	0f 90       	pop	r0
    3386:	1f 90       	pop	r1
    3388:	18 95       	reti

0000338a <__vector_2>:




ISR (EXT_INT1_VECT)
{
    338a:	1f 92       	push	r1
    338c:	0f 92       	push	r0
    338e:	0f b6       	in	r0, 0x3f	; 63
    3390:	0f 92       	push	r0
    3392:	11 24       	eor	r1, r1
    3394:	8f 93       	push	r24
    3396:	df 93       	push	r29
    3398:	cf 93       	push	r28
    339a:	cd b7       	in	r28, 0x3d	; 61
    339c:	de b7       	in	r29, 0x3e	; 62

	if (state != SETT)
    339e:	80 91 6a 01 	lds	r24, 0x016A
    33a2:	82 30       	cpi	r24, 0x02	; 2
    33a4:	21 f0       	breq	.+8      	; 0x33ae <__vector_2+0x24>
	{
		state = SETT;
    33a6:	82 e0       	ldi	r24, 0x02	; 2
    33a8:	80 93 6a 01 	sts	0x016A, r24
    33ac:	0d c0       	rjmp	.+26     	; 0x33c8 <__vector_2+0x3e>
	}
	else
	{

		if (setTemp <= 35)
    33ae:	80 91 68 01 	lds	r24, 0x0168
    33b2:	84 32       	cpi	r24, 0x24	; 36
    33b4:	20 f4       	brcc	.+8      	; 0x33be <__vector_2+0x34>
		{
			setTemp = 35 ;
    33b6:	83 e2       	ldi	r24, 0x23	; 35
    33b8:	80 93 68 01 	sts	0x0168, r24
    33bc:	05 c0       	rjmp	.+10     	; 0x33c8 <__vector_2+0x3e>
		}
		else
		{
			setTemp = setTemp - 5 ;
    33be:	80 91 68 01 	lds	r24, 0x0168
    33c2:	85 50       	subi	r24, 0x05	; 5
    33c4:	80 93 68 01 	sts	0x0168, r24
		}
	}

	timerFlag = 0;
    33c8:	10 92 6c 01 	sts	0x016C, r1
	counterFlag = 0;
    33cc:	10 92 6d 01 	sts	0x016D, r1
}
    33d0:	cf 91       	pop	r28
    33d2:	df 91       	pop	r29
    33d4:	8f 91       	pop	r24
    33d6:	0f 90       	pop	r0
    33d8:	0f be       	out	0x3f, r0	; 63
    33da:	0f 90       	pop	r0
    33dc:	1f 90       	pop	r1
    33de:	18 95       	reti

000033e0 <__vector_3>:




ISR (EXT_INT2_VECT)
{
    33e0:	1f 92       	push	r1
    33e2:	0f 92       	push	r0
    33e4:	0f b6       	in	r0, 0x3f	; 63
    33e6:	0f 92       	push	r0
    33e8:	11 24       	eor	r1, r1
    33ea:	8f 93       	push	r24
    33ec:	df 93       	push	r29
    33ee:	cf 93       	push	r28
    33f0:	cd b7       	in	r28, 0x3d	; 61
    33f2:	de b7       	in	r29, 0x3e	; 62

	if (state == OFF)
    33f4:	80 91 6a 01 	lds	r24, 0x016A
    33f8:	88 23       	and	r24, r24
    33fa:	21 f4       	brne	.+8      	; 0x3404 <__vector_3+0x24>
	{
		state = ON;
    33fc:	81 e0       	ldi	r24, 0x01	; 1
    33fe:	80 93 6a 01 	sts	0x016A, r24
    3402:	06 c0       	rjmp	.+12     	; 0x3410 <__vector_3+0x30>
	}
	else if (state == ON)
    3404:	80 91 6a 01 	lds	r24, 0x016A
    3408:	81 30       	cpi	r24, 0x01	; 1
    340a:	11 f4       	brne	.+4      	; 0x3410 <__vector_3+0x30>
	{
		state = OFF;
    340c:	10 92 6a 01 	sts	0x016A, r1
	}
	else
	{

	}
}
    3410:	cf 91       	pop	r28
    3412:	df 91       	pop	r29
    3414:	8f 91       	pop	r24
    3416:	0f 90       	pop	r0
    3418:	0f be       	out	0x3f, r0	; 63
    341a:	0f 90       	pop	r0
    341c:	1f 90       	pop	r1
    341e:	18 95       	reti

00003420 <__vector_11>:




ISR(TIMER0_OVF_vect)
{
    3420:	1f 92       	push	r1
    3422:	0f 92       	push	r0
    3424:	0f b6       	in	r0, 0x3f	; 63
    3426:	0f 92       	push	r0
    3428:	11 24       	eor	r1, r1
    342a:	2f 93       	push	r18
    342c:	3f 93       	push	r19
    342e:	4f 93       	push	r20
    3430:	5f 93       	push	r21
    3432:	6f 93       	push	r22
    3434:	7f 93       	push	r23
    3436:	8f 93       	push	r24
    3438:	9f 93       	push	r25
    343a:	af 93       	push	r26
    343c:	bf 93       	push	r27
    343e:	ef 93       	push	r30
    3440:	ff 93       	push	r31
    3442:	df 93       	push	r29
    3444:	cf 93       	push	r28
    3446:	cd b7       	in	r28, 0x3d	; 61
    3448:	de b7       	in	r29, 0x3e	; 62
	timerFlag++;
    344a:	80 91 6c 01 	lds	r24, 0x016C
    344e:	8f 5f       	subi	r24, 0xFF	; 255
    3450:	80 93 6c 01 	sts	0x016C, r24
	if (state == ON)
    3454:	80 91 6a 01 	lds	r24, 0x016A
    3458:	81 30       	cpi	r24, 0x01	; 1
    345a:	c9 f4       	brne	.+50     	; 0x348e <__vector_11+0x6e>
	{
		if (timerFlag == 2)
    345c:	80 91 6c 01 	lds	r24, 0x016C
    3460:	82 30       	cpi	r24, 0x02	; 2
    3462:	a9 f4       	brne	.+42     	; 0x348e <__vector_11+0x6e>
		{
			currentTemp = LM35_Read(ADC7);
    3464:	87 e0       	ldi	r24, 0x07	; 7
    3466:	0e 94 67 10 	call	0x20ce	; 0x20ce <LM35_Read>
    346a:	88 2f       	mov	r24, r24
    346c:	90 e0       	ldi	r25, 0x00	; 0
    346e:	a0 e0       	ldi	r26, 0x00	; 0
    3470:	b0 e0       	ldi	r27, 0x00	; 0
    3472:	bc 01       	movw	r22, r24
    3474:	cd 01       	movw	r24, r26
    3476:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    347a:	dc 01       	movw	r26, r24
    347c:	cb 01       	movw	r24, r22
    347e:	80 93 6e 01 	sts	0x016E, r24
    3482:	90 93 6f 01 	sts	0x016F, r25
    3486:	a0 93 70 01 	sts	0x0170, r26
    348a:	b0 93 71 01 	sts	0x0171, r27
		}
	}
}
    348e:	cf 91       	pop	r28
    3490:	df 91       	pop	r29
    3492:	ff 91       	pop	r31
    3494:	ef 91       	pop	r30
    3496:	bf 91       	pop	r27
    3498:	af 91       	pop	r26
    349a:	9f 91       	pop	r25
    349c:	8f 91       	pop	r24
    349e:	7f 91       	pop	r23
    34a0:	6f 91       	pop	r22
    34a2:	5f 91       	pop	r21
    34a4:	4f 91       	pop	r20
    34a6:	3f 91       	pop	r19
    34a8:	2f 91       	pop	r18
    34aa:	0f 90       	pop	r0
    34ac:	0f be       	out	0x3f, r0	; 63
    34ae:	0f 90       	pop	r0
    34b0:	1f 90       	pop	r1
    34b2:	18 95       	reti

000034b4 <main>:

#include "Application/app.h"


int main(void)
{
    34b4:	df 93       	push	r29
    34b6:	cf 93       	push	r28
    34b8:	cd b7       	in	r28, 0x3d	; 61
    34ba:	de b7       	in	r29, 0x3e	; 62
	APP_init();
    34bc:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <APP_init>
	APP_start();
    34c0:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <APP_start>
    34c4:	80 e0       	ldi	r24, 0x00	; 0
    34c6:	90 e0       	ldi	r25, 0x00	; 0
}
    34c8:	cf 91       	pop	r28
    34ca:	df 91       	pop	r29
    34cc:	08 95       	ret

000034ce <__udivmodqi4>:
    34ce:	99 1b       	sub	r25, r25
    34d0:	79 e0       	ldi	r23, 0x09	; 9
    34d2:	04 c0       	rjmp	.+8      	; 0x34dc <__udivmodqi4_ep>

000034d4 <__udivmodqi4_loop>:
    34d4:	99 1f       	adc	r25, r25
    34d6:	96 17       	cp	r25, r22
    34d8:	08 f0       	brcs	.+2      	; 0x34dc <__udivmodqi4_ep>
    34da:	96 1b       	sub	r25, r22

000034dc <__udivmodqi4_ep>:
    34dc:	88 1f       	adc	r24, r24
    34de:	7a 95       	dec	r23
    34e0:	c9 f7       	brne	.-14     	; 0x34d4 <__udivmodqi4_loop>
    34e2:	80 95       	com	r24
    34e4:	08 95       	ret

000034e6 <__udivmodsi4>:
    34e6:	a1 e2       	ldi	r26, 0x21	; 33
    34e8:	1a 2e       	mov	r1, r26
    34ea:	aa 1b       	sub	r26, r26
    34ec:	bb 1b       	sub	r27, r27
    34ee:	fd 01       	movw	r30, r26
    34f0:	0d c0       	rjmp	.+26     	; 0x350c <__udivmodsi4_ep>

000034f2 <__udivmodsi4_loop>:
    34f2:	aa 1f       	adc	r26, r26
    34f4:	bb 1f       	adc	r27, r27
    34f6:	ee 1f       	adc	r30, r30
    34f8:	ff 1f       	adc	r31, r31
    34fa:	a2 17       	cp	r26, r18
    34fc:	b3 07       	cpc	r27, r19
    34fe:	e4 07       	cpc	r30, r20
    3500:	f5 07       	cpc	r31, r21
    3502:	20 f0       	brcs	.+8      	; 0x350c <__udivmodsi4_ep>
    3504:	a2 1b       	sub	r26, r18
    3506:	b3 0b       	sbc	r27, r19
    3508:	e4 0b       	sbc	r30, r20
    350a:	f5 0b       	sbc	r31, r21

0000350c <__udivmodsi4_ep>:
    350c:	66 1f       	adc	r22, r22
    350e:	77 1f       	adc	r23, r23
    3510:	88 1f       	adc	r24, r24
    3512:	99 1f       	adc	r25, r25
    3514:	1a 94       	dec	r1
    3516:	69 f7       	brne	.-38     	; 0x34f2 <__udivmodsi4_loop>
    3518:	60 95       	com	r22
    351a:	70 95       	com	r23
    351c:	80 95       	com	r24
    351e:	90 95       	com	r25
    3520:	9b 01       	movw	r18, r22
    3522:	ac 01       	movw	r20, r24
    3524:	bd 01       	movw	r22, r26
    3526:	cf 01       	movw	r24, r30
    3528:	08 95       	ret

0000352a <__prologue_saves__>:
    352a:	2f 92       	push	r2
    352c:	3f 92       	push	r3
    352e:	4f 92       	push	r4
    3530:	5f 92       	push	r5
    3532:	6f 92       	push	r6
    3534:	7f 92       	push	r7
    3536:	8f 92       	push	r8
    3538:	9f 92       	push	r9
    353a:	af 92       	push	r10
    353c:	bf 92       	push	r11
    353e:	cf 92       	push	r12
    3540:	df 92       	push	r13
    3542:	ef 92       	push	r14
    3544:	ff 92       	push	r15
    3546:	0f 93       	push	r16
    3548:	1f 93       	push	r17
    354a:	cf 93       	push	r28
    354c:	df 93       	push	r29
    354e:	cd b7       	in	r28, 0x3d	; 61
    3550:	de b7       	in	r29, 0x3e	; 62
    3552:	ca 1b       	sub	r28, r26
    3554:	db 0b       	sbc	r29, r27
    3556:	0f b6       	in	r0, 0x3f	; 63
    3558:	f8 94       	cli
    355a:	de bf       	out	0x3e, r29	; 62
    355c:	0f be       	out	0x3f, r0	; 63
    355e:	cd bf       	out	0x3d, r28	; 61
    3560:	09 94       	ijmp

00003562 <__epilogue_restores__>:
    3562:	2a 88       	ldd	r2, Y+18	; 0x12
    3564:	39 88       	ldd	r3, Y+17	; 0x11
    3566:	48 88       	ldd	r4, Y+16	; 0x10
    3568:	5f 84       	ldd	r5, Y+15	; 0x0f
    356a:	6e 84       	ldd	r6, Y+14	; 0x0e
    356c:	7d 84       	ldd	r7, Y+13	; 0x0d
    356e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3570:	9b 84       	ldd	r9, Y+11	; 0x0b
    3572:	aa 84       	ldd	r10, Y+10	; 0x0a
    3574:	b9 84       	ldd	r11, Y+9	; 0x09
    3576:	c8 84       	ldd	r12, Y+8	; 0x08
    3578:	df 80       	ldd	r13, Y+7	; 0x07
    357a:	ee 80       	ldd	r14, Y+6	; 0x06
    357c:	fd 80       	ldd	r15, Y+5	; 0x05
    357e:	0c 81       	ldd	r16, Y+4	; 0x04
    3580:	1b 81       	ldd	r17, Y+3	; 0x03
    3582:	aa 81       	ldd	r26, Y+2	; 0x02
    3584:	b9 81       	ldd	r27, Y+1	; 0x01
    3586:	ce 0f       	add	r28, r30
    3588:	d1 1d       	adc	r29, r1
    358a:	0f b6       	in	r0, 0x3f	; 63
    358c:	f8 94       	cli
    358e:	de bf       	out	0x3e, r29	; 62
    3590:	0f be       	out	0x3f, r0	; 63
    3592:	cd bf       	out	0x3d, r28	; 61
    3594:	ed 01       	movw	r28, r26
    3596:	08 95       	ret

00003598 <_exit>:
    3598:	f8 94       	cli

0000359a <__stop_program>:
    359a:	ff cf       	rjmp	.-2      	; 0x359a <__stop_program>
